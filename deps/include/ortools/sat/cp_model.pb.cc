// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ortools/sat/cp_model.proto

#include "ortools/sat/cp_model.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ortools_2fsat_2fcp_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AllDifferentConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ortools_2fsat_2fcp_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AutomatonConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ortools_2fsat_2fcp_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BoolArgumentProto_ortools_2fsat_2fcp_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ortools_2fsat_2fcp_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CircuitConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ortools_2fsat_2fcp_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CircuitCoveringConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ortools_2fsat_2fcp_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<17> scc_info_ConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ortools_2fsat_2fcp_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CpObjectiveProto_ortools_2fsat_2fcp_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ortools_2fsat_2fcp_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CumulativeConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ortools_2fsat_2fcp_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DecisionStrategyProto_ortools_2fsat_2fcp_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ortools_2fsat_2fcp_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DecisionStrategyProto_AffineTransformation_ortools_2fsat_2fcp_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ortools_2fsat_2fcp_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ElementConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ortools_2fsat_2fcp_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IntegerArgumentProto_ortools_2fsat_2fcp_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ortools_2fsat_2fcp_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IntegerVariableProto_ortools_2fsat_2fcp_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ortools_2fsat_2fcp_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IntervalConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ortools_2fsat_2fcp_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InverseConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ortools_2fsat_2fcp_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LinearArgumentProto_ortools_2fsat_2fcp_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ortools_2fsat_2fcp_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LinearConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ortools_2fsat_2fcp_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LinearExpressionProto_ortools_2fsat_2fcp_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ortools_2fsat_2fcp_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NoOverlap2DConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ortools_2fsat_2fcp_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NoOverlapConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ortools_2fsat_2fcp_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PartialVariableAssignment_ortools_2fsat_2fcp_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ortools_2fsat_2fcp_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReservoirConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ortools_2fsat_2fcp_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoutesConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ortools_2fsat_2fcp_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TableConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto;
namespace operations_research {
namespace sat {
class IntegerVariableProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IntegerVariableProto> _instance;
} _IntegerVariableProto_default_instance_;
class BoolArgumentProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BoolArgumentProto> _instance;
} _BoolArgumentProto_default_instance_;
class IntegerArgumentProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IntegerArgumentProto> _instance;
} _IntegerArgumentProto_default_instance_;
class LinearExpressionProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LinearExpressionProto> _instance;
} _LinearExpressionProto_default_instance_;
class LinearArgumentProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LinearArgumentProto> _instance;
} _LinearArgumentProto_default_instance_;
class AllDifferentConstraintProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AllDifferentConstraintProto> _instance;
} _AllDifferentConstraintProto_default_instance_;
class LinearConstraintProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LinearConstraintProto> _instance;
} _LinearConstraintProto_default_instance_;
class ElementConstraintProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ElementConstraintProto> _instance;
} _ElementConstraintProto_default_instance_;
class IntervalConstraintProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IntervalConstraintProto> _instance;
} _IntervalConstraintProto_default_instance_;
class NoOverlapConstraintProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NoOverlapConstraintProto> _instance;
} _NoOverlapConstraintProto_default_instance_;
class NoOverlap2DConstraintProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NoOverlap2DConstraintProto> _instance;
} _NoOverlap2DConstraintProto_default_instance_;
class CumulativeConstraintProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CumulativeConstraintProto> _instance;
} _CumulativeConstraintProto_default_instance_;
class ReservoirConstraintProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReservoirConstraintProto> _instance;
} _ReservoirConstraintProto_default_instance_;
class CircuitConstraintProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CircuitConstraintProto> _instance;
} _CircuitConstraintProto_default_instance_;
class RoutesConstraintProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoutesConstraintProto> _instance;
} _RoutesConstraintProto_default_instance_;
class CircuitCoveringConstraintProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CircuitCoveringConstraintProto> _instance;
} _CircuitCoveringConstraintProto_default_instance_;
class TableConstraintProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TableConstraintProto> _instance;
} _TableConstraintProto_default_instance_;
class InverseConstraintProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InverseConstraintProto> _instance;
} _InverseConstraintProto_default_instance_;
class AutomatonConstraintProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AutomatonConstraintProto> _instance;
} _AutomatonConstraintProto_default_instance_;
class ConstraintProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConstraintProto> _instance;
  const ::operations_research::sat::BoolArgumentProto* bool_or_;
  const ::operations_research::sat::BoolArgumentProto* bool_and_;
  const ::operations_research::sat::BoolArgumentProto* at_most_one_;
  const ::operations_research::sat::BoolArgumentProto* bool_xor_;
  const ::operations_research::sat::IntegerArgumentProto* int_div_;
  const ::operations_research::sat::IntegerArgumentProto* int_mod_;
  const ::operations_research::sat::IntegerArgumentProto* int_max_;
  const ::operations_research::sat::LinearArgumentProto* lin_max_;
  const ::operations_research::sat::IntegerArgumentProto* int_min_;
  const ::operations_research::sat::LinearArgumentProto* lin_min_;
  const ::operations_research::sat::IntegerArgumentProto* int_prod_;
  const ::operations_research::sat::LinearConstraintProto* linear_;
  const ::operations_research::sat::AllDifferentConstraintProto* all_diff_;
  const ::operations_research::sat::ElementConstraintProto* element_;
  const ::operations_research::sat::CircuitConstraintProto* circuit_;
  const ::operations_research::sat::RoutesConstraintProto* routes_;
  const ::operations_research::sat::CircuitCoveringConstraintProto* circuit_covering_;
  const ::operations_research::sat::TableConstraintProto* table_;
  const ::operations_research::sat::AutomatonConstraintProto* automaton_;
  const ::operations_research::sat::InverseConstraintProto* inverse_;
  const ::operations_research::sat::ReservoirConstraintProto* reservoir_;
  const ::operations_research::sat::IntervalConstraintProto* interval_;
  const ::operations_research::sat::NoOverlapConstraintProto* no_overlap_;
  const ::operations_research::sat::NoOverlap2DConstraintProto* no_overlap_2d_;
  const ::operations_research::sat::CumulativeConstraintProto* cumulative_;
} _ConstraintProto_default_instance_;
class CpObjectiveProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CpObjectiveProto> _instance;
} _CpObjectiveProto_default_instance_;
class DecisionStrategyProto_AffineTransformationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DecisionStrategyProto_AffineTransformation> _instance;
} _DecisionStrategyProto_AffineTransformation_default_instance_;
class DecisionStrategyProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DecisionStrategyProto> _instance;
} _DecisionStrategyProto_default_instance_;
class PartialVariableAssignmentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PartialVariableAssignment> _instance;
} _PartialVariableAssignment_default_instance_;
class CpModelProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CpModelProto> _instance;
} _CpModelProto_default_instance_;
class CpSolverResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CpSolverResponse> _instance;
} _CpSolverResponse_default_instance_;
}  // namespace sat
}  // namespace operations_research
static void InitDefaultsscc_info_AllDifferentConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::operations_research::sat::_AllDifferentConstraintProto_default_instance_;
    new (ptr) ::operations_research::sat::AllDifferentConstraintProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::operations_research::sat::AllDifferentConstraintProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AllDifferentConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AllDifferentConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto}, {}};

static void InitDefaultsscc_info_AutomatonConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::operations_research::sat::_AutomatonConstraintProto_default_instance_;
    new (ptr) ::operations_research::sat::AutomatonConstraintProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::operations_research::sat::AutomatonConstraintProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AutomatonConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AutomatonConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto}, {}};

static void InitDefaultsscc_info_BoolArgumentProto_ortools_2fsat_2fcp_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::operations_research::sat::_BoolArgumentProto_default_instance_;
    new (ptr) ::operations_research::sat::BoolArgumentProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::operations_research::sat::BoolArgumentProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BoolArgumentProto_ortools_2fsat_2fcp_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BoolArgumentProto_ortools_2fsat_2fcp_5fmodel_2eproto}, {}};

static void InitDefaultsscc_info_CircuitConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::operations_research::sat::_CircuitConstraintProto_default_instance_;
    new (ptr) ::operations_research::sat::CircuitConstraintProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::operations_research::sat::CircuitConstraintProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CircuitConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CircuitConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto}, {}};

static void InitDefaultsscc_info_CircuitCoveringConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::operations_research::sat::_CircuitCoveringConstraintProto_default_instance_;
    new (ptr) ::operations_research::sat::CircuitCoveringConstraintProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::operations_research::sat::CircuitCoveringConstraintProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CircuitCoveringConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CircuitCoveringConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto}, {}};

static void InitDefaultsscc_info_ConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::operations_research::sat::_ConstraintProto_default_instance_;
    new (ptr) ::operations_research::sat::ConstraintProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::operations_research::sat::ConstraintProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<17> scc_info_ConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 17, 0, InitDefaultsscc_info_ConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto}, {
      &scc_info_BoolArgumentProto_ortools_2fsat_2fcp_5fmodel_2eproto.base,
      &scc_info_IntegerArgumentProto_ortools_2fsat_2fcp_5fmodel_2eproto.base,
      &scc_info_LinearArgumentProto_ortools_2fsat_2fcp_5fmodel_2eproto.base,
      &scc_info_LinearConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto.base,
      &scc_info_AllDifferentConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto.base,
      &scc_info_ElementConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto.base,
      &scc_info_CircuitConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto.base,
      &scc_info_RoutesConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto.base,
      &scc_info_CircuitCoveringConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto.base,
      &scc_info_TableConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto.base,
      &scc_info_AutomatonConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto.base,
      &scc_info_InverseConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto.base,
      &scc_info_ReservoirConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto.base,
      &scc_info_IntervalConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto.base,
      &scc_info_NoOverlapConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto.base,
      &scc_info_NoOverlap2DConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto.base,
      &scc_info_CumulativeConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_CpModelProto_ortools_2fsat_2fcp_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::operations_research::sat::_CpModelProto_default_instance_;
    new (ptr) ::operations_research::sat::CpModelProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::operations_research::sat::CpModelProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_CpModelProto_ortools_2fsat_2fcp_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_CpModelProto_ortools_2fsat_2fcp_5fmodel_2eproto}, {
      &scc_info_IntegerVariableProto_ortools_2fsat_2fcp_5fmodel_2eproto.base,
      &scc_info_ConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto.base,
      &scc_info_CpObjectiveProto_ortools_2fsat_2fcp_5fmodel_2eproto.base,
      &scc_info_DecisionStrategyProto_ortools_2fsat_2fcp_5fmodel_2eproto.base,
      &scc_info_PartialVariableAssignment_ortools_2fsat_2fcp_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_CpObjectiveProto_ortools_2fsat_2fcp_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::operations_research::sat::_CpObjectiveProto_default_instance_;
    new (ptr) ::operations_research::sat::CpObjectiveProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::operations_research::sat::CpObjectiveProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CpObjectiveProto_ortools_2fsat_2fcp_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CpObjectiveProto_ortools_2fsat_2fcp_5fmodel_2eproto}, {}};

static void InitDefaultsscc_info_CpSolverResponse_ortools_2fsat_2fcp_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::operations_research::sat::_CpSolverResponse_default_instance_;
    new (ptr) ::operations_research::sat::CpSolverResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::operations_research::sat::CpSolverResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CpSolverResponse_ortools_2fsat_2fcp_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CpSolverResponse_ortools_2fsat_2fcp_5fmodel_2eproto}, {
      &scc_info_IntegerVariableProto_ortools_2fsat_2fcp_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_CumulativeConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::operations_research::sat::_CumulativeConstraintProto_default_instance_;
    new (ptr) ::operations_research::sat::CumulativeConstraintProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::operations_research::sat::CumulativeConstraintProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CumulativeConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CumulativeConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto}, {}};

static void InitDefaultsscc_info_DecisionStrategyProto_ortools_2fsat_2fcp_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::operations_research::sat::_DecisionStrategyProto_default_instance_;
    new (ptr) ::operations_research::sat::DecisionStrategyProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::operations_research::sat::DecisionStrategyProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DecisionStrategyProto_ortools_2fsat_2fcp_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DecisionStrategyProto_ortools_2fsat_2fcp_5fmodel_2eproto}, {
      &scc_info_DecisionStrategyProto_AffineTransformation_ortools_2fsat_2fcp_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_DecisionStrategyProto_AffineTransformation_ortools_2fsat_2fcp_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::operations_research::sat::_DecisionStrategyProto_AffineTransformation_default_instance_;
    new (ptr) ::operations_research::sat::DecisionStrategyProto_AffineTransformation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::operations_research::sat::DecisionStrategyProto_AffineTransformation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DecisionStrategyProto_AffineTransformation_ortools_2fsat_2fcp_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DecisionStrategyProto_AffineTransformation_ortools_2fsat_2fcp_5fmodel_2eproto}, {}};

static void InitDefaultsscc_info_ElementConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::operations_research::sat::_ElementConstraintProto_default_instance_;
    new (ptr) ::operations_research::sat::ElementConstraintProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::operations_research::sat::ElementConstraintProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ElementConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ElementConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto}, {}};

static void InitDefaultsscc_info_IntegerArgumentProto_ortools_2fsat_2fcp_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::operations_research::sat::_IntegerArgumentProto_default_instance_;
    new (ptr) ::operations_research::sat::IntegerArgumentProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::operations_research::sat::IntegerArgumentProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IntegerArgumentProto_ortools_2fsat_2fcp_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IntegerArgumentProto_ortools_2fsat_2fcp_5fmodel_2eproto}, {}};

static void InitDefaultsscc_info_IntegerVariableProto_ortools_2fsat_2fcp_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::operations_research::sat::_IntegerVariableProto_default_instance_;
    new (ptr) ::operations_research::sat::IntegerVariableProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::operations_research::sat::IntegerVariableProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IntegerVariableProto_ortools_2fsat_2fcp_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IntegerVariableProto_ortools_2fsat_2fcp_5fmodel_2eproto}, {}};

static void InitDefaultsscc_info_IntervalConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::operations_research::sat::_IntervalConstraintProto_default_instance_;
    new (ptr) ::operations_research::sat::IntervalConstraintProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::operations_research::sat::IntervalConstraintProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IntervalConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IntervalConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto}, {}};

static void InitDefaultsscc_info_InverseConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::operations_research::sat::_InverseConstraintProto_default_instance_;
    new (ptr) ::operations_research::sat::InverseConstraintProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::operations_research::sat::InverseConstraintProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InverseConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InverseConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto}, {}};

static void InitDefaultsscc_info_LinearArgumentProto_ortools_2fsat_2fcp_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::operations_research::sat::_LinearArgumentProto_default_instance_;
    new (ptr) ::operations_research::sat::LinearArgumentProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::operations_research::sat::LinearArgumentProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LinearArgumentProto_ortools_2fsat_2fcp_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LinearArgumentProto_ortools_2fsat_2fcp_5fmodel_2eproto}, {
      &scc_info_LinearExpressionProto_ortools_2fsat_2fcp_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_LinearConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::operations_research::sat::_LinearConstraintProto_default_instance_;
    new (ptr) ::operations_research::sat::LinearConstraintProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::operations_research::sat::LinearConstraintProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LinearConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LinearConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto}, {}};

static void InitDefaultsscc_info_LinearExpressionProto_ortools_2fsat_2fcp_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::operations_research::sat::_LinearExpressionProto_default_instance_;
    new (ptr) ::operations_research::sat::LinearExpressionProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::operations_research::sat::LinearExpressionProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LinearExpressionProto_ortools_2fsat_2fcp_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LinearExpressionProto_ortools_2fsat_2fcp_5fmodel_2eproto}, {}};

static void InitDefaultsscc_info_NoOverlap2DConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::operations_research::sat::_NoOverlap2DConstraintProto_default_instance_;
    new (ptr) ::operations_research::sat::NoOverlap2DConstraintProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::operations_research::sat::NoOverlap2DConstraintProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NoOverlap2DConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NoOverlap2DConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto}, {}};

static void InitDefaultsscc_info_NoOverlapConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::operations_research::sat::_NoOverlapConstraintProto_default_instance_;
    new (ptr) ::operations_research::sat::NoOverlapConstraintProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::operations_research::sat::NoOverlapConstraintProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NoOverlapConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NoOverlapConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto}, {}};

static void InitDefaultsscc_info_PartialVariableAssignment_ortools_2fsat_2fcp_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::operations_research::sat::_PartialVariableAssignment_default_instance_;
    new (ptr) ::operations_research::sat::PartialVariableAssignment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::operations_research::sat::PartialVariableAssignment::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PartialVariableAssignment_ortools_2fsat_2fcp_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PartialVariableAssignment_ortools_2fsat_2fcp_5fmodel_2eproto}, {}};

static void InitDefaultsscc_info_ReservoirConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::operations_research::sat::_ReservoirConstraintProto_default_instance_;
    new (ptr) ::operations_research::sat::ReservoirConstraintProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::operations_research::sat::ReservoirConstraintProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReservoirConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReservoirConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto}, {}};

static void InitDefaultsscc_info_RoutesConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::operations_research::sat::_RoutesConstraintProto_default_instance_;
    new (ptr) ::operations_research::sat::RoutesConstraintProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::operations_research::sat::RoutesConstraintProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoutesConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RoutesConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto}, {}};

static void InitDefaultsscc_info_TableConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::operations_research::sat::_TableConstraintProto_default_instance_;
    new (ptr) ::operations_research::sat::TableConstraintProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::operations_research::sat::TableConstraintProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TableConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TableConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ortools_2fsat_2fcp_5fmodel_2eproto[26];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_ortools_2fsat_2fcp_5fmodel_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ortools_2fsat_2fcp_5fmodel_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ortools_2fsat_2fcp_5fmodel_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::IntegerVariableProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::IntegerVariableProto, name_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::IntegerVariableProto, domain_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::BoolArgumentProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::BoolArgumentProto, literals_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::IntegerArgumentProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::IntegerArgumentProto, target_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::IntegerArgumentProto, vars_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::LinearExpressionProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::LinearExpressionProto, vars_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::LinearExpressionProto, coeffs_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::LinearExpressionProto, offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::LinearArgumentProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::LinearArgumentProto, target_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::LinearArgumentProto, exprs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::AllDifferentConstraintProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::AllDifferentConstraintProto, vars_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::LinearConstraintProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::LinearConstraintProto, vars_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::LinearConstraintProto, coeffs_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::LinearConstraintProto, domain_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::ElementConstraintProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::ElementConstraintProto, index_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::ElementConstraintProto, target_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::ElementConstraintProto, vars_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::IntervalConstraintProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::IntervalConstraintProto, start_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::IntervalConstraintProto, end_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::IntervalConstraintProto, size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::NoOverlapConstraintProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::NoOverlapConstraintProto, intervals_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::NoOverlap2DConstraintProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::NoOverlap2DConstraintProto, x_intervals_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::NoOverlap2DConstraintProto, y_intervals_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::NoOverlap2DConstraintProto, boxes_with_null_area_can_overlap_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::CumulativeConstraintProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::CumulativeConstraintProto, capacity_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::CumulativeConstraintProto, intervals_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::CumulativeConstraintProto, demands_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::ReservoirConstraintProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::ReservoirConstraintProto, min_level_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::ReservoirConstraintProto, max_level_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::ReservoirConstraintProto, times_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::ReservoirConstraintProto, demands_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::ReservoirConstraintProto, actives_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::CircuitConstraintProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::CircuitConstraintProto, tails_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::CircuitConstraintProto, heads_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::CircuitConstraintProto, literals_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::RoutesConstraintProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::RoutesConstraintProto, tails_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::RoutesConstraintProto, heads_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::RoutesConstraintProto, literals_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::RoutesConstraintProto, demands_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::RoutesConstraintProto, capacity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::CircuitCoveringConstraintProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::CircuitCoveringConstraintProto, nexts_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::CircuitCoveringConstraintProto, distinguished_nodes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::TableConstraintProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::TableConstraintProto, vars_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::TableConstraintProto, values_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::TableConstraintProto, negated_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::InverseConstraintProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::InverseConstraintProto, f_direct_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::InverseConstraintProto, f_inverse_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::AutomatonConstraintProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::AutomatonConstraintProto, starting_state_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::AutomatonConstraintProto, final_states_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::AutomatonConstraintProto, transition_tail_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::AutomatonConstraintProto, transition_head_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::AutomatonConstraintProto, transition_label_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::AutomatonConstraintProto, vars_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::ConstraintProto, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::ConstraintProto, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::ConstraintProto, name_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::ConstraintProto, enforcement_literal_),
  offsetof(::operations_research::sat::ConstraintProtoDefaultTypeInternal, bool_or_),
  offsetof(::operations_research::sat::ConstraintProtoDefaultTypeInternal, bool_and_),
  offsetof(::operations_research::sat::ConstraintProtoDefaultTypeInternal, at_most_one_),
  offsetof(::operations_research::sat::ConstraintProtoDefaultTypeInternal, bool_xor_),
  offsetof(::operations_research::sat::ConstraintProtoDefaultTypeInternal, int_div_),
  offsetof(::operations_research::sat::ConstraintProtoDefaultTypeInternal, int_mod_),
  offsetof(::operations_research::sat::ConstraintProtoDefaultTypeInternal, int_max_),
  offsetof(::operations_research::sat::ConstraintProtoDefaultTypeInternal, lin_max_),
  offsetof(::operations_research::sat::ConstraintProtoDefaultTypeInternal, int_min_),
  offsetof(::operations_research::sat::ConstraintProtoDefaultTypeInternal, lin_min_),
  offsetof(::operations_research::sat::ConstraintProtoDefaultTypeInternal, int_prod_),
  offsetof(::operations_research::sat::ConstraintProtoDefaultTypeInternal, linear_),
  offsetof(::operations_research::sat::ConstraintProtoDefaultTypeInternal, all_diff_),
  offsetof(::operations_research::sat::ConstraintProtoDefaultTypeInternal, element_),
  offsetof(::operations_research::sat::ConstraintProtoDefaultTypeInternal, circuit_),
  offsetof(::operations_research::sat::ConstraintProtoDefaultTypeInternal, routes_),
  offsetof(::operations_research::sat::ConstraintProtoDefaultTypeInternal, circuit_covering_),
  offsetof(::operations_research::sat::ConstraintProtoDefaultTypeInternal, table_),
  offsetof(::operations_research::sat::ConstraintProtoDefaultTypeInternal, automaton_),
  offsetof(::operations_research::sat::ConstraintProtoDefaultTypeInternal, inverse_),
  offsetof(::operations_research::sat::ConstraintProtoDefaultTypeInternal, reservoir_),
  offsetof(::operations_research::sat::ConstraintProtoDefaultTypeInternal, interval_),
  offsetof(::operations_research::sat::ConstraintProtoDefaultTypeInternal, no_overlap_),
  offsetof(::operations_research::sat::ConstraintProtoDefaultTypeInternal, no_overlap_2d_),
  offsetof(::operations_research::sat::ConstraintProtoDefaultTypeInternal, cumulative_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::ConstraintProto, constraint_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::CpObjectiveProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::CpObjectiveProto, vars_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::CpObjectiveProto, coeffs_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::CpObjectiveProto, offset_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::CpObjectiveProto, scaling_factor_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::CpObjectiveProto, domain_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::DecisionStrategyProto_AffineTransformation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::DecisionStrategyProto_AffineTransformation, var_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::DecisionStrategyProto_AffineTransformation, offset_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::DecisionStrategyProto_AffineTransformation, positive_coeff_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::DecisionStrategyProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::DecisionStrategyProto, variables_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::DecisionStrategyProto, variable_selection_strategy_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::DecisionStrategyProto, domain_reduction_strategy_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::DecisionStrategyProto, transformations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::PartialVariableAssignment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::PartialVariableAssignment, vars_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::PartialVariableAssignment, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::CpModelProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::CpModelProto, name_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::CpModelProto, variables_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::CpModelProto, constraints_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::CpModelProto, objective_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::CpModelProto, search_strategy_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::CpModelProto, solution_hint_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::CpModelProto, assumptions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::CpSolverResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::CpSolverResponse, status_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::CpSolverResponse, solution_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::CpSolverResponse, objective_value_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::CpSolverResponse, best_objective_bound_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::CpSolverResponse, solution_lower_bounds_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::CpSolverResponse, solution_upper_bounds_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::CpSolverResponse, tightened_variables_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::CpSolverResponse, sufficient_assumptions_for_infeasibility_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::CpSolverResponse, all_solutions_were_found_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::CpSolverResponse, num_booleans_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::CpSolverResponse, num_conflicts_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::CpSolverResponse, num_branches_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::CpSolverResponse, num_binary_propagations_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::CpSolverResponse, num_integer_propagations_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::CpSolverResponse, wall_time_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::CpSolverResponse, user_time_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::CpSolverResponse, deterministic_time_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::CpSolverResponse, primal_integral_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::CpSolverResponse, solution_info_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::operations_research::sat::IntegerVariableProto)},
  { 7, -1, sizeof(::operations_research::sat::BoolArgumentProto)},
  { 13, -1, sizeof(::operations_research::sat::IntegerArgumentProto)},
  { 20, -1, sizeof(::operations_research::sat::LinearExpressionProto)},
  { 28, -1, sizeof(::operations_research::sat::LinearArgumentProto)},
  { 35, -1, sizeof(::operations_research::sat::AllDifferentConstraintProto)},
  { 41, -1, sizeof(::operations_research::sat::LinearConstraintProto)},
  { 49, -1, sizeof(::operations_research::sat::ElementConstraintProto)},
  { 57, -1, sizeof(::operations_research::sat::IntervalConstraintProto)},
  { 65, -1, sizeof(::operations_research::sat::NoOverlapConstraintProto)},
  { 71, -1, sizeof(::operations_research::sat::NoOverlap2DConstraintProto)},
  { 79, -1, sizeof(::operations_research::sat::CumulativeConstraintProto)},
  { 87, -1, sizeof(::operations_research::sat::ReservoirConstraintProto)},
  { 97, -1, sizeof(::operations_research::sat::CircuitConstraintProto)},
  { 105, -1, sizeof(::operations_research::sat::RoutesConstraintProto)},
  { 115, -1, sizeof(::operations_research::sat::CircuitCoveringConstraintProto)},
  { 122, -1, sizeof(::operations_research::sat::TableConstraintProto)},
  { 130, -1, sizeof(::operations_research::sat::InverseConstraintProto)},
  { 137, -1, sizeof(::operations_research::sat::AutomatonConstraintProto)},
  { 148, -1, sizeof(::operations_research::sat::ConstraintProto)},
  { 181, -1, sizeof(::operations_research::sat::CpObjectiveProto)},
  { 191, -1, sizeof(::operations_research::sat::DecisionStrategyProto_AffineTransformation)},
  { 199, -1, sizeof(::operations_research::sat::DecisionStrategyProto)},
  { 208, -1, sizeof(::operations_research::sat::PartialVariableAssignment)},
  { 215, -1, sizeof(::operations_research::sat::CpModelProto)},
  { 227, -1, sizeof(::operations_research::sat::CpSolverResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::operations_research::sat::_IntegerVariableProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::operations_research::sat::_BoolArgumentProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::operations_research::sat::_IntegerArgumentProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::operations_research::sat::_LinearExpressionProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::operations_research::sat::_LinearArgumentProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::operations_research::sat::_AllDifferentConstraintProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::operations_research::sat::_LinearConstraintProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::operations_research::sat::_ElementConstraintProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::operations_research::sat::_IntervalConstraintProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::operations_research::sat::_NoOverlapConstraintProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::operations_research::sat::_NoOverlap2DConstraintProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::operations_research::sat::_CumulativeConstraintProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::operations_research::sat::_ReservoirConstraintProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::operations_research::sat::_CircuitConstraintProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::operations_research::sat::_RoutesConstraintProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::operations_research::sat::_CircuitCoveringConstraintProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::operations_research::sat::_TableConstraintProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::operations_research::sat::_InverseConstraintProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::operations_research::sat::_AutomatonConstraintProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::operations_research::sat::_ConstraintProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::operations_research::sat::_CpObjectiveProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::operations_research::sat::_DecisionStrategyProto_AffineTransformation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::operations_research::sat::_DecisionStrategyProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::operations_research::sat::_PartialVariableAssignment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::operations_research::sat::_CpModelProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::operations_research::sat::_CpSolverResponse_default_instance_),
};

const char descriptor_table_protodef_ortools_2fsat_2fcp_5fmodel_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032ortools/sat/cp_model.proto\022\027operations"
  "_research.sat\"4\n\024IntegerVariableProto\022\014\n"
  "\004name\030\001 \001(\t\022\016\n\006domain\030\002 \003(\003\"%\n\021BoolArgum"
  "entProto\022\020\n\010literals\030\001 \003(\005\"4\n\024IntegerArg"
  "umentProto\022\016\n\006target\030\001 \001(\005\022\014\n\004vars\030\002 \003(\005"
  "\"E\n\025LinearExpressionProto\022\014\n\004vars\030\001 \003(\005\022"
  "\016\n\006coeffs\030\002 \003(\003\022\016\n\006offset\030\003 \001(\003\"\224\001\n\023Line"
  "arArgumentProto\022>\n\006target\030\001 \001(\0132..operat"
  "ions_research.sat.LinearExpressionProto\022"
  "=\n\005exprs\030\002 \003(\0132..operations_research.sat"
  ".LinearExpressionProto\"+\n\033AllDifferentCo"
  "nstraintProto\022\014\n\004vars\030\001 \003(\005\"E\n\025LinearCon"
  "straintProto\022\014\n\004vars\030\001 \003(\005\022\016\n\006coeffs\030\002 \003"
  "(\003\022\016\n\006domain\030\003 \003(\003\"E\n\026ElementConstraintP"
  "roto\022\r\n\005index\030\001 \001(\005\022\016\n\006target\030\002 \001(\005\022\014\n\004v"
  "ars\030\003 \003(\005\"C\n\027IntervalConstraintProto\022\r\n\005"
  "start\030\001 \001(\005\022\013\n\003end\030\002 \001(\005\022\014\n\004size\030\003 \001(\005\"-"
  "\n\030NoOverlapConstraintProto\022\021\n\tintervals\030"
  "\001 \003(\005\"p\n\032NoOverlap2DConstraintProto\022\023\n\013x"
  "_intervals\030\001 \003(\005\022\023\n\013y_intervals\030\002 \003(\005\022(\n"
  " boxes_with_null_area_can_overlap\030\003 \001(\010\""
  "Q\n\031CumulativeConstraintProto\022\020\n\010capacity"
  "\030\001 \001(\005\022\021\n\tintervals\030\002 \003(\005\022\017\n\007demands\030\003 \003"
  "(\005\"q\n\030ReservoirConstraintProto\022\021\n\tmin_le"
  "vel\030\001 \001(\003\022\021\n\tmax_level\030\002 \001(\003\022\r\n\005times\030\003 "
  "\003(\005\022\017\n\007demands\030\004 \003(\003\022\017\n\007actives\030\005 \003(\005\"H\n"
  "\026CircuitConstraintProto\022\r\n\005tails\030\003 \003(\005\022\r"
  "\n\005heads\030\004 \003(\005\022\020\n\010literals\030\005 \003(\005\"j\n\025Route"
  "sConstraintProto\022\r\n\005tails\030\001 \003(\005\022\r\n\005heads"
  "\030\002 \003(\005\022\020\n\010literals\030\003 \003(\005\022\017\n\007demands\030\004 \003("
  "\005\022\020\n\010capacity\030\005 \001(\003\"L\n\036CircuitCoveringCo"
  "nstraintProto\022\r\n\005nexts\030\001 \003(\005\022\033\n\023distingu"
  "ished_nodes\030\002 \003(\003\"E\n\024TableConstraintProt"
  "o\022\014\n\004vars\030\001 \003(\005\022\016\n\006values\030\002 \003(\003\022\017\n\007negat"
  "ed\030\003 \001(\010\"=\n\026InverseConstraintProto\022\020\n\010f_"
  "direct\030\001 \003(\005\022\021\n\tf_inverse\030\002 \003(\005\"\242\001\n\030Auto"
  "matonConstraintProto\022\026\n\016starting_state\030\002"
  " \001(\003\022\024\n\014final_states\030\003 \003(\003\022\027\n\017transition"
  "_tail\030\004 \003(\003\022\027\n\017transition_head\030\005 \003(\003\022\030\n\020"
  "transition_label\030\006 \003(\003\022\014\n\004vars\030\007 \003(\005\"\377\r\n"
  "\017ConstraintProto\022\014\n\004name\030\001 \001(\t\022\033\n\023enforc"
  "ement_literal\030\002 \003(\005\022=\n\007bool_or\030\003 \001(\0132*.o"
  "perations_research.sat.BoolArgumentProto"
  "H\000\022>\n\010bool_and\030\004 \001(\0132*.operations_resear"
  "ch.sat.BoolArgumentProtoH\000\022A\n\013at_most_on"
  "e\030\032 \001(\0132*.operations_research.sat.BoolAr"
  "gumentProtoH\000\022>\n\010bool_xor\030\005 \001(\0132*.operat"
  "ions_research.sat.BoolArgumentProtoH\000\022@\n"
  "\007int_div\030\007 \001(\0132-.operations_research.sat"
  ".IntegerArgumentProtoH\000\022@\n\007int_mod\030\010 \001(\013"
  "2-.operations_research.sat.IntegerArgume"
  "ntProtoH\000\022@\n\007int_max\030\t \001(\0132-.operations_"
  "research.sat.IntegerArgumentProtoH\000\022\?\n\007l"
  "in_max\030\033 \001(\0132,.operations_research.sat.L"
  "inearArgumentProtoH\000\022@\n\007int_min\030\n \001(\0132-."
  "operations_research.sat.IntegerArgumentP"
  "rotoH\000\022\?\n\007lin_min\030\034 \001(\0132,.operations_res"
  "earch.sat.LinearArgumentProtoH\000\022A\n\010int_p"
  "rod\030\013 \001(\0132-.operations_research.sat.Inte"
  "gerArgumentProtoH\000\022@\n\006linear\030\014 \001(\0132..ope"
  "rations_research.sat.LinearConstraintPro"
  "toH\000\022H\n\010all_diff\030\r \001(\01324.operations_rese"
  "arch.sat.AllDifferentConstraintProtoH\000\022B"
  "\n\007element\030\016 \001(\0132/.operations_research.sa"
  "t.ElementConstraintProtoH\000\022B\n\007circuit\030\017 "
  "\001(\0132/.operations_research.sat.CircuitCon"
  "straintProtoH\000\022@\n\006routes\030\027 \001(\0132..operati"
  "ons_research.sat.RoutesConstraintProtoH\000"
  "\022S\n\020circuit_covering\030\031 \001(\01327.operations_"
  "research.sat.CircuitCoveringConstraintPr"
  "otoH\000\022>\n\005table\030\020 \001(\0132-.operations_resear"
  "ch.sat.TableConstraintProtoH\000\022F\n\tautomat"
  "on\030\021 \001(\01321.operations_research.sat.Autom"
  "atonConstraintProtoH\000\022B\n\007inverse\030\022 \001(\0132/"
  ".operations_research.sat.InverseConstrai"
  "ntProtoH\000\022F\n\treservoir\030\030 \001(\01321.operation"
  "s_research.sat.ReservoirConstraintProtoH"
  "\000\022D\n\010interval\030\023 \001(\01320.operations_researc"
  "h.sat.IntervalConstraintProtoH\000\022G\n\nno_ov"
  "erlap\030\024 \001(\01321.operations_research.sat.No"
  "OverlapConstraintProtoH\000\022L\n\rno_overlap_2"
  "d\030\025 \001(\01323.operations_research.sat.NoOver"
  "lap2DConstraintProtoH\000\022H\n\ncumulative\030\026 \001"
  "(\01322.operations_research.sat.CumulativeC"
  "onstraintProtoH\000B\014\n\nconstraint\"h\n\020CpObje"
  "ctiveProto\022\014\n\004vars\030\001 \003(\005\022\016\n\006coeffs\030\004 \003(\003"
  "\022\016\n\006offset\030\002 \001(\001\022\026\n\016scaling_factor\030\003 \001(\001"
  "\022\016\n\006domain\030\005 \003(\003\"\325\005\n\025DecisionStrategyPro"
  "to\022\021\n\tvariables\030\001 \003(\005\022m\n\033variable_select"
  "ion_strategy\030\002 \001(\0162H.operations_research"
  ".sat.DecisionStrategyProto.VariableSelec"
  "tionStrategy\022i\n\031domain_reduction_strateg"
  "y\030\003 \001(\0162F.operations_research.sat.Decisi"
  "onStrategyProto.DomainReductionStrategy\022"
  "\\\n\017transformations\030\004 \003(\0132C.operations_re"
  "search.sat.DecisionStrategyProto.AffineT"
  "ransformation\032K\n\024AffineTransformation\022\013\n"
  "\003var\030\001 \001(\005\022\016\n\006offset\030\002 \001(\003\022\026\n\016positive_c"
  "oeff\030\003 \001(\003\"\224\001\n\031VariableSelectionStrategy"
  "\022\020\n\014CHOOSE_FIRST\020\000\022\025\n\021CHOOSE_LOWEST_MIN\020"
  "\001\022\026\n\022CHOOSE_HIGHEST_MAX\020\002\022\032\n\026CHOOSE_MIN_"
  "DOMAIN_SIZE\020\003\022\032\n\026CHOOSE_MAX_DOMAIN_SIZE\020"
  "\004\"\214\001\n\027DomainReductionStrategy\022\024\n\020SELECT_"
  "MIN_VALUE\020\000\022\024\n\020SELECT_MAX_VALUE\020\001\022\025\n\021SEL"
  "ECT_LOWER_HALF\020\002\022\025\n\021SELECT_UPPER_HALF\020\003\022"
  "\027\n\023SELECT_MEDIAN_VALUE\020\004\"9\n\031PartialVaria"
  "bleAssignment\022\014\n\004vars\030\001 \003(\005\022\016\n\006values\030\002 "
  "\003(\003\"\204\003\n\014CpModelProto\022\014\n\004name\030\001 \001(\t\022@\n\tva"
  "riables\030\002 \003(\0132-.operations_research.sat."
  "IntegerVariableProto\022=\n\013constraints\030\003 \003("
  "\0132(.operations_research.sat.ConstraintPr"
  "oto\022<\n\tobjective\030\004 \001(\0132).operations_rese"
  "arch.sat.CpObjectiveProto\022G\n\017search_stra"
  "tegy\030\005 \003(\0132..operations_research.sat.Dec"
  "isionStrategyProto\022I\n\rsolution_hint\030\006 \001("
  "\01322.operations_research.sat.PartialVaria"
  "bleAssignment\022\023\n\013assumptions\030\007 \003(\005\"\352\004\n\020C"
  "pSolverResponse\0227\n\006status\030\001 \001(\0162\'.operat"
  "ions_research.sat.CpSolverStatus\022\020\n\010solu"
  "tion\030\002 \003(\003\022\027\n\017objective_value\030\003 \001(\001\022\034\n\024b"
  "est_objective_bound\030\004 \001(\001\022\035\n\025solution_lo"
  "wer_bounds\030\022 \003(\003\022\035\n\025solution_upper_bound"
  "s\030\023 \003(\003\022J\n\023tightened_variables\030\025 \003(\0132-.o"
  "perations_research.sat.IntegerVariablePr"
  "oto\0220\n(sufficient_assumptions_for_infeas"
  "ibility\030\027 \003(\005\022 \n\030all_solutions_were_foun"
  "d\030\005 \001(\010\022\024\n\014num_booleans\030\n \001(\003\022\025\n\rnum_con"
  "flicts\030\013 \001(\003\022\024\n\014num_branches\030\014 \001(\003\022\037\n\027nu"
  "m_binary_propagations\030\r \001(\003\022 \n\030num_integ"
  "er_propagations\030\016 \001(\003\022\021\n\twall_time\030\017 \001(\001"
  "\022\021\n\tuser_time\030\020 \001(\001\022\032\n\022deterministic_tim"
  "e\030\021 \001(\001\022\027\n\017primal_integral\030\026 \001(\001\022\025\n\rsolu"
  "tion_info\030\024 \001(\t*[\n\016CpSolverStatus\022\013\n\007UNK"
  "NOWN\020\000\022\021\n\rMODEL_INVALID\020\001\022\014\n\010FEASIBLE\020\002\022"
  "\016\n\nINFEASIBLE\020\003\022\013\n\007OPTIMAL\020\004B@\n\026com.goog"
  "le.ortools.satB\017CpModelProtobufP\001\252\002\022Goog"
  "le.OrTools.Satb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto_sccs[26] = {
  &scc_info_AllDifferentConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto.base,
  &scc_info_AutomatonConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto.base,
  &scc_info_BoolArgumentProto_ortools_2fsat_2fcp_5fmodel_2eproto.base,
  &scc_info_CircuitConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto.base,
  &scc_info_CircuitCoveringConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto.base,
  &scc_info_ConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto.base,
  &scc_info_CpModelProto_ortools_2fsat_2fcp_5fmodel_2eproto.base,
  &scc_info_CpObjectiveProto_ortools_2fsat_2fcp_5fmodel_2eproto.base,
  &scc_info_CpSolverResponse_ortools_2fsat_2fcp_5fmodel_2eproto.base,
  &scc_info_CumulativeConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto.base,
  &scc_info_DecisionStrategyProto_ortools_2fsat_2fcp_5fmodel_2eproto.base,
  &scc_info_DecisionStrategyProto_AffineTransformation_ortools_2fsat_2fcp_5fmodel_2eproto.base,
  &scc_info_ElementConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto.base,
  &scc_info_IntegerArgumentProto_ortools_2fsat_2fcp_5fmodel_2eproto.base,
  &scc_info_IntegerVariableProto_ortools_2fsat_2fcp_5fmodel_2eproto.base,
  &scc_info_IntervalConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto.base,
  &scc_info_InverseConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto.base,
  &scc_info_LinearArgumentProto_ortools_2fsat_2fcp_5fmodel_2eproto.base,
  &scc_info_LinearConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto.base,
  &scc_info_LinearExpressionProto_ortools_2fsat_2fcp_5fmodel_2eproto.base,
  &scc_info_NoOverlap2DConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto.base,
  &scc_info_NoOverlapConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto.base,
  &scc_info_PartialVariableAssignment_ortools_2fsat_2fcp_5fmodel_2eproto.base,
  &scc_info_ReservoirConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto.base,
  &scc_info_RoutesConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto.base,
  &scc_info_TableConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto = {
  false, false, descriptor_table_protodef_ortools_2fsat_2fcp_5fmodel_2eproto, "ortools/sat/cp_model.proto", 5462,
  &descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto_once, descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto_sccs, descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto_deps, 26, 0,
  schemas, file_default_instances, TableStruct_ortools_2fsat_2fcp_5fmodel_2eproto::offsets,
  file_level_metadata_ortools_2fsat_2fcp_5fmodel_2eproto, 26, file_level_enum_descriptors_ortools_2fsat_2fcp_5fmodel_2eproto, file_level_service_descriptors_ortools_2fsat_2fcp_5fmodel_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ortools_2fsat_2fcp_5fmodel_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto)), true);
namespace operations_research {
namespace sat {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DecisionStrategyProto_VariableSelectionStrategy_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto);
  return file_level_enum_descriptors_ortools_2fsat_2fcp_5fmodel_2eproto[0];
}
bool DecisionStrategyProto_VariableSelectionStrategy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DecisionStrategyProto_VariableSelectionStrategy DecisionStrategyProto::CHOOSE_FIRST;
constexpr DecisionStrategyProto_VariableSelectionStrategy DecisionStrategyProto::CHOOSE_LOWEST_MIN;
constexpr DecisionStrategyProto_VariableSelectionStrategy DecisionStrategyProto::CHOOSE_HIGHEST_MAX;
constexpr DecisionStrategyProto_VariableSelectionStrategy DecisionStrategyProto::CHOOSE_MIN_DOMAIN_SIZE;
constexpr DecisionStrategyProto_VariableSelectionStrategy DecisionStrategyProto::CHOOSE_MAX_DOMAIN_SIZE;
constexpr DecisionStrategyProto_VariableSelectionStrategy DecisionStrategyProto::VariableSelectionStrategy_MIN;
constexpr DecisionStrategyProto_VariableSelectionStrategy DecisionStrategyProto::VariableSelectionStrategy_MAX;
constexpr int DecisionStrategyProto::VariableSelectionStrategy_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DecisionStrategyProto_DomainReductionStrategy_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto);
  return file_level_enum_descriptors_ortools_2fsat_2fcp_5fmodel_2eproto[1];
}
bool DecisionStrategyProto_DomainReductionStrategy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DecisionStrategyProto_DomainReductionStrategy DecisionStrategyProto::SELECT_MIN_VALUE;
constexpr DecisionStrategyProto_DomainReductionStrategy DecisionStrategyProto::SELECT_MAX_VALUE;
constexpr DecisionStrategyProto_DomainReductionStrategy DecisionStrategyProto::SELECT_LOWER_HALF;
constexpr DecisionStrategyProto_DomainReductionStrategy DecisionStrategyProto::SELECT_UPPER_HALF;
constexpr DecisionStrategyProto_DomainReductionStrategy DecisionStrategyProto::SELECT_MEDIAN_VALUE;
constexpr DecisionStrategyProto_DomainReductionStrategy DecisionStrategyProto::DomainReductionStrategy_MIN;
constexpr DecisionStrategyProto_DomainReductionStrategy DecisionStrategyProto::DomainReductionStrategy_MAX;
constexpr int DecisionStrategyProto::DomainReductionStrategy_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CpSolverStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto);
  return file_level_enum_descriptors_ortools_2fsat_2fcp_5fmodel_2eproto[2];
}
bool CpSolverStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void IntegerVariableProto::InitAsDefaultInstance() {
}
class IntegerVariableProto::_Internal {
 public:
};

IntegerVariableProto::IntegerVariableProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  domain_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:operations_research.sat.IntegerVariableProto)
}
IntegerVariableProto::IntegerVariableProto(const IntegerVariableProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      domain_(from.domain_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:operations_research.sat.IntegerVariableProto)
}

void IntegerVariableProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IntegerVariableProto_ortools_2fsat_2fcp_5fmodel_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

IntegerVariableProto::~IntegerVariableProto() {
  // @@protoc_insertion_point(destructor:operations_research.sat.IntegerVariableProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IntegerVariableProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IntegerVariableProto::ArenaDtor(void* object) {
  IntegerVariableProto* _this = reinterpret_cast< IntegerVariableProto* >(object);
  (void)_this;
}
void IntegerVariableProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IntegerVariableProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IntegerVariableProto& IntegerVariableProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IntegerVariableProto_ortools_2fsat_2fcp_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void IntegerVariableProto::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.sat.IntegerVariableProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  domain_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IntegerVariableProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "operations_research.sat.IntegerVariableProto.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 domain = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_domain(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_domain(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IntegerVariableProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.sat.IntegerVariableProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "operations_research.sat.IntegerVariableProto.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated int64 domain = 2;
  {
    int byte_size = _domain_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_domain(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.sat.IntegerVariableProto)
  return target;
}

size_t IntegerVariableProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.sat.IntegerVariableProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 domain = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->domain_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _domain_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IntegerVariableProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:operations_research.sat.IntegerVariableProto)
  GOOGLE_DCHECK_NE(&from, this);
  const IntegerVariableProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IntegerVariableProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:operations_research.sat.IntegerVariableProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:operations_research.sat.IntegerVariableProto)
    MergeFrom(*source);
  }
}

void IntegerVariableProto::MergeFrom(const IntegerVariableProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:operations_research.sat.IntegerVariableProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  domain_.MergeFrom(from.domain_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
}

void IntegerVariableProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:operations_research.sat.IntegerVariableProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntegerVariableProto::CopyFrom(const IntegerVariableProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.sat.IntegerVariableProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntegerVariableProto::IsInitialized() const {
  return true;
}

void IntegerVariableProto::InternalSwap(IntegerVariableProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  domain_.InternalSwap(&other->domain_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata IntegerVariableProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BoolArgumentProto::InitAsDefaultInstance() {
}
class BoolArgumentProto::_Internal {
 public:
};

BoolArgumentProto::BoolArgumentProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  literals_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:operations_research.sat.BoolArgumentProto)
}
BoolArgumentProto::BoolArgumentProto(const BoolArgumentProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      literals_(from.literals_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:operations_research.sat.BoolArgumentProto)
}

void BoolArgumentProto::SharedCtor() {
}

BoolArgumentProto::~BoolArgumentProto() {
  // @@protoc_insertion_point(destructor:operations_research.sat.BoolArgumentProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BoolArgumentProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BoolArgumentProto::ArenaDtor(void* object) {
  BoolArgumentProto* _this = reinterpret_cast< BoolArgumentProto* >(object);
  (void)_this;
}
void BoolArgumentProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BoolArgumentProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BoolArgumentProto& BoolArgumentProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BoolArgumentProto_ortools_2fsat_2fcp_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void BoolArgumentProto::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.sat.BoolArgumentProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  literals_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BoolArgumentProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 literals = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_literals(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_literals(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BoolArgumentProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.sat.BoolArgumentProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 literals = 1;
  {
    int byte_size = _literals_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_literals(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.sat.BoolArgumentProto)
  return target;
}

size_t BoolArgumentProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.sat.BoolArgumentProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 literals = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->literals_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _literals_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BoolArgumentProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:operations_research.sat.BoolArgumentProto)
  GOOGLE_DCHECK_NE(&from, this);
  const BoolArgumentProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BoolArgumentProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:operations_research.sat.BoolArgumentProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:operations_research.sat.BoolArgumentProto)
    MergeFrom(*source);
  }
}

void BoolArgumentProto::MergeFrom(const BoolArgumentProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:operations_research.sat.BoolArgumentProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  literals_.MergeFrom(from.literals_);
}

void BoolArgumentProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:operations_research.sat.BoolArgumentProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoolArgumentProto::CopyFrom(const BoolArgumentProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.sat.BoolArgumentProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoolArgumentProto::IsInitialized() const {
  return true;
}

void BoolArgumentProto::InternalSwap(BoolArgumentProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  literals_.InternalSwap(&other->literals_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BoolArgumentProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IntegerArgumentProto::InitAsDefaultInstance() {
}
class IntegerArgumentProto::_Internal {
 public:
};

IntegerArgumentProto::IntegerArgumentProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  vars_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:operations_research.sat.IntegerArgumentProto)
}
IntegerArgumentProto::IntegerArgumentProto(const IntegerArgumentProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vars_(from.vars_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  target_ = from.target_;
  // @@protoc_insertion_point(copy_constructor:operations_research.sat.IntegerArgumentProto)
}

void IntegerArgumentProto::SharedCtor() {
  target_ = 0;
}

IntegerArgumentProto::~IntegerArgumentProto() {
  // @@protoc_insertion_point(destructor:operations_research.sat.IntegerArgumentProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IntegerArgumentProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IntegerArgumentProto::ArenaDtor(void* object) {
  IntegerArgumentProto* _this = reinterpret_cast< IntegerArgumentProto* >(object);
  (void)_this;
}
void IntegerArgumentProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IntegerArgumentProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IntegerArgumentProto& IntegerArgumentProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IntegerArgumentProto_ortools_2fsat_2fcp_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void IntegerArgumentProto::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.sat.IntegerArgumentProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vars_.Clear();
  target_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IntegerArgumentProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 target = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 vars = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_vars(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_vars(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IntegerArgumentProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.sat.IntegerArgumentProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 target = 1;
  if (this->target() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_target(), target);
  }

  // repeated int32 vars = 2;
  {
    int byte_size = _vars_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_vars(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.sat.IntegerArgumentProto)
  return target;
}

size_t IntegerArgumentProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.sat.IntegerArgumentProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 vars = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->vars_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _vars_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 target = 1;
  if (this->target() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_target());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IntegerArgumentProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:operations_research.sat.IntegerArgumentProto)
  GOOGLE_DCHECK_NE(&from, this);
  const IntegerArgumentProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IntegerArgumentProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:operations_research.sat.IntegerArgumentProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:operations_research.sat.IntegerArgumentProto)
    MergeFrom(*source);
  }
}

void IntegerArgumentProto::MergeFrom(const IntegerArgumentProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:operations_research.sat.IntegerArgumentProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vars_.MergeFrom(from.vars_);
  if (from.target() != 0) {
    _internal_set_target(from._internal_target());
  }
}

void IntegerArgumentProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:operations_research.sat.IntegerArgumentProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntegerArgumentProto::CopyFrom(const IntegerArgumentProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.sat.IntegerArgumentProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntegerArgumentProto::IsInitialized() const {
  return true;
}

void IntegerArgumentProto::InternalSwap(IntegerArgumentProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vars_.InternalSwap(&other->vars_);
  swap(target_, other->target_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IntegerArgumentProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LinearExpressionProto::InitAsDefaultInstance() {
}
class LinearExpressionProto::_Internal {
 public:
};

LinearExpressionProto::LinearExpressionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  vars_(arena),
  coeffs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:operations_research.sat.LinearExpressionProto)
}
LinearExpressionProto::LinearExpressionProto(const LinearExpressionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vars_(from.vars_),
      coeffs_(from.coeffs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  offset_ = from.offset_;
  // @@protoc_insertion_point(copy_constructor:operations_research.sat.LinearExpressionProto)
}

void LinearExpressionProto::SharedCtor() {
  offset_ = PROTOBUF_LONGLONG(0);
}

LinearExpressionProto::~LinearExpressionProto() {
  // @@protoc_insertion_point(destructor:operations_research.sat.LinearExpressionProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LinearExpressionProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LinearExpressionProto::ArenaDtor(void* object) {
  LinearExpressionProto* _this = reinterpret_cast< LinearExpressionProto* >(object);
  (void)_this;
}
void LinearExpressionProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LinearExpressionProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LinearExpressionProto& LinearExpressionProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LinearExpressionProto_ortools_2fsat_2fcp_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void LinearExpressionProto::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.sat.LinearExpressionProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vars_.Clear();
  coeffs_.Clear();
  offset_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LinearExpressionProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 vars = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_vars(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_vars(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 coeffs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_coeffs(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_coeffs(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LinearExpressionProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.sat.LinearExpressionProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 vars = 1;
  {
    int byte_size = _vars_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_vars(), byte_size, target);
    }
  }

  // repeated int64 coeffs = 2;
  {
    int byte_size = _coeffs_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_coeffs(), byte_size, target);
    }
  }

  // int64 offset = 3;
  if (this->offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.sat.LinearExpressionProto)
  return target;
}

size_t LinearExpressionProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.sat.LinearExpressionProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 vars = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->vars_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _vars_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 coeffs = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->coeffs_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _coeffs_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int64 offset = 3;
  if (this->offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_offset());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LinearExpressionProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:operations_research.sat.LinearExpressionProto)
  GOOGLE_DCHECK_NE(&from, this);
  const LinearExpressionProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LinearExpressionProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:operations_research.sat.LinearExpressionProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:operations_research.sat.LinearExpressionProto)
    MergeFrom(*source);
  }
}

void LinearExpressionProto::MergeFrom(const LinearExpressionProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:operations_research.sat.LinearExpressionProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vars_.MergeFrom(from.vars_);
  coeffs_.MergeFrom(from.coeffs_);
  if (from.offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
}

void LinearExpressionProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:operations_research.sat.LinearExpressionProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinearExpressionProto::CopyFrom(const LinearExpressionProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.sat.LinearExpressionProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinearExpressionProto::IsInitialized() const {
  return true;
}

void LinearExpressionProto::InternalSwap(LinearExpressionProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vars_.InternalSwap(&other->vars_);
  coeffs_.InternalSwap(&other->coeffs_);
  swap(offset_, other->offset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LinearExpressionProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LinearArgumentProto::InitAsDefaultInstance() {
  ::operations_research::sat::_LinearArgumentProto_default_instance_._instance.get_mutable()->target_ = const_cast< ::operations_research::sat::LinearExpressionProto*>(
      ::operations_research::sat::LinearExpressionProto::internal_default_instance());
}
class LinearArgumentProto::_Internal {
 public:
  static const ::operations_research::sat::LinearExpressionProto& target(const LinearArgumentProto* msg);
};

const ::operations_research::sat::LinearExpressionProto&
LinearArgumentProto::_Internal::target(const LinearArgumentProto* msg) {
  return *msg->target_;
}
LinearArgumentProto::LinearArgumentProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  exprs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:operations_research.sat.LinearArgumentProto)
}
LinearArgumentProto::LinearArgumentProto(const LinearArgumentProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      exprs_(from.exprs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_target()) {
    target_ = new ::operations_research::sat::LinearExpressionProto(*from.target_);
  } else {
    target_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:operations_research.sat.LinearArgumentProto)
}

void LinearArgumentProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LinearArgumentProto_ortools_2fsat_2fcp_5fmodel_2eproto.base);
  target_ = nullptr;
}

LinearArgumentProto::~LinearArgumentProto() {
  // @@protoc_insertion_point(destructor:operations_research.sat.LinearArgumentProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LinearArgumentProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete target_;
}

void LinearArgumentProto::ArenaDtor(void* object) {
  LinearArgumentProto* _this = reinterpret_cast< LinearArgumentProto* >(object);
  (void)_this;
}
void LinearArgumentProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LinearArgumentProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LinearArgumentProto& LinearArgumentProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LinearArgumentProto_ortools_2fsat_2fcp_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void LinearArgumentProto::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.sat.LinearArgumentProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  exprs_.Clear();
  if (GetArena() == nullptr && target_ != nullptr) {
    delete target_;
  }
  target_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LinearArgumentProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .operations_research.sat.LinearExpressionProto target = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_target(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .operations_research.sat.LinearExpressionProto exprs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_exprs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LinearArgumentProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.sat.LinearArgumentProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .operations_research.sat.LinearExpressionProto target = 1;
  if (this->has_target()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::target(this), target, stream);
  }

  // repeated .operations_research.sat.LinearExpressionProto exprs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_exprs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_exprs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.sat.LinearArgumentProto)
  return target;
}

size_t LinearArgumentProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.sat.LinearArgumentProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .operations_research.sat.LinearExpressionProto exprs = 2;
  total_size += 1UL * this->_internal_exprs_size();
  for (const auto& msg : this->exprs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .operations_research.sat.LinearExpressionProto target = 1;
  if (this->has_target()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LinearArgumentProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:operations_research.sat.LinearArgumentProto)
  GOOGLE_DCHECK_NE(&from, this);
  const LinearArgumentProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LinearArgumentProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:operations_research.sat.LinearArgumentProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:operations_research.sat.LinearArgumentProto)
    MergeFrom(*source);
  }
}

void LinearArgumentProto::MergeFrom(const LinearArgumentProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:operations_research.sat.LinearArgumentProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  exprs_.MergeFrom(from.exprs_);
  if (from.has_target()) {
    _internal_mutable_target()->::operations_research::sat::LinearExpressionProto::MergeFrom(from._internal_target());
  }
}

void LinearArgumentProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:operations_research.sat.LinearArgumentProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinearArgumentProto::CopyFrom(const LinearArgumentProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.sat.LinearArgumentProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinearArgumentProto::IsInitialized() const {
  return true;
}

void LinearArgumentProto::InternalSwap(LinearArgumentProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  exprs_.InternalSwap(&other->exprs_);
  swap(target_, other->target_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LinearArgumentProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AllDifferentConstraintProto::InitAsDefaultInstance() {
}
class AllDifferentConstraintProto::_Internal {
 public:
};

AllDifferentConstraintProto::AllDifferentConstraintProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  vars_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:operations_research.sat.AllDifferentConstraintProto)
}
AllDifferentConstraintProto::AllDifferentConstraintProto(const AllDifferentConstraintProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vars_(from.vars_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:operations_research.sat.AllDifferentConstraintProto)
}

void AllDifferentConstraintProto::SharedCtor() {
}

AllDifferentConstraintProto::~AllDifferentConstraintProto() {
  // @@protoc_insertion_point(destructor:operations_research.sat.AllDifferentConstraintProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AllDifferentConstraintProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AllDifferentConstraintProto::ArenaDtor(void* object) {
  AllDifferentConstraintProto* _this = reinterpret_cast< AllDifferentConstraintProto* >(object);
  (void)_this;
}
void AllDifferentConstraintProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AllDifferentConstraintProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AllDifferentConstraintProto& AllDifferentConstraintProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AllDifferentConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void AllDifferentConstraintProto::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.sat.AllDifferentConstraintProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vars_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AllDifferentConstraintProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 vars = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_vars(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_vars(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AllDifferentConstraintProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.sat.AllDifferentConstraintProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 vars = 1;
  {
    int byte_size = _vars_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_vars(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.sat.AllDifferentConstraintProto)
  return target;
}

size_t AllDifferentConstraintProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.sat.AllDifferentConstraintProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 vars = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->vars_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _vars_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AllDifferentConstraintProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:operations_research.sat.AllDifferentConstraintProto)
  GOOGLE_DCHECK_NE(&from, this);
  const AllDifferentConstraintProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AllDifferentConstraintProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:operations_research.sat.AllDifferentConstraintProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:operations_research.sat.AllDifferentConstraintProto)
    MergeFrom(*source);
  }
}

void AllDifferentConstraintProto::MergeFrom(const AllDifferentConstraintProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:operations_research.sat.AllDifferentConstraintProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vars_.MergeFrom(from.vars_);
}

void AllDifferentConstraintProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:operations_research.sat.AllDifferentConstraintProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllDifferentConstraintProto::CopyFrom(const AllDifferentConstraintProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.sat.AllDifferentConstraintProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllDifferentConstraintProto::IsInitialized() const {
  return true;
}

void AllDifferentConstraintProto::InternalSwap(AllDifferentConstraintProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vars_.InternalSwap(&other->vars_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AllDifferentConstraintProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LinearConstraintProto::InitAsDefaultInstance() {
}
class LinearConstraintProto::_Internal {
 public:
};

LinearConstraintProto::LinearConstraintProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  vars_(arena),
  coeffs_(arena),
  domain_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:operations_research.sat.LinearConstraintProto)
}
LinearConstraintProto::LinearConstraintProto(const LinearConstraintProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vars_(from.vars_),
      coeffs_(from.coeffs_),
      domain_(from.domain_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:operations_research.sat.LinearConstraintProto)
}

void LinearConstraintProto::SharedCtor() {
}

LinearConstraintProto::~LinearConstraintProto() {
  // @@protoc_insertion_point(destructor:operations_research.sat.LinearConstraintProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LinearConstraintProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LinearConstraintProto::ArenaDtor(void* object) {
  LinearConstraintProto* _this = reinterpret_cast< LinearConstraintProto* >(object);
  (void)_this;
}
void LinearConstraintProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LinearConstraintProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LinearConstraintProto& LinearConstraintProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LinearConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void LinearConstraintProto::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.sat.LinearConstraintProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vars_.Clear();
  coeffs_.Clear();
  domain_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LinearConstraintProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 vars = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_vars(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_vars(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 coeffs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_coeffs(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_coeffs(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 domain = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_domain(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_domain(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LinearConstraintProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.sat.LinearConstraintProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 vars = 1;
  {
    int byte_size = _vars_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_vars(), byte_size, target);
    }
  }

  // repeated int64 coeffs = 2;
  {
    int byte_size = _coeffs_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_coeffs(), byte_size, target);
    }
  }

  // repeated int64 domain = 3;
  {
    int byte_size = _domain_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_domain(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.sat.LinearConstraintProto)
  return target;
}

size_t LinearConstraintProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.sat.LinearConstraintProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 vars = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->vars_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _vars_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 coeffs = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->coeffs_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _coeffs_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 domain = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->domain_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _domain_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LinearConstraintProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:operations_research.sat.LinearConstraintProto)
  GOOGLE_DCHECK_NE(&from, this);
  const LinearConstraintProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LinearConstraintProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:operations_research.sat.LinearConstraintProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:operations_research.sat.LinearConstraintProto)
    MergeFrom(*source);
  }
}

void LinearConstraintProto::MergeFrom(const LinearConstraintProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:operations_research.sat.LinearConstraintProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vars_.MergeFrom(from.vars_);
  coeffs_.MergeFrom(from.coeffs_);
  domain_.MergeFrom(from.domain_);
}

void LinearConstraintProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:operations_research.sat.LinearConstraintProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinearConstraintProto::CopyFrom(const LinearConstraintProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.sat.LinearConstraintProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinearConstraintProto::IsInitialized() const {
  return true;
}

void LinearConstraintProto::InternalSwap(LinearConstraintProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vars_.InternalSwap(&other->vars_);
  coeffs_.InternalSwap(&other->coeffs_);
  domain_.InternalSwap(&other->domain_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LinearConstraintProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ElementConstraintProto::InitAsDefaultInstance() {
}
class ElementConstraintProto::_Internal {
 public:
};

ElementConstraintProto::ElementConstraintProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  vars_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:operations_research.sat.ElementConstraintProto)
}
ElementConstraintProto::ElementConstraintProto(const ElementConstraintProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vars_(from.vars_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_) -
    reinterpret_cast<char*>(&index_)) + sizeof(target_));
  // @@protoc_insertion_point(copy_constructor:operations_research.sat.ElementConstraintProto)
}

void ElementConstraintProto::SharedCtor() {
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_) -
      reinterpret_cast<char*>(&index_)) + sizeof(target_));
}

ElementConstraintProto::~ElementConstraintProto() {
  // @@protoc_insertion_point(destructor:operations_research.sat.ElementConstraintProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ElementConstraintProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ElementConstraintProto::ArenaDtor(void* object) {
  ElementConstraintProto* _this = reinterpret_cast< ElementConstraintProto* >(object);
  (void)_this;
}
void ElementConstraintProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ElementConstraintProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ElementConstraintProto& ElementConstraintProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ElementConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void ElementConstraintProto::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.sat.ElementConstraintProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vars_.Clear();
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_) -
      reinterpret_cast<char*>(&index_)) + sizeof(target_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ElementConstraintProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 target = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 vars = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_vars(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_vars(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ElementConstraintProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.sat.ElementConstraintProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  // int32 target = 2;
  if (this->target() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_target(), target);
  }

  // repeated int32 vars = 3;
  {
    int byte_size = _vars_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_vars(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.sat.ElementConstraintProto)
  return target;
}

size_t ElementConstraintProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.sat.ElementConstraintProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 vars = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->vars_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _vars_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());
  }

  // int32 target = 2;
  if (this->target() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_target());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ElementConstraintProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:operations_research.sat.ElementConstraintProto)
  GOOGLE_DCHECK_NE(&from, this);
  const ElementConstraintProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ElementConstraintProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:operations_research.sat.ElementConstraintProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:operations_research.sat.ElementConstraintProto)
    MergeFrom(*source);
  }
}

void ElementConstraintProto::MergeFrom(const ElementConstraintProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:operations_research.sat.ElementConstraintProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vars_.MergeFrom(from.vars_);
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from.target() != 0) {
    _internal_set_target(from._internal_target());
  }
}

void ElementConstraintProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:operations_research.sat.ElementConstraintProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ElementConstraintProto::CopyFrom(const ElementConstraintProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.sat.ElementConstraintProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ElementConstraintProto::IsInitialized() const {
  return true;
}

void ElementConstraintProto::InternalSwap(ElementConstraintProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vars_.InternalSwap(&other->vars_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ElementConstraintProto, target_)
      + sizeof(ElementConstraintProto::target_)
      - PROTOBUF_FIELD_OFFSET(ElementConstraintProto, index_)>(
          reinterpret_cast<char*>(&index_),
          reinterpret_cast<char*>(&other->index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ElementConstraintProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IntervalConstraintProto::InitAsDefaultInstance() {
}
class IntervalConstraintProto::_Internal {
 public:
};

IntervalConstraintProto::IntervalConstraintProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:operations_research.sat.IntervalConstraintProto)
}
IntervalConstraintProto::IntervalConstraintProto(const IntervalConstraintProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&start_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:operations_research.sat.IntervalConstraintProto)
}

void IntervalConstraintProto::SharedCtor() {
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&start_)) + sizeof(size_));
}

IntervalConstraintProto::~IntervalConstraintProto() {
  // @@protoc_insertion_point(destructor:operations_research.sat.IntervalConstraintProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IntervalConstraintProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IntervalConstraintProto::ArenaDtor(void* object) {
  IntervalConstraintProto* _this = reinterpret_cast< IntervalConstraintProto* >(object);
  (void)_this;
}
void IntervalConstraintProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IntervalConstraintProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IntervalConstraintProto& IntervalConstraintProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IntervalConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void IntervalConstraintProto::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.sat.IntervalConstraintProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&start_)) + sizeof(size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IntervalConstraintProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IntervalConstraintProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.sat.IntervalConstraintProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 start = 1;
  if (this->start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_start(), target);
  }

  // int32 end = 2;
  if (this->end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_end(), target);
  }

  // int32 size = 3;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.sat.IntervalConstraintProto)
  return target;
}

size_t IntervalConstraintProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.sat.IntervalConstraintProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 start = 1;
  if (this->start() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_start());
  }

  // int32 end = 2;
  if (this->end() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_end());
  }

  // int32 size = 3;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IntervalConstraintProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:operations_research.sat.IntervalConstraintProto)
  GOOGLE_DCHECK_NE(&from, this);
  const IntervalConstraintProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IntervalConstraintProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:operations_research.sat.IntervalConstraintProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:operations_research.sat.IntervalConstraintProto)
    MergeFrom(*source);
  }
}

void IntervalConstraintProto::MergeFrom(const IntervalConstraintProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:operations_research.sat.IntervalConstraintProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start() != 0) {
    _internal_set_start(from._internal_start());
  }
  if (from.end() != 0) {
    _internal_set_end(from._internal_end());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
}

void IntervalConstraintProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:operations_research.sat.IntervalConstraintProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntervalConstraintProto::CopyFrom(const IntervalConstraintProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.sat.IntervalConstraintProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntervalConstraintProto::IsInitialized() const {
  return true;
}

void IntervalConstraintProto::InternalSwap(IntervalConstraintProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IntervalConstraintProto, size_)
      + sizeof(IntervalConstraintProto::size_)
      - PROTOBUF_FIELD_OFFSET(IntervalConstraintProto, start_)>(
          reinterpret_cast<char*>(&start_),
          reinterpret_cast<char*>(&other->start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IntervalConstraintProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NoOverlapConstraintProto::InitAsDefaultInstance() {
}
class NoOverlapConstraintProto::_Internal {
 public:
};

NoOverlapConstraintProto::NoOverlapConstraintProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  intervals_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:operations_research.sat.NoOverlapConstraintProto)
}
NoOverlapConstraintProto::NoOverlapConstraintProto(const NoOverlapConstraintProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      intervals_(from.intervals_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:operations_research.sat.NoOverlapConstraintProto)
}

void NoOverlapConstraintProto::SharedCtor() {
}

NoOverlapConstraintProto::~NoOverlapConstraintProto() {
  // @@protoc_insertion_point(destructor:operations_research.sat.NoOverlapConstraintProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NoOverlapConstraintProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NoOverlapConstraintProto::ArenaDtor(void* object) {
  NoOverlapConstraintProto* _this = reinterpret_cast< NoOverlapConstraintProto* >(object);
  (void)_this;
}
void NoOverlapConstraintProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NoOverlapConstraintProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NoOverlapConstraintProto& NoOverlapConstraintProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NoOverlapConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void NoOverlapConstraintProto::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.sat.NoOverlapConstraintProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  intervals_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NoOverlapConstraintProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 intervals = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_intervals(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_intervals(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NoOverlapConstraintProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.sat.NoOverlapConstraintProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 intervals = 1;
  {
    int byte_size = _intervals_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_intervals(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.sat.NoOverlapConstraintProto)
  return target;
}

size_t NoOverlapConstraintProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.sat.NoOverlapConstraintProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 intervals = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->intervals_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _intervals_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NoOverlapConstraintProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:operations_research.sat.NoOverlapConstraintProto)
  GOOGLE_DCHECK_NE(&from, this);
  const NoOverlapConstraintProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NoOverlapConstraintProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:operations_research.sat.NoOverlapConstraintProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:operations_research.sat.NoOverlapConstraintProto)
    MergeFrom(*source);
  }
}

void NoOverlapConstraintProto::MergeFrom(const NoOverlapConstraintProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:operations_research.sat.NoOverlapConstraintProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  intervals_.MergeFrom(from.intervals_);
}

void NoOverlapConstraintProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:operations_research.sat.NoOverlapConstraintProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NoOverlapConstraintProto::CopyFrom(const NoOverlapConstraintProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.sat.NoOverlapConstraintProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoOverlapConstraintProto::IsInitialized() const {
  return true;
}

void NoOverlapConstraintProto::InternalSwap(NoOverlapConstraintProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  intervals_.InternalSwap(&other->intervals_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NoOverlapConstraintProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NoOverlap2DConstraintProto::InitAsDefaultInstance() {
}
class NoOverlap2DConstraintProto::_Internal {
 public:
};

NoOverlap2DConstraintProto::NoOverlap2DConstraintProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  x_intervals_(arena),
  y_intervals_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:operations_research.sat.NoOverlap2DConstraintProto)
}
NoOverlap2DConstraintProto::NoOverlap2DConstraintProto(const NoOverlap2DConstraintProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      x_intervals_(from.x_intervals_),
      y_intervals_(from.y_intervals_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  boxes_with_null_area_can_overlap_ = from.boxes_with_null_area_can_overlap_;
  // @@protoc_insertion_point(copy_constructor:operations_research.sat.NoOverlap2DConstraintProto)
}

void NoOverlap2DConstraintProto::SharedCtor() {
  boxes_with_null_area_can_overlap_ = false;
}

NoOverlap2DConstraintProto::~NoOverlap2DConstraintProto() {
  // @@protoc_insertion_point(destructor:operations_research.sat.NoOverlap2DConstraintProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NoOverlap2DConstraintProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NoOverlap2DConstraintProto::ArenaDtor(void* object) {
  NoOverlap2DConstraintProto* _this = reinterpret_cast< NoOverlap2DConstraintProto* >(object);
  (void)_this;
}
void NoOverlap2DConstraintProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NoOverlap2DConstraintProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NoOverlap2DConstraintProto& NoOverlap2DConstraintProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NoOverlap2DConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void NoOverlap2DConstraintProto::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.sat.NoOverlap2DConstraintProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  x_intervals_.Clear();
  y_intervals_.Clear();
  boxes_with_null_area_can_overlap_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NoOverlap2DConstraintProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 x_intervals = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_x_intervals(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_x_intervals(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 y_intervals = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_y_intervals(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_y_intervals(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool boxes_with_null_area_can_overlap = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          boxes_with_null_area_can_overlap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NoOverlap2DConstraintProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.sat.NoOverlap2DConstraintProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 x_intervals = 1;
  {
    int byte_size = _x_intervals_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_x_intervals(), byte_size, target);
    }
  }

  // repeated int32 y_intervals = 2;
  {
    int byte_size = _y_intervals_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_y_intervals(), byte_size, target);
    }
  }

  // bool boxes_with_null_area_can_overlap = 3;
  if (this->boxes_with_null_area_can_overlap() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_boxes_with_null_area_can_overlap(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.sat.NoOverlap2DConstraintProto)
  return target;
}

size_t NoOverlap2DConstraintProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.sat.NoOverlap2DConstraintProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 x_intervals = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->x_intervals_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _x_intervals_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 y_intervals = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->y_intervals_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _y_intervals_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bool boxes_with_null_area_can_overlap = 3;
  if (this->boxes_with_null_area_can_overlap() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NoOverlap2DConstraintProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:operations_research.sat.NoOverlap2DConstraintProto)
  GOOGLE_DCHECK_NE(&from, this);
  const NoOverlap2DConstraintProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NoOverlap2DConstraintProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:operations_research.sat.NoOverlap2DConstraintProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:operations_research.sat.NoOverlap2DConstraintProto)
    MergeFrom(*source);
  }
}

void NoOverlap2DConstraintProto::MergeFrom(const NoOverlap2DConstraintProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:operations_research.sat.NoOverlap2DConstraintProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  x_intervals_.MergeFrom(from.x_intervals_);
  y_intervals_.MergeFrom(from.y_intervals_);
  if (from.boxes_with_null_area_can_overlap() != 0) {
    _internal_set_boxes_with_null_area_can_overlap(from._internal_boxes_with_null_area_can_overlap());
  }
}

void NoOverlap2DConstraintProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:operations_research.sat.NoOverlap2DConstraintProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NoOverlap2DConstraintProto::CopyFrom(const NoOverlap2DConstraintProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.sat.NoOverlap2DConstraintProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoOverlap2DConstraintProto::IsInitialized() const {
  return true;
}

void NoOverlap2DConstraintProto::InternalSwap(NoOverlap2DConstraintProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  x_intervals_.InternalSwap(&other->x_intervals_);
  y_intervals_.InternalSwap(&other->y_intervals_);
  swap(boxes_with_null_area_can_overlap_, other->boxes_with_null_area_can_overlap_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NoOverlap2DConstraintProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CumulativeConstraintProto::InitAsDefaultInstance() {
}
class CumulativeConstraintProto::_Internal {
 public:
};

CumulativeConstraintProto::CumulativeConstraintProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  intervals_(arena),
  demands_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:operations_research.sat.CumulativeConstraintProto)
}
CumulativeConstraintProto::CumulativeConstraintProto(const CumulativeConstraintProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      intervals_(from.intervals_),
      demands_(from.demands_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  capacity_ = from.capacity_;
  // @@protoc_insertion_point(copy_constructor:operations_research.sat.CumulativeConstraintProto)
}

void CumulativeConstraintProto::SharedCtor() {
  capacity_ = 0;
}

CumulativeConstraintProto::~CumulativeConstraintProto() {
  // @@protoc_insertion_point(destructor:operations_research.sat.CumulativeConstraintProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CumulativeConstraintProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CumulativeConstraintProto::ArenaDtor(void* object) {
  CumulativeConstraintProto* _this = reinterpret_cast< CumulativeConstraintProto* >(object);
  (void)_this;
}
void CumulativeConstraintProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CumulativeConstraintProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CumulativeConstraintProto& CumulativeConstraintProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CumulativeConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void CumulativeConstraintProto::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.sat.CumulativeConstraintProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  intervals_.Clear();
  demands_.Clear();
  capacity_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CumulativeConstraintProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 capacity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 intervals = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_intervals(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_intervals(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 demands = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_demands(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_demands(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CumulativeConstraintProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.sat.CumulativeConstraintProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 capacity = 1;
  if (this->capacity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_capacity(), target);
  }

  // repeated int32 intervals = 2;
  {
    int byte_size = _intervals_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_intervals(), byte_size, target);
    }
  }

  // repeated int32 demands = 3;
  {
    int byte_size = _demands_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_demands(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.sat.CumulativeConstraintProto)
  return target;
}

size_t CumulativeConstraintProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.sat.CumulativeConstraintProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 intervals = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->intervals_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _intervals_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 demands = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->demands_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _demands_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 capacity = 1;
  if (this->capacity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_capacity());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CumulativeConstraintProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:operations_research.sat.CumulativeConstraintProto)
  GOOGLE_DCHECK_NE(&from, this);
  const CumulativeConstraintProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CumulativeConstraintProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:operations_research.sat.CumulativeConstraintProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:operations_research.sat.CumulativeConstraintProto)
    MergeFrom(*source);
  }
}

void CumulativeConstraintProto::MergeFrom(const CumulativeConstraintProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:operations_research.sat.CumulativeConstraintProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  intervals_.MergeFrom(from.intervals_);
  demands_.MergeFrom(from.demands_);
  if (from.capacity() != 0) {
    _internal_set_capacity(from._internal_capacity());
  }
}

void CumulativeConstraintProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:operations_research.sat.CumulativeConstraintProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CumulativeConstraintProto::CopyFrom(const CumulativeConstraintProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.sat.CumulativeConstraintProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CumulativeConstraintProto::IsInitialized() const {
  return true;
}

void CumulativeConstraintProto::InternalSwap(CumulativeConstraintProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  intervals_.InternalSwap(&other->intervals_);
  demands_.InternalSwap(&other->demands_);
  swap(capacity_, other->capacity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CumulativeConstraintProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReservoirConstraintProto::InitAsDefaultInstance() {
}
class ReservoirConstraintProto::_Internal {
 public:
};

ReservoirConstraintProto::ReservoirConstraintProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  times_(arena),
  demands_(arena),
  actives_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:operations_research.sat.ReservoirConstraintProto)
}
ReservoirConstraintProto::ReservoirConstraintProto(const ReservoirConstraintProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      times_(from.times_),
      demands_(from.demands_),
      actives_(from.actives_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&min_level_, &from.min_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_level_) -
    reinterpret_cast<char*>(&min_level_)) + sizeof(max_level_));
  // @@protoc_insertion_point(copy_constructor:operations_research.sat.ReservoirConstraintProto)
}

void ReservoirConstraintProto::SharedCtor() {
  ::memset(&min_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_level_) -
      reinterpret_cast<char*>(&min_level_)) + sizeof(max_level_));
}

ReservoirConstraintProto::~ReservoirConstraintProto() {
  // @@protoc_insertion_point(destructor:operations_research.sat.ReservoirConstraintProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReservoirConstraintProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ReservoirConstraintProto::ArenaDtor(void* object) {
  ReservoirConstraintProto* _this = reinterpret_cast< ReservoirConstraintProto* >(object);
  (void)_this;
}
void ReservoirConstraintProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReservoirConstraintProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReservoirConstraintProto& ReservoirConstraintProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReservoirConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void ReservoirConstraintProto::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.sat.ReservoirConstraintProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  times_.Clear();
  demands_.Clear();
  actives_.Clear();
  ::memset(&min_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_level_) -
      reinterpret_cast<char*>(&min_level_)) + sizeof(max_level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReservoirConstraintProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 min_level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          min_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 max_level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          max_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 times = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_times(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_times(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 demands = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_demands(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_demands(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 actives = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_actives(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_actives(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReservoirConstraintProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.sat.ReservoirConstraintProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 min_level = 1;
  if (this->min_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_min_level(), target);
  }

  // int64 max_level = 2;
  if (this->max_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_max_level(), target);
  }

  // repeated int32 times = 3;
  {
    int byte_size = _times_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_times(), byte_size, target);
    }
  }

  // repeated int64 demands = 4;
  {
    int byte_size = _demands_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          4, _internal_demands(), byte_size, target);
    }
  }

  // repeated int32 actives = 5;
  {
    int byte_size = _actives_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_actives(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.sat.ReservoirConstraintProto)
  return target;
}

size_t ReservoirConstraintProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.sat.ReservoirConstraintProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 times = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->times_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _times_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 demands = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->demands_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _demands_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 actives = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->actives_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _actives_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int64 min_level = 1;
  if (this->min_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_min_level());
  }

  // int64 max_level = 2;
  if (this->max_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_max_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReservoirConstraintProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:operations_research.sat.ReservoirConstraintProto)
  GOOGLE_DCHECK_NE(&from, this);
  const ReservoirConstraintProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReservoirConstraintProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:operations_research.sat.ReservoirConstraintProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:operations_research.sat.ReservoirConstraintProto)
    MergeFrom(*source);
  }
}

void ReservoirConstraintProto::MergeFrom(const ReservoirConstraintProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:operations_research.sat.ReservoirConstraintProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  times_.MergeFrom(from.times_);
  demands_.MergeFrom(from.demands_);
  actives_.MergeFrom(from.actives_);
  if (from.min_level() != 0) {
    _internal_set_min_level(from._internal_min_level());
  }
  if (from.max_level() != 0) {
    _internal_set_max_level(from._internal_max_level());
  }
}

void ReservoirConstraintProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:operations_research.sat.ReservoirConstraintProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReservoirConstraintProto::CopyFrom(const ReservoirConstraintProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.sat.ReservoirConstraintProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReservoirConstraintProto::IsInitialized() const {
  return true;
}

void ReservoirConstraintProto::InternalSwap(ReservoirConstraintProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  times_.InternalSwap(&other->times_);
  demands_.InternalSwap(&other->demands_);
  actives_.InternalSwap(&other->actives_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReservoirConstraintProto, max_level_)
      + sizeof(ReservoirConstraintProto::max_level_)
      - PROTOBUF_FIELD_OFFSET(ReservoirConstraintProto, min_level_)>(
          reinterpret_cast<char*>(&min_level_),
          reinterpret_cast<char*>(&other->min_level_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReservoirConstraintProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CircuitConstraintProto::InitAsDefaultInstance() {
}
class CircuitConstraintProto::_Internal {
 public:
};

CircuitConstraintProto::CircuitConstraintProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tails_(arena),
  heads_(arena),
  literals_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:operations_research.sat.CircuitConstraintProto)
}
CircuitConstraintProto::CircuitConstraintProto(const CircuitConstraintProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tails_(from.tails_),
      heads_(from.heads_),
      literals_(from.literals_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:operations_research.sat.CircuitConstraintProto)
}

void CircuitConstraintProto::SharedCtor() {
}

CircuitConstraintProto::~CircuitConstraintProto() {
  // @@protoc_insertion_point(destructor:operations_research.sat.CircuitConstraintProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CircuitConstraintProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CircuitConstraintProto::ArenaDtor(void* object) {
  CircuitConstraintProto* _this = reinterpret_cast< CircuitConstraintProto* >(object);
  (void)_this;
}
void CircuitConstraintProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CircuitConstraintProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CircuitConstraintProto& CircuitConstraintProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CircuitConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void CircuitConstraintProto::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.sat.CircuitConstraintProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tails_.Clear();
  heads_.Clear();
  literals_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CircuitConstraintProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 tails = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_tails(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_tails(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 heads = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_heads(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_heads(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 literals = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_literals(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_literals(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CircuitConstraintProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.sat.CircuitConstraintProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 tails = 3;
  {
    int byte_size = _tails_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_tails(), byte_size, target);
    }
  }

  // repeated int32 heads = 4;
  {
    int byte_size = _heads_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_heads(), byte_size, target);
    }
  }

  // repeated int32 literals = 5;
  {
    int byte_size = _literals_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_literals(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.sat.CircuitConstraintProto)
  return target;
}

size_t CircuitConstraintProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.sat.CircuitConstraintProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 tails = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->tails_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _tails_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 heads = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->heads_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _heads_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 literals = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->literals_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _literals_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CircuitConstraintProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:operations_research.sat.CircuitConstraintProto)
  GOOGLE_DCHECK_NE(&from, this);
  const CircuitConstraintProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CircuitConstraintProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:operations_research.sat.CircuitConstraintProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:operations_research.sat.CircuitConstraintProto)
    MergeFrom(*source);
  }
}

void CircuitConstraintProto::MergeFrom(const CircuitConstraintProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:operations_research.sat.CircuitConstraintProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tails_.MergeFrom(from.tails_);
  heads_.MergeFrom(from.heads_);
  literals_.MergeFrom(from.literals_);
}

void CircuitConstraintProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:operations_research.sat.CircuitConstraintProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CircuitConstraintProto::CopyFrom(const CircuitConstraintProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.sat.CircuitConstraintProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CircuitConstraintProto::IsInitialized() const {
  return true;
}

void CircuitConstraintProto::InternalSwap(CircuitConstraintProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tails_.InternalSwap(&other->tails_);
  heads_.InternalSwap(&other->heads_);
  literals_.InternalSwap(&other->literals_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CircuitConstraintProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoutesConstraintProto::InitAsDefaultInstance() {
}
class RoutesConstraintProto::_Internal {
 public:
};

RoutesConstraintProto::RoutesConstraintProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tails_(arena),
  heads_(arena),
  literals_(arena),
  demands_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:operations_research.sat.RoutesConstraintProto)
}
RoutesConstraintProto::RoutesConstraintProto(const RoutesConstraintProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tails_(from.tails_),
      heads_(from.heads_),
      literals_(from.literals_),
      demands_(from.demands_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  capacity_ = from.capacity_;
  // @@protoc_insertion_point(copy_constructor:operations_research.sat.RoutesConstraintProto)
}

void RoutesConstraintProto::SharedCtor() {
  capacity_ = PROTOBUF_LONGLONG(0);
}

RoutesConstraintProto::~RoutesConstraintProto() {
  // @@protoc_insertion_point(destructor:operations_research.sat.RoutesConstraintProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RoutesConstraintProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RoutesConstraintProto::ArenaDtor(void* object) {
  RoutesConstraintProto* _this = reinterpret_cast< RoutesConstraintProto* >(object);
  (void)_this;
}
void RoutesConstraintProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoutesConstraintProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoutesConstraintProto& RoutesConstraintProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoutesConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void RoutesConstraintProto::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.sat.RoutesConstraintProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tails_.Clear();
  heads_.Clear();
  literals_.Clear();
  demands_.Clear();
  capacity_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoutesConstraintProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 tails = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_tails(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_tails(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 heads = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_heads(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_heads(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 literals = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_literals(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_literals(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 demands = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_demands(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_demands(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 capacity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoutesConstraintProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.sat.RoutesConstraintProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 tails = 1;
  {
    int byte_size = _tails_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_tails(), byte_size, target);
    }
  }

  // repeated int32 heads = 2;
  {
    int byte_size = _heads_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_heads(), byte_size, target);
    }
  }

  // repeated int32 literals = 3;
  {
    int byte_size = _literals_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_literals(), byte_size, target);
    }
  }

  // repeated int32 demands = 4;
  {
    int byte_size = _demands_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_demands(), byte_size, target);
    }
  }

  // int64 capacity = 5;
  if (this->capacity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_capacity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.sat.RoutesConstraintProto)
  return target;
}

size_t RoutesConstraintProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.sat.RoutesConstraintProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 tails = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->tails_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _tails_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 heads = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->heads_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _heads_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 literals = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->literals_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _literals_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 demands = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->demands_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _demands_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int64 capacity = 5;
  if (this->capacity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_capacity());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoutesConstraintProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:operations_research.sat.RoutesConstraintProto)
  GOOGLE_DCHECK_NE(&from, this);
  const RoutesConstraintProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoutesConstraintProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:operations_research.sat.RoutesConstraintProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:operations_research.sat.RoutesConstraintProto)
    MergeFrom(*source);
  }
}

void RoutesConstraintProto::MergeFrom(const RoutesConstraintProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:operations_research.sat.RoutesConstraintProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tails_.MergeFrom(from.tails_);
  heads_.MergeFrom(from.heads_);
  literals_.MergeFrom(from.literals_);
  demands_.MergeFrom(from.demands_);
  if (from.capacity() != 0) {
    _internal_set_capacity(from._internal_capacity());
  }
}

void RoutesConstraintProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:operations_research.sat.RoutesConstraintProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoutesConstraintProto::CopyFrom(const RoutesConstraintProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.sat.RoutesConstraintProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutesConstraintProto::IsInitialized() const {
  return true;
}

void RoutesConstraintProto::InternalSwap(RoutesConstraintProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tails_.InternalSwap(&other->tails_);
  heads_.InternalSwap(&other->heads_);
  literals_.InternalSwap(&other->literals_);
  demands_.InternalSwap(&other->demands_);
  swap(capacity_, other->capacity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoutesConstraintProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CircuitCoveringConstraintProto::InitAsDefaultInstance() {
}
class CircuitCoveringConstraintProto::_Internal {
 public:
};

CircuitCoveringConstraintProto::CircuitCoveringConstraintProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  nexts_(arena),
  distinguished_nodes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:operations_research.sat.CircuitCoveringConstraintProto)
}
CircuitCoveringConstraintProto::CircuitCoveringConstraintProto(const CircuitCoveringConstraintProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      nexts_(from.nexts_),
      distinguished_nodes_(from.distinguished_nodes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:operations_research.sat.CircuitCoveringConstraintProto)
}

void CircuitCoveringConstraintProto::SharedCtor() {
}

CircuitCoveringConstraintProto::~CircuitCoveringConstraintProto() {
  // @@protoc_insertion_point(destructor:operations_research.sat.CircuitCoveringConstraintProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CircuitCoveringConstraintProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CircuitCoveringConstraintProto::ArenaDtor(void* object) {
  CircuitCoveringConstraintProto* _this = reinterpret_cast< CircuitCoveringConstraintProto* >(object);
  (void)_this;
}
void CircuitCoveringConstraintProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CircuitCoveringConstraintProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CircuitCoveringConstraintProto& CircuitCoveringConstraintProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CircuitCoveringConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void CircuitCoveringConstraintProto::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.sat.CircuitCoveringConstraintProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nexts_.Clear();
  distinguished_nodes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CircuitCoveringConstraintProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 nexts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_nexts(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_nexts(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 distinguished_nodes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_distinguished_nodes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_distinguished_nodes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CircuitCoveringConstraintProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.sat.CircuitCoveringConstraintProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 nexts = 1;
  {
    int byte_size = _nexts_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_nexts(), byte_size, target);
    }
  }

  // repeated int64 distinguished_nodes = 2;
  {
    int byte_size = _distinguished_nodes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_distinguished_nodes(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.sat.CircuitCoveringConstraintProto)
  return target;
}

size_t CircuitCoveringConstraintProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.sat.CircuitCoveringConstraintProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 nexts = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->nexts_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _nexts_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 distinguished_nodes = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->distinguished_nodes_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _distinguished_nodes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CircuitCoveringConstraintProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:operations_research.sat.CircuitCoveringConstraintProto)
  GOOGLE_DCHECK_NE(&from, this);
  const CircuitCoveringConstraintProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CircuitCoveringConstraintProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:operations_research.sat.CircuitCoveringConstraintProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:operations_research.sat.CircuitCoveringConstraintProto)
    MergeFrom(*source);
  }
}

void CircuitCoveringConstraintProto::MergeFrom(const CircuitCoveringConstraintProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:operations_research.sat.CircuitCoveringConstraintProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nexts_.MergeFrom(from.nexts_);
  distinguished_nodes_.MergeFrom(from.distinguished_nodes_);
}

void CircuitCoveringConstraintProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:operations_research.sat.CircuitCoveringConstraintProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CircuitCoveringConstraintProto::CopyFrom(const CircuitCoveringConstraintProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.sat.CircuitCoveringConstraintProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CircuitCoveringConstraintProto::IsInitialized() const {
  return true;
}

void CircuitCoveringConstraintProto::InternalSwap(CircuitCoveringConstraintProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  nexts_.InternalSwap(&other->nexts_);
  distinguished_nodes_.InternalSwap(&other->distinguished_nodes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CircuitCoveringConstraintProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TableConstraintProto::InitAsDefaultInstance() {
}
class TableConstraintProto::_Internal {
 public:
};

TableConstraintProto::TableConstraintProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  vars_(arena),
  values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:operations_research.sat.TableConstraintProto)
}
TableConstraintProto::TableConstraintProto(const TableConstraintProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vars_(from.vars_),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  negated_ = from.negated_;
  // @@protoc_insertion_point(copy_constructor:operations_research.sat.TableConstraintProto)
}

void TableConstraintProto::SharedCtor() {
  negated_ = false;
}

TableConstraintProto::~TableConstraintProto() {
  // @@protoc_insertion_point(destructor:operations_research.sat.TableConstraintProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TableConstraintProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TableConstraintProto::ArenaDtor(void* object) {
  TableConstraintProto* _this = reinterpret_cast< TableConstraintProto* >(object);
  (void)_this;
}
void TableConstraintProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TableConstraintProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TableConstraintProto& TableConstraintProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TableConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void TableConstraintProto::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.sat.TableConstraintProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vars_.Clear();
  values_.Clear();
  negated_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableConstraintProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 vars = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_vars(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_vars(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool negated = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          negated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TableConstraintProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.sat.TableConstraintProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 vars = 1;
  {
    int byte_size = _vars_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_vars(), byte_size, target);
    }
  }

  // repeated int64 values = 2;
  {
    int byte_size = _values_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_values(), byte_size, target);
    }
  }

  // bool negated = 3;
  if (this->negated() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_negated(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.sat.TableConstraintProto)
  return target;
}

size_t TableConstraintProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.sat.TableConstraintProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 vars = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->vars_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _vars_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 values = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->values_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bool negated = 3;
  if (this->negated() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TableConstraintProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:operations_research.sat.TableConstraintProto)
  GOOGLE_DCHECK_NE(&from, this);
  const TableConstraintProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TableConstraintProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:operations_research.sat.TableConstraintProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:operations_research.sat.TableConstraintProto)
    MergeFrom(*source);
  }
}

void TableConstraintProto::MergeFrom(const TableConstraintProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:operations_research.sat.TableConstraintProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vars_.MergeFrom(from.vars_);
  values_.MergeFrom(from.values_);
  if (from.negated() != 0) {
    _internal_set_negated(from._internal_negated());
  }
}

void TableConstraintProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:operations_research.sat.TableConstraintProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableConstraintProto::CopyFrom(const TableConstraintProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.sat.TableConstraintProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableConstraintProto::IsInitialized() const {
  return true;
}

void TableConstraintProto::InternalSwap(TableConstraintProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vars_.InternalSwap(&other->vars_);
  values_.InternalSwap(&other->values_);
  swap(negated_, other->negated_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TableConstraintProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InverseConstraintProto::InitAsDefaultInstance() {
}
class InverseConstraintProto::_Internal {
 public:
};

InverseConstraintProto::InverseConstraintProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  f_direct_(arena),
  f_inverse_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:operations_research.sat.InverseConstraintProto)
}
InverseConstraintProto::InverseConstraintProto(const InverseConstraintProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      f_direct_(from.f_direct_),
      f_inverse_(from.f_inverse_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:operations_research.sat.InverseConstraintProto)
}

void InverseConstraintProto::SharedCtor() {
}

InverseConstraintProto::~InverseConstraintProto() {
  // @@protoc_insertion_point(destructor:operations_research.sat.InverseConstraintProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InverseConstraintProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void InverseConstraintProto::ArenaDtor(void* object) {
  InverseConstraintProto* _this = reinterpret_cast< InverseConstraintProto* >(object);
  (void)_this;
}
void InverseConstraintProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InverseConstraintProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InverseConstraintProto& InverseConstraintProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InverseConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void InverseConstraintProto::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.sat.InverseConstraintProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  f_direct_.Clear();
  f_inverse_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InverseConstraintProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 f_direct = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_f_direct(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_f_direct(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 f_inverse = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_f_inverse(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_f_inverse(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InverseConstraintProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.sat.InverseConstraintProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 f_direct = 1;
  {
    int byte_size = _f_direct_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_f_direct(), byte_size, target);
    }
  }

  // repeated int32 f_inverse = 2;
  {
    int byte_size = _f_inverse_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_f_inverse(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.sat.InverseConstraintProto)
  return target;
}

size_t InverseConstraintProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.sat.InverseConstraintProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 f_direct = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->f_direct_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _f_direct_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 f_inverse = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->f_inverse_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _f_inverse_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InverseConstraintProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:operations_research.sat.InverseConstraintProto)
  GOOGLE_DCHECK_NE(&from, this);
  const InverseConstraintProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InverseConstraintProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:operations_research.sat.InverseConstraintProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:operations_research.sat.InverseConstraintProto)
    MergeFrom(*source);
  }
}

void InverseConstraintProto::MergeFrom(const InverseConstraintProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:operations_research.sat.InverseConstraintProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  f_direct_.MergeFrom(from.f_direct_);
  f_inverse_.MergeFrom(from.f_inverse_);
}

void InverseConstraintProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:operations_research.sat.InverseConstraintProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InverseConstraintProto::CopyFrom(const InverseConstraintProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.sat.InverseConstraintProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InverseConstraintProto::IsInitialized() const {
  return true;
}

void InverseConstraintProto::InternalSwap(InverseConstraintProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  f_direct_.InternalSwap(&other->f_direct_);
  f_inverse_.InternalSwap(&other->f_inverse_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InverseConstraintProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AutomatonConstraintProto::InitAsDefaultInstance() {
}
class AutomatonConstraintProto::_Internal {
 public:
};

AutomatonConstraintProto::AutomatonConstraintProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  final_states_(arena),
  transition_tail_(arena),
  transition_head_(arena),
  transition_label_(arena),
  vars_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:operations_research.sat.AutomatonConstraintProto)
}
AutomatonConstraintProto::AutomatonConstraintProto(const AutomatonConstraintProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      final_states_(from.final_states_),
      transition_tail_(from.transition_tail_),
      transition_head_(from.transition_head_),
      transition_label_(from.transition_label_),
      vars_(from.vars_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  starting_state_ = from.starting_state_;
  // @@protoc_insertion_point(copy_constructor:operations_research.sat.AutomatonConstraintProto)
}

void AutomatonConstraintProto::SharedCtor() {
  starting_state_ = PROTOBUF_LONGLONG(0);
}

AutomatonConstraintProto::~AutomatonConstraintProto() {
  // @@protoc_insertion_point(destructor:operations_research.sat.AutomatonConstraintProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AutomatonConstraintProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AutomatonConstraintProto::ArenaDtor(void* object) {
  AutomatonConstraintProto* _this = reinterpret_cast< AutomatonConstraintProto* >(object);
  (void)_this;
}
void AutomatonConstraintProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AutomatonConstraintProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AutomatonConstraintProto& AutomatonConstraintProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AutomatonConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void AutomatonConstraintProto::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.sat.AutomatonConstraintProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  final_states_.Clear();
  transition_tail_.Clear();
  transition_head_.Clear();
  transition_label_.Clear();
  vars_.Clear();
  starting_state_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AutomatonConstraintProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 starting_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          starting_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 final_states = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_final_states(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_final_states(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 transition_tail = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_transition_tail(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_transition_tail(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 transition_head = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_transition_head(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_transition_head(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 transition_label = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_transition_label(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_transition_label(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 vars = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_vars(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          _internal_add_vars(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AutomatonConstraintProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.sat.AutomatonConstraintProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 starting_state = 2;
  if (this->starting_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_starting_state(), target);
  }

  // repeated int64 final_states = 3;
  {
    int byte_size = _final_states_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_final_states(), byte_size, target);
    }
  }

  // repeated int64 transition_tail = 4;
  {
    int byte_size = _transition_tail_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          4, _internal_transition_tail(), byte_size, target);
    }
  }

  // repeated int64 transition_head = 5;
  {
    int byte_size = _transition_head_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          5, _internal_transition_head(), byte_size, target);
    }
  }

  // repeated int64 transition_label = 6;
  {
    int byte_size = _transition_label_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          6, _internal_transition_label(), byte_size, target);
    }
  }

  // repeated int32 vars = 7;
  {
    int byte_size = _vars_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          7, _internal_vars(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.sat.AutomatonConstraintProto)
  return target;
}

size_t AutomatonConstraintProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.sat.AutomatonConstraintProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 final_states = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->final_states_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _final_states_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 transition_tail = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->transition_tail_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _transition_tail_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 transition_head = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->transition_head_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _transition_head_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 transition_label = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->transition_label_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _transition_label_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 vars = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->vars_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _vars_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int64 starting_state = 2;
  if (this->starting_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_starting_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutomatonConstraintProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:operations_research.sat.AutomatonConstraintProto)
  GOOGLE_DCHECK_NE(&from, this);
  const AutomatonConstraintProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AutomatonConstraintProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:operations_research.sat.AutomatonConstraintProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:operations_research.sat.AutomatonConstraintProto)
    MergeFrom(*source);
  }
}

void AutomatonConstraintProto::MergeFrom(const AutomatonConstraintProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:operations_research.sat.AutomatonConstraintProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  final_states_.MergeFrom(from.final_states_);
  transition_tail_.MergeFrom(from.transition_tail_);
  transition_head_.MergeFrom(from.transition_head_);
  transition_label_.MergeFrom(from.transition_label_);
  vars_.MergeFrom(from.vars_);
  if (from.starting_state() != 0) {
    _internal_set_starting_state(from._internal_starting_state());
  }
}

void AutomatonConstraintProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:operations_research.sat.AutomatonConstraintProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutomatonConstraintProto::CopyFrom(const AutomatonConstraintProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.sat.AutomatonConstraintProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutomatonConstraintProto::IsInitialized() const {
  return true;
}

void AutomatonConstraintProto::InternalSwap(AutomatonConstraintProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  final_states_.InternalSwap(&other->final_states_);
  transition_tail_.InternalSwap(&other->transition_tail_);
  transition_head_.InternalSwap(&other->transition_head_);
  transition_label_.InternalSwap(&other->transition_label_);
  vars_.InternalSwap(&other->vars_);
  swap(starting_state_, other->starting_state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AutomatonConstraintProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConstraintProto::InitAsDefaultInstance() {
  ::operations_research::sat::_ConstraintProto_default_instance_.bool_or_ = const_cast< ::operations_research::sat::BoolArgumentProto*>(
      ::operations_research::sat::BoolArgumentProto::internal_default_instance());
  ::operations_research::sat::_ConstraintProto_default_instance_.bool_and_ = const_cast< ::operations_research::sat::BoolArgumentProto*>(
      ::operations_research::sat::BoolArgumentProto::internal_default_instance());
  ::operations_research::sat::_ConstraintProto_default_instance_.at_most_one_ = const_cast< ::operations_research::sat::BoolArgumentProto*>(
      ::operations_research::sat::BoolArgumentProto::internal_default_instance());
  ::operations_research::sat::_ConstraintProto_default_instance_.bool_xor_ = const_cast< ::operations_research::sat::BoolArgumentProto*>(
      ::operations_research::sat::BoolArgumentProto::internal_default_instance());
  ::operations_research::sat::_ConstraintProto_default_instance_.int_div_ = const_cast< ::operations_research::sat::IntegerArgumentProto*>(
      ::operations_research::sat::IntegerArgumentProto::internal_default_instance());
  ::operations_research::sat::_ConstraintProto_default_instance_.int_mod_ = const_cast< ::operations_research::sat::IntegerArgumentProto*>(
      ::operations_research::sat::IntegerArgumentProto::internal_default_instance());
  ::operations_research::sat::_ConstraintProto_default_instance_.int_max_ = const_cast< ::operations_research::sat::IntegerArgumentProto*>(
      ::operations_research::sat::IntegerArgumentProto::internal_default_instance());
  ::operations_research::sat::_ConstraintProto_default_instance_.lin_max_ = const_cast< ::operations_research::sat::LinearArgumentProto*>(
      ::operations_research::sat::LinearArgumentProto::internal_default_instance());
  ::operations_research::sat::_ConstraintProto_default_instance_.int_min_ = const_cast< ::operations_research::sat::IntegerArgumentProto*>(
      ::operations_research::sat::IntegerArgumentProto::internal_default_instance());
  ::operations_research::sat::_ConstraintProto_default_instance_.lin_min_ = const_cast< ::operations_research::sat::LinearArgumentProto*>(
      ::operations_research::sat::LinearArgumentProto::internal_default_instance());
  ::operations_research::sat::_ConstraintProto_default_instance_.int_prod_ = const_cast< ::operations_research::sat::IntegerArgumentProto*>(
      ::operations_research::sat::IntegerArgumentProto::internal_default_instance());
  ::operations_research::sat::_ConstraintProto_default_instance_.linear_ = const_cast< ::operations_research::sat::LinearConstraintProto*>(
      ::operations_research::sat::LinearConstraintProto::internal_default_instance());
  ::operations_research::sat::_ConstraintProto_default_instance_.all_diff_ = const_cast< ::operations_research::sat::AllDifferentConstraintProto*>(
      ::operations_research::sat::AllDifferentConstraintProto::internal_default_instance());
  ::operations_research::sat::_ConstraintProto_default_instance_.element_ = const_cast< ::operations_research::sat::ElementConstraintProto*>(
      ::operations_research::sat::ElementConstraintProto::internal_default_instance());
  ::operations_research::sat::_ConstraintProto_default_instance_.circuit_ = const_cast< ::operations_research::sat::CircuitConstraintProto*>(
      ::operations_research::sat::CircuitConstraintProto::internal_default_instance());
  ::operations_research::sat::_ConstraintProto_default_instance_.routes_ = const_cast< ::operations_research::sat::RoutesConstraintProto*>(
      ::operations_research::sat::RoutesConstraintProto::internal_default_instance());
  ::operations_research::sat::_ConstraintProto_default_instance_.circuit_covering_ = const_cast< ::operations_research::sat::CircuitCoveringConstraintProto*>(
      ::operations_research::sat::CircuitCoveringConstraintProto::internal_default_instance());
  ::operations_research::sat::_ConstraintProto_default_instance_.table_ = const_cast< ::operations_research::sat::TableConstraintProto*>(
      ::operations_research::sat::TableConstraintProto::internal_default_instance());
  ::operations_research::sat::_ConstraintProto_default_instance_.automaton_ = const_cast< ::operations_research::sat::AutomatonConstraintProto*>(
      ::operations_research::sat::AutomatonConstraintProto::internal_default_instance());
  ::operations_research::sat::_ConstraintProto_default_instance_.inverse_ = const_cast< ::operations_research::sat::InverseConstraintProto*>(
      ::operations_research::sat::InverseConstraintProto::internal_default_instance());
  ::operations_research::sat::_ConstraintProto_default_instance_.reservoir_ = const_cast< ::operations_research::sat::ReservoirConstraintProto*>(
      ::operations_research::sat::ReservoirConstraintProto::internal_default_instance());
  ::operations_research::sat::_ConstraintProto_default_instance_.interval_ = const_cast< ::operations_research::sat::IntervalConstraintProto*>(
      ::operations_research::sat::IntervalConstraintProto::internal_default_instance());
  ::operations_research::sat::_ConstraintProto_default_instance_.no_overlap_ = const_cast< ::operations_research::sat::NoOverlapConstraintProto*>(
      ::operations_research::sat::NoOverlapConstraintProto::internal_default_instance());
  ::operations_research::sat::_ConstraintProto_default_instance_.no_overlap_2d_ = const_cast< ::operations_research::sat::NoOverlap2DConstraintProto*>(
      ::operations_research::sat::NoOverlap2DConstraintProto::internal_default_instance());
  ::operations_research::sat::_ConstraintProto_default_instance_.cumulative_ = const_cast< ::operations_research::sat::CumulativeConstraintProto*>(
      ::operations_research::sat::CumulativeConstraintProto::internal_default_instance());
}
class ConstraintProto::_Internal {
 public:
  static const ::operations_research::sat::BoolArgumentProto& bool_or(const ConstraintProto* msg);
  static const ::operations_research::sat::BoolArgumentProto& bool_and(const ConstraintProto* msg);
  static const ::operations_research::sat::BoolArgumentProto& at_most_one(const ConstraintProto* msg);
  static const ::operations_research::sat::BoolArgumentProto& bool_xor(const ConstraintProto* msg);
  static const ::operations_research::sat::IntegerArgumentProto& int_div(const ConstraintProto* msg);
  static const ::operations_research::sat::IntegerArgumentProto& int_mod(const ConstraintProto* msg);
  static const ::operations_research::sat::IntegerArgumentProto& int_max(const ConstraintProto* msg);
  static const ::operations_research::sat::LinearArgumentProto& lin_max(const ConstraintProto* msg);
  static const ::operations_research::sat::IntegerArgumentProto& int_min(const ConstraintProto* msg);
  static const ::operations_research::sat::LinearArgumentProto& lin_min(const ConstraintProto* msg);
  static const ::operations_research::sat::IntegerArgumentProto& int_prod(const ConstraintProto* msg);
  static const ::operations_research::sat::LinearConstraintProto& linear(const ConstraintProto* msg);
  static const ::operations_research::sat::AllDifferentConstraintProto& all_diff(const ConstraintProto* msg);
  static const ::operations_research::sat::ElementConstraintProto& element(const ConstraintProto* msg);
  static const ::operations_research::sat::CircuitConstraintProto& circuit(const ConstraintProto* msg);
  static const ::operations_research::sat::RoutesConstraintProto& routes(const ConstraintProto* msg);
  static const ::operations_research::sat::CircuitCoveringConstraintProto& circuit_covering(const ConstraintProto* msg);
  static const ::operations_research::sat::TableConstraintProto& table(const ConstraintProto* msg);
  static const ::operations_research::sat::AutomatonConstraintProto& automaton(const ConstraintProto* msg);
  static const ::operations_research::sat::InverseConstraintProto& inverse(const ConstraintProto* msg);
  static const ::operations_research::sat::ReservoirConstraintProto& reservoir(const ConstraintProto* msg);
  static const ::operations_research::sat::IntervalConstraintProto& interval(const ConstraintProto* msg);
  static const ::operations_research::sat::NoOverlapConstraintProto& no_overlap(const ConstraintProto* msg);
  static const ::operations_research::sat::NoOverlap2DConstraintProto& no_overlap_2d(const ConstraintProto* msg);
  static const ::operations_research::sat::CumulativeConstraintProto& cumulative(const ConstraintProto* msg);
};

const ::operations_research::sat::BoolArgumentProto&
ConstraintProto::_Internal::bool_or(const ConstraintProto* msg) {
  return *msg->constraint_.bool_or_;
}
const ::operations_research::sat::BoolArgumentProto&
ConstraintProto::_Internal::bool_and(const ConstraintProto* msg) {
  return *msg->constraint_.bool_and_;
}
const ::operations_research::sat::BoolArgumentProto&
ConstraintProto::_Internal::at_most_one(const ConstraintProto* msg) {
  return *msg->constraint_.at_most_one_;
}
const ::operations_research::sat::BoolArgumentProto&
ConstraintProto::_Internal::bool_xor(const ConstraintProto* msg) {
  return *msg->constraint_.bool_xor_;
}
const ::operations_research::sat::IntegerArgumentProto&
ConstraintProto::_Internal::int_div(const ConstraintProto* msg) {
  return *msg->constraint_.int_div_;
}
const ::operations_research::sat::IntegerArgumentProto&
ConstraintProto::_Internal::int_mod(const ConstraintProto* msg) {
  return *msg->constraint_.int_mod_;
}
const ::operations_research::sat::IntegerArgumentProto&
ConstraintProto::_Internal::int_max(const ConstraintProto* msg) {
  return *msg->constraint_.int_max_;
}
const ::operations_research::sat::LinearArgumentProto&
ConstraintProto::_Internal::lin_max(const ConstraintProto* msg) {
  return *msg->constraint_.lin_max_;
}
const ::operations_research::sat::IntegerArgumentProto&
ConstraintProto::_Internal::int_min(const ConstraintProto* msg) {
  return *msg->constraint_.int_min_;
}
const ::operations_research::sat::LinearArgumentProto&
ConstraintProto::_Internal::lin_min(const ConstraintProto* msg) {
  return *msg->constraint_.lin_min_;
}
const ::operations_research::sat::IntegerArgumentProto&
ConstraintProto::_Internal::int_prod(const ConstraintProto* msg) {
  return *msg->constraint_.int_prod_;
}
const ::operations_research::sat::LinearConstraintProto&
ConstraintProto::_Internal::linear(const ConstraintProto* msg) {
  return *msg->constraint_.linear_;
}
const ::operations_research::sat::AllDifferentConstraintProto&
ConstraintProto::_Internal::all_diff(const ConstraintProto* msg) {
  return *msg->constraint_.all_diff_;
}
const ::operations_research::sat::ElementConstraintProto&
ConstraintProto::_Internal::element(const ConstraintProto* msg) {
  return *msg->constraint_.element_;
}
const ::operations_research::sat::CircuitConstraintProto&
ConstraintProto::_Internal::circuit(const ConstraintProto* msg) {
  return *msg->constraint_.circuit_;
}
const ::operations_research::sat::RoutesConstraintProto&
ConstraintProto::_Internal::routes(const ConstraintProto* msg) {
  return *msg->constraint_.routes_;
}
const ::operations_research::sat::CircuitCoveringConstraintProto&
ConstraintProto::_Internal::circuit_covering(const ConstraintProto* msg) {
  return *msg->constraint_.circuit_covering_;
}
const ::operations_research::sat::TableConstraintProto&
ConstraintProto::_Internal::table(const ConstraintProto* msg) {
  return *msg->constraint_.table_;
}
const ::operations_research::sat::AutomatonConstraintProto&
ConstraintProto::_Internal::automaton(const ConstraintProto* msg) {
  return *msg->constraint_.automaton_;
}
const ::operations_research::sat::InverseConstraintProto&
ConstraintProto::_Internal::inverse(const ConstraintProto* msg) {
  return *msg->constraint_.inverse_;
}
const ::operations_research::sat::ReservoirConstraintProto&
ConstraintProto::_Internal::reservoir(const ConstraintProto* msg) {
  return *msg->constraint_.reservoir_;
}
const ::operations_research::sat::IntervalConstraintProto&
ConstraintProto::_Internal::interval(const ConstraintProto* msg) {
  return *msg->constraint_.interval_;
}
const ::operations_research::sat::NoOverlapConstraintProto&
ConstraintProto::_Internal::no_overlap(const ConstraintProto* msg) {
  return *msg->constraint_.no_overlap_;
}
const ::operations_research::sat::NoOverlap2DConstraintProto&
ConstraintProto::_Internal::no_overlap_2d(const ConstraintProto* msg) {
  return *msg->constraint_.no_overlap_2d_;
}
const ::operations_research::sat::CumulativeConstraintProto&
ConstraintProto::_Internal::cumulative(const ConstraintProto* msg) {
  return *msg->constraint_.cumulative_;
}
void ConstraintProto::set_allocated_bool_or(::operations_research::sat::BoolArgumentProto* bool_or) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_constraint();
  if (bool_or) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bool_or);
    if (message_arena != submessage_arena) {
      bool_or = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bool_or, submessage_arena);
    }
    set_has_bool_or();
    constraint_.bool_or_ = bool_or;
  }
  // @@protoc_insertion_point(field_set_allocated:operations_research.sat.ConstraintProto.bool_or)
}
void ConstraintProto::set_allocated_bool_and(::operations_research::sat::BoolArgumentProto* bool_and) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_constraint();
  if (bool_and) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bool_and);
    if (message_arena != submessage_arena) {
      bool_and = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bool_and, submessage_arena);
    }
    set_has_bool_and();
    constraint_.bool_and_ = bool_and;
  }
  // @@protoc_insertion_point(field_set_allocated:operations_research.sat.ConstraintProto.bool_and)
}
void ConstraintProto::set_allocated_at_most_one(::operations_research::sat::BoolArgumentProto* at_most_one) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_constraint();
  if (at_most_one) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(at_most_one);
    if (message_arena != submessage_arena) {
      at_most_one = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, at_most_one, submessage_arena);
    }
    set_has_at_most_one();
    constraint_.at_most_one_ = at_most_one;
  }
  // @@protoc_insertion_point(field_set_allocated:operations_research.sat.ConstraintProto.at_most_one)
}
void ConstraintProto::set_allocated_bool_xor(::operations_research::sat::BoolArgumentProto* bool_xor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_constraint();
  if (bool_xor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bool_xor);
    if (message_arena != submessage_arena) {
      bool_xor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bool_xor, submessage_arena);
    }
    set_has_bool_xor();
    constraint_.bool_xor_ = bool_xor;
  }
  // @@protoc_insertion_point(field_set_allocated:operations_research.sat.ConstraintProto.bool_xor)
}
void ConstraintProto::set_allocated_int_div(::operations_research::sat::IntegerArgumentProto* int_div) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_constraint();
  if (int_div) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(int_div);
    if (message_arena != submessage_arena) {
      int_div = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, int_div, submessage_arena);
    }
    set_has_int_div();
    constraint_.int_div_ = int_div;
  }
  // @@protoc_insertion_point(field_set_allocated:operations_research.sat.ConstraintProto.int_div)
}
void ConstraintProto::set_allocated_int_mod(::operations_research::sat::IntegerArgumentProto* int_mod) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_constraint();
  if (int_mod) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(int_mod);
    if (message_arena != submessage_arena) {
      int_mod = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, int_mod, submessage_arena);
    }
    set_has_int_mod();
    constraint_.int_mod_ = int_mod;
  }
  // @@protoc_insertion_point(field_set_allocated:operations_research.sat.ConstraintProto.int_mod)
}
void ConstraintProto::set_allocated_int_max(::operations_research::sat::IntegerArgumentProto* int_max) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_constraint();
  if (int_max) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(int_max);
    if (message_arena != submessage_arena) {
      int_max = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, int_max, submessage_arena);
    }
    set_has_int_max();
    constraint_.int_max_ = int_max;
  }
  // @@protoc_insertion_point(field_set_allocated:operations_research.sat.ConstraintProto.int_max)
}
void ConstraintProto::set_allocated_lin_max(::operations_research::sat::LinearArgumentProto* lin_max) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_constraint();
  if (lin_max) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lin_max);
    if (message_arena != submessage_arena) {
      lin_max = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lin_max, submessage_arena);
    }
    set_has_lin_max();
    constraint_.lin_max_ = lin_max;
  }
  // @@protoc_insertion_point(field_set_allocated:operations_research.sat.ConstraintProto.lin_max)
}
void ConstraintProto::set_allocated_int_min(::operations_research::sat::IntegerArgumentProto* int_min) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_constraint();
  if (int_min) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(int_min);
    if (message_arena != submessage_arena) {
      int_min = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, int_min, submessage_arena);
    }
    set_has_int_min();
    constraint_.int_min_ = int_min;
  }
  // @@protoc_insertion_point(field_set_allocated:operations_research.sat.ConstraintProto.int_min)
}
void ConstraintProto::set_allocated_lin_min(::operations_research::sat::LinearArgumentProto* lin_min) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_constraint();
  if (lin_min) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lin_min);
    if (message_arena != submessage_arena) {
      lin_min = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lin_min, submessage_arena);
    }
    set_has_lin_min();
    constraint_.lin_min_ = lin_min;
  }
  // @@protoc_insertion_point(field_set_allocated:operations_research.sat.ConstraintProto.lin_min)
}
void ConstraintProto::set_allocated_int_prod(::operations_research::sat::IntegerArgumentProto* int_prod) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_constraint();
  if (int_prod) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(int_prod);
    if (message_arena != submessage_arena) {
      int_prod = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, int_prod, submessage_arena);
    }
    set_has_int_prod();
    constraint_.int_prod_ = int_prod;
  }
  // @@protoc_insertion_point(field_set_allocated:operations_research.sat.ConstraintProto.int_prod)
}
void ConstraintProto::set_allocated_linear(::operations_research::sat::LinearConstraintProto* linear) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_constraint();
  if (linear) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(linear);
    if (message_arena != submessage_arena) {
      linear = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linear, submessage_arena);
    }
    set_has_linear();
    constraint_.linear_ = linear;
  }
  // @@protoc_insertion_point(field_set_allocated:operations_research.sat.ConstraintProto.linear)
}
void ConstraintProto::set_allocated_all_diff(::operations_research::sat::AllDifferentConstraintProto* all_diff) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_constraint();
  if (all_diff) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(all_diff);
    if (message_arena != submessage_arena) {
      all_diff = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, all_diff, submessage_arena);
    }
    set_has_all_diff();
    constraint_.all_diff_ = all_diff;
  }
  // @@protoc_insertion_point(field_set_allocated:operations_research.sat.ConstraintProto.all_diff)
}
void ConstraintProto::set_allocated_element(::operations_research::sat::ElementConstraintProto* element) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_constraint();
  if (element) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(element);
    if (message_arena != submessage_arena) {
      element = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, element, submessage_arena);
    }
    set_has_element();
    constraint_.element_ = element;
  }
  // @@protoc_insertion_point(field_set_allocated:operations_research.sat.ConstraintProto.element)
}
void ConstraintProto::set_allocated_circuit(::operations_research::sat::CircuitConstraintProto* circuit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_constraint();
  if (circuit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(circuit);
    if (message_arena != submessage_arena) {
      circuit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, circuit, submessage_arena);
    }
    set_has_circuit();
    constraint_.circuit_ = circuit;
  }
  // @@protoc_insertion_point(field_set_allocated:operations_research.sat.ConstraintProto.circuit)
}
void ConstraintProto::set_allocated_routes(::operations_research::sat::RoutesConstraintProto* routes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_constraint();
  if (routes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(routes);
    if (message_arena != submessage_arena) {
      routes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, routes, submessage_arena);
    }
    set_has_routes();
    constraint_.routes_ = routes;
  }
  // @@protoc_insertion_point(field_set_allocated:operations_research.sat.ConstraintProto.routes)
}
void ConstraintProto::set_allocated_circuit_covering(::operations_research::sat::CircuitCoveringConstraintProto* circuit_covering) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_constraint();
  if (circuit_covering) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(circuit_covering);
    if (message_arena != submessage_arena) {
      circuit_covering = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, circuit_covering, submessage_arena);
    }
    set_has_circuit_covering();
    constraint_.circuit_covering_ = circuit_covering;
  }
  // @@protoc_insertion_point(field_set_allocated:operations_research.sat.ConstraintProto.circuit_covering)
}
void ConstraintProto::set_allocated_table(::operations_research::sat::TableConstraintProto* table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_constraint();
  if (table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(table);
    if (message_arena != submessage_arena) {
      table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table, submessage_arena);
    }
    set_has_table();
    constraint_.table_ = table;
  }
  // @@protoc_insertion_point(field_set_allocated:operations_research.sat.ConstraintProto.table)
}
void ConstraintProto::set_allocated_automaton(::operations_research::sat::AutomatonConstraintProto* automaton) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_constraint();
  if (automaton) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(automaton);
    if (message_arena != submessage_arena) {
      automaton = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, automaton, submessage_arena);
    }
    set_has_automaton();
    constraint_.automaton_ = automaton;
  }
  // @@protoc_insertion_point(field_set_allocated:operations_research.sat.ConstraintProto.automaton)
}
void ConstraintProto::set_allocated_inverse(::operations_research::sat::InverseConstraintProto* inverse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_constraint();
  if (inverse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(inverse);
    if (message_arena != submessage_arena) {
      inverse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inverse, submessage_arena);
    }
    set_has_inverse();
    constraint_.inverse_ = inverse;
  }
  // @@protoc_insertion_point(field_set_allocated:operations_research.sat.ConstraintProto.inverse)
}
void ConstraintProto::set_allocated_reservoir(::operations_research::sat::ReservoirConstraintProto* reservoir) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_constraint();
  if (reservoir) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reservoir);
    if (message_arena != submessage_arena) {
      reservoir = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reservoir, submessage_arena);
    }
    set_has_reservoir();
    constraint_.reservoir_ = reservoir;
  }
  // @@protoc_insertion_point(field_set_allocated:operations_research.sat.ConstraintProto.reservoir)
}
void ConstraintProto::set_allocated_interval(::operations_research::sat::IntervalConstraintProto* interval) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_constraint();
  if (interval) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(interval);
    if (message_arena != submessage_arena) {
      interval = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interval, submessage_arena);
    }
    set_has_interval();
    constraint_.interval_ = interval;
  }
  // @@protoc_insertion_point(field_set_allocated:operations_research.sat.ConstraintProto.interval)
}
void ConstraintProto::set_allocated_no_overlap(::operations_research::sat::NoOverlapConstraintProto* no_overlap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_constraint();
  if (no_overlap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(no_overlap);
    if (message_arena != submessage_arena) {
      no_overlap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, no_overlap, submessage_arena);
    }
    set_has_no_overlap();
    constraint_.no_overlap_ = no_overlap;
  }
  // @@protoc_insertion_point(field_set_allocated:operations_research.sat.ConstraintProto.no_overlap)
}
void ConstraintProto::set_allocated_no_overlap_2d(::operations_research::sat::NoOverlap2DConstraintProto* no_overlap_2d) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_constraint();
  if (no_overlap_2d) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(no_overlap_2d);
    if (message_arena != submessage_arena) {
      no_overlap_2d = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, no_overlap_2d, submessage_arena);
    }
    set_has_no_overlap_2d();
    constraint_.no_overlap_2d_ = no_overlap_2d;
  }
  // @@protoc_insertion_point(field_set_allocated:operations_research.sat.ConstraintProto.no_overlap_2d)
}
void ConstraintProto::set_allocated_cumulative(::operations_research::sat::CumulativeConstraintProto* cumulative) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_constraint();
  if (cumulative) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cumulative);
    if (message_arena != submessage_arena) {
      cumulative = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cumulative, submessage_arena);
    }
    set_has_cumulative();
    constraint_.cumulative_ = cumulative;
  }
  // @@protoc_insertion_point(field_set_allocated:operations_research.sat.ConstraintProto.cumulative)
}
ConstraintProto::ConstraintProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  enforcement_literal_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:operations_research.sat.ConstraintProto)
}
ConstraintProto::ConstraintProto(const ConstraintProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      enforcement_literal_(from.enforcement_literal_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  clear_has_constraint();
  switch (from.constraint_case()) {
    case kBoolOr: {
      _internal_mutable_bool_or()->::operations_research::sat::BoolArgumentProto::MergeFrom(from._internal_bool_or());
      break;
    }
    case kBoolAnd: {
      _internal_mutable_bool_and()->::operations_research::sat::BoolArgumentProto::MergeFrom(from._internal_bool_and());
      break;
    }
    case kAtMostOne: {
      _internal_mutable_at_most_one()->::operations_research::sat::BoolArgumentProto::MergeFrom(from._internal_at_most_one());
      break;
    }
    case kBoolXor: {
      _internal_mutable_bool_xor()->::operations_research::sat::BoolArgumentProto::MergeFrom(from._internal_bool_xor());
      break;
    }
    case kIntDiv: {
      _internal_mutable_int_div()->::operations_research::sat::IntegerArgumentProto::MergeFrom(from._internal_int_div());
      break;
    }
    case kIntMod: {
      _internal_mutable_int_mod()->::operations_research::sat::IntegerArgumentProto::MergeFrom(from._internal_int_mod());
      break;
    }
    case kIntMax: {
      _internal_mutable_int_max()->::operations_research::sat::IntegerArgumentProto::MergeFrom(from._internal_int_max());
      break;
    }
    case kLinMax: {
      _internal_mutable_lin_max()->::operations_research::sat::LinearArgumentProto::MergeFrom(from._internal_lin_max());
      break;
    }
    case kIntMin: {
      _internal_mutable_int_min()->::operations_research::sat::IntegerArgumentProto::MergeFrom(from._internal_int_min());
      break;
    }
    case kLinMin: {
      _internal_mutable_lin_min()->::operations_research::sat::LinearArgumentProto::MergeFrom(from._internal_lin_min());
      break;
    }
    case kIntProd: {
      _internal_mutable_int_prod()->::operations_research::sat::IntegerArgumentProto::MergeFrom(from._internal_int_prod());
      break;
    }
    case kLinear: {
      _internal_mutable_linear()->::operations_research::sat::LinearConstraintProto::MergeFrom(from._internal_linear());
      break;
    }
    case kAllDiff: {
      _internal_mutable_all_diff()->::operations_research::sat::AllDifferentConstraintProto::MergeFrom(from._internal_all_diff());
      break;
    }
    case kElement: {
      _internal_mutable_element()->::operations_research::sat::ElementConstraintProto::MergeFrom(from._internal_element());
      break;
    }
    case kCircuit: {
      _internal_mutable_circuit()->::operations_research::sat::CircuitConstraintProto::MergeFrom(from._internal_circuit());
      break;
    }
    case kRoutes: {
      _internal_mutable_routes()->::operations_research::sat::RoutesConstraintProto::MergeFrom(from._internal_routes());
      break;
    }
    case kCircuitCovering: {
      _internal_mutable_circuit_covering()->::operations_research::sat::CircuitCoveringConstraintProto::MergeFrom(from._internal_circuit_covering());
      break;
    }
    case kTable: {
      _internal_mutable_table()->::operations_research::sat::TableConstraintProto::MergeFrom(from._internal_table());
      break;
    }
    case kAutomaton: {
      _internal_mutable_automaton()->::operations_research::sat::AutomatonConstraintProto::MergeFrom(from._internal_automaton());
      break;
    }
    case kInverse: {
      _internal_mutable_inverse()->::operations_research::sat::InverseConstraintProto::MergeFrom(from._internal_inverse());
      break;
    }
    case kReservoir: {
      _internal_mutable_reservoir()->::operations_research::sat::ReservoirConstraintProto::MergeFrom(from._internal_reservoir());
      break;
    }
    case kInterval: {
      _internal_mutable_interval()->::operations_research::sat::IntervalConstraintProto::MergeFrom(from._internal_interval());
      break;
    }
    case kNoOverlap: {
      _internal_mutable_no_overlap()->::operations_research::sat::NoOverlapConstraintProto::MergeFrom(from._internal_no_overlap());
      break;
    }
    case kNoOverlap2D: {
      _internal_mutable_no_overlap_2d()->::operations_research::sat::NoOverlap2DConstraintProto::MergeFrom(from._internal_no_overlap_2d());
      break;
    }
    case kCumulative: {
      _internal_mutable_cumulative()->::operations_research::sat::CumulativeConstraintProto::MergeFrom(from._internal_cumulative());
      break;
    }
    case CONSTRAINT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:operations_research.sat.ConstraintProto)
}

void ConstraintProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_has_constraint();
}

ConstraintProto::~ConstraintProto() {
  // @@protoc_insertion_point(destructor:operations_research.sat.ConstraintProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConstraintProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_constraint()) {
    clear_constraint();
  }
}

void ConstraintProto::ArenaDtor(void* object) {
  ConstraintProto* _this = reinterpret_cast< ConstraintProto* >(object);
  (void)_this;
}
void ConstraintProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConstraintProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConstraintProto& ConstraintProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConstraintProto_ortools_2fsat_2fcp_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void ConstraintProto::clear_constraint() {
// @@protoc_insertion_point(one_of_clear_start:operations_research.sat.ConstraintProto)
  switch (constraint_case()) {
    case kBoolOr: {
      if (GetArena() == nullptr) {
        delete constraint_.bool_or_;
      }
      break;
    }
    case kBoolAnd: {
      if (GetArena() == nullptr) {
        delete constraint_.bool_and_;
      }
      break;
    }
    case kAtMostOne: {
      if (GetArena() == nullptr) {
        delete constraint_.at_most_one_;
      }
      break;
    }
    case kBoolXor: {
      if (GetArena() == nullptr) {
        delete constraint_.bool_xor_;
      }
      break;
    }
    case kIntDiv: {
      if (GetArena() == nullptr) {
        delete constraint_.int_div_;
      }
      break;
    }
    case kIntMod: {
      if (GetArena() == nullptr) {
        delete constraint_.int_mod_;
      }
      break;
    }
    case kIntMax: {
      if (GetArena() == nullptr) {
        delete constraint_.int_max_;
      }
      break;
    }
    case kLinMax: {
      if (GetArena() == nullptr) {
        delete constraint_.lin_max_;
      }
      break;
    }
    case kIntMin: {
      if (GetArena() == nullptr) {
        delete constraint_.int_min_;
      }
      break;
    }
    case kLinMin: {
      if (GetArena() == nullptr) {
        delete constraint_.lin_min_;
      }
      break;
    }
    case kIntProd: {
      if (GetArena() == nullptr) {
        delete constraint_.int_prod_;
      }
      break;
    }
    case kLinear: {
      if (GetArena() == nullptr) {
        delete constraint_.linear_;
      }
      break;
    }
    case kAllDiff: {
      if (GetArena() == nullptr) {
        delete constraint_.all_diff_;
      }
      break;
    }
    case kElement: {
      if (GetArena() == nullptr) {
        delete constraint_.element_;
      }
      break;
    }
    case kCircuit: {
      if (GetArena() == nullptr) {
        delete constraint_.circuit_;
      }
      break;
    }
    case kRoutes: {
      if (GetArena() == nullptr) {
        delete constraint_.routes_;
      }
      break;
    }
    case kCircuitCovering: {
      if (GetArena() == nullptr) {
        delete constraint_.circuit_covering_;
      }
      break;
    }
    case kTable: {
      if (GetArena() == nullptr) {
        delete constraint_.table_;
      }
      break;
    }
    case kAutomaton: {
      if (GetArena() == nullptr) {
        delete constraint_.automaton_;
      }
      break;
    }
    case kInverse: {
      if (GetArena() == nullptr) {
        delete constraint_.inverse_;
      }
      break;
    }
    case kReservoir: {
      if (GetArena() == nullptr) {
        delete constraint_.reservoir_;
      }
      break;
    }
    case kInterval: {
      if (GetArena() == nullptr) {
        delete constraint_.interval_;
      }
      break;
    }
    case kNoOverlap: {
      if (GetArena() == nullptr) {
        delete constraint_.no_overlap_;
      }
      break;
    }
    case kNoOverlap2D: {
      if (GetArena() == nullptr) {
        delete constraint_.no_overlap_2d_;
      }
      break;
    }
    case kCumulative: {
      if (GetArena() == nullptr) {
        delete constraint_.cumulative_;
      }
      break;
    }
    case CONSTRAINT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONSTRAINT_NOT_SET;
}


void ConstraintProto::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.sat.ConstraintProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enforcement_literal_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  clear_constraint();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConstraintProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "operations_research.sat.ConstraintProto.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 enforcement_literal = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_enforcement_literal(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_enforcement_literal(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .operations_research.sat.BoolArgumentProto bool_or = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_bool_or(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .operations_research.sat.BoolArgumentProto bool_and = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_bool_and(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .operations_research.sat.BoolArgumentProto bool_xor = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_bool_xor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .operations_research.sat.IntegerArgumentProto int_div = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_int_div(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .operations_research.sat.IntegerArgumentProto int_mod = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_int_mod(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .operations_research.sat.IntegerArgumentProto int_max = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_int_max(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .operations_research.sat.IntegerArgumentProto int_min = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_int_min(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .operations_research.sat.IntegerArgumentProto int_prod = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_int_prod(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .operations_research.sat.LinearConstraintProto linear = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .operations_research.sat.AllDifferentConstraintProto all_diff = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_all_diff(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .operations_research.sat.ElementConstraintProto element = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_element(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .operations_research.sat.CircuitConstraintProto circuit = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_circuit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .operations_research.sat.TableConstraintProto table = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_table(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .operations_research.sat.AutomatonConstraintProto automaton = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_automaton(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .operations_research.sat.InverseConstraintProto inverse = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_inverse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .operations_research.sat.IntervalConstraintProto interval = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_interval(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .operations_research.sat.NoOverlapConstraintProto no_overlap = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_no_overlap(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .operations_research.sat.NoOverlap2DConstraintProto no_overlap_2d = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_no_overlap_2d(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .operations_research.sat.CumulativeConstraintProto cumulative = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_cumulative(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .operations_research.sat.RoutesConstraintProto routes = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_routes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .operations_research.sat.ReservoirConstraintProto reservoir = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_reservoir(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .operations_research.sat.CircuitCoveringConstraintProto circuit_covering = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_circuit_covering(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .operations_research.sat.BoolArgumentProto at_most_one = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_at_most_one(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .operations_research.sat.LinearArgumentProto lin_max = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_lin_max(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .operations_research.sat.LinearArgumentProto lin_min = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_lin_min(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConstraintProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.sat.ConstraintProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "operations_research.sat.ConstraintProto.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated int32 enforcement_literal = 2;
  {
    int byte_size = _enforcement_literal_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_enforcement_literal(), byte_size, target);
    }
  }

  // .operations_research.sat.BoolArgumentProto bool_or = 3;
  if (_internal_has_bool_or()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::bool_or(this), target, stream);
  }

  // .operations_research.sat.BoolArgumentProto bool_and = 4;
  if (_internal_has_bool_and()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::bool_and(this), target, stream);
  }

  // .operations_research.sat.BoolArgumentProto bool_xor = 5;
  if (_internal_has_bool_xor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::bool_xor(this), target, stream);
  }

  // .operations_research.sat.IntegerArgumentProto int_div = 7;
  if (_internal_has_int_div()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::int_div(this), target, stream);
  }

  // .operations_research.sat.IntegerArgumentProto int_mod = 8;
  if (_internal_has_int_mod()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::int_mod(this), target, stream);
  }

  // .operations_research.sat.IntegerArgumentProto int_max = 9;
  if (_internal_has_int_max()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::int_max(this), target, stream);
  }

  // .operations_research.sat.IntegerArgumentProto int_min = 10;
  if (_internal_has_int_min()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::int_min(this), target, stream);
  }

  // .operations_research.sat.IntegerArgumentProto int_prod = 11;
  if (_internal_has_int_prod()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::int_prod(this), target, stream);
  }

  // .operations_research.sat.LinearConstraintProto linear = 12;
  if (_internal_has_linear()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::linear(this), target, stream);
  }

  // .operations_research.sat.AllDifferentConstraintProto all_diff = 13;
  if (_internal_has_all_diff()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::all_diff(this), target, stream);
  }

  // .operations_research.sat.ElementConstraintProto element = 14;
  if (_internal_has_element()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::element(this), target, stream);
  }

  // .operations_research.sat.CircuitConstraintProto circuit = 15;
  if (_internal_has_circuit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::circuit(this), target, stream);
  }

  // .operations_research.sat.TableConstraintProto table = 16;
  if (_internal_has_table()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::table(this), target, stream);
  }

  // .operations_research.sat.AutomatonConstraintProto automaton = 17;
  if (_internal_has_automaton()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::automaton(this), target, stream);
  }

  // .operations_research.sat.InverseConstraintProto inverse = 18;
  if (_internal_has_inverse()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::inverse(this), target, stream);
  }

  // .operations_research.sat.IntervalConstraintProto interval = 19;
  if (_internal_has_interval()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::interval(this), target, stream);
  }

  // .operations_research.sat.NoOverlapConstraintProto no_overlap = 20;
  if (_internal_has_no_overlap()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::no_overlap(this), target, stream);
  }

  // .operations_research.sat.NoOverlap2DConstraintProto no_overlap_2d = 21;
  if (_internal_has_no_overlap_2d()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::no_overlap_2d(this), target, stream);
  }

  // .operations_research.sat.CumulativeConstraintProto cumulative = 22;
  if (_internal_has_cumulative()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::cumulative(this), target, stream);
  }

  // .operations_research.sat.RoutesConstraintProto routes = 23;
  if (_internal_has_routes()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::routes(this), target, stream);
  }

  // .operations_research.sat.ReservoirConstraintProto reservoir = 24;
  if (_internal_has_reservoir()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::reservoir(this), target, stream);
  }

  // .operations_research.sat.CircuitCoveringConstraintProto circuit_covering = 25;
  if (_internal_has_circuit_covering()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::circuit_covering(this), target, stream);
  }

  // .operations_research.sat.BoolArgumentProto at_most_one = 26;
  if (_internal_has_at_most_one()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::at_most_one(this), target, stream);
  }

  // .operations_research.sat.LinearArgumentProto lin_max = 27;
  if (_internal_has_lin_max()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::lin_max(this), target, stream);
  }

  // .operations_research.sat.LinearArgumentProto lin_min = 28;
  if (_internal_has_lin_min()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        28, _Internal::lin_min(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.sat.ConstraintProto)
  return target;
}

size_t ConstraintProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.sat.ConstraintProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 enforcement_literal = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->enforcement_literal_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _enforcement_literal_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  switch (constraint_case()) {
    // .operations_research.sat.BoolArgumentProto bool_or = 3;
    case kBoolOr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *constraint_.bool_or_);
      break;
    }
    // .operations_research.sat.BoolArgumentProto bool_and = 4;
    case kBoolAnd: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *constraint_.bool_and_);
      break;
    }
    // .operations_research.sat.BoolArgumentProto at_most_one = 26;
    case kAtMostOne: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *constraint_.at_most_one_);
      break;
    }
    // .operations_research.sat.BoolArgumentProto bool_xor = 5;
    case kBoolXor: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *constraint_.bool_xor_);
      break;
    }
    // .operations_research.sat.IntegerArgumentProto int_div = 7;
    case kIntDiv: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *constraint_.int_div_);
      break;
    }
    // .operations_research.sat.IntegerArgumentProto int_mod = 8;
    case kIntMod: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *constraint_.int_mod_);
      break;
    }
    // .operations_research.sat.IntegerArgumentProto int_max = 9;
    case kIntMax: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *constraint_.int_max_);
      break;
    }
    // .operations_research.sat.LinearArgumentProto lin_max = 27;
    case kLinMax: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *constraint_.lin_max_);
      break;
    }
    // .operations_research.sat.IntegerArgumentProto int_min = 10;
    case kIntMin: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *constraint_.int_min_);
      break;
    }
    // .operations_research.sat.LinearArgumentProto lin_min = 28;
    case kLinMin: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *constraint_.lin_min_);
      break;
    }
    // .operations_research.sat.IntegerArgumentProto int_prod = 11;
    case kIntProd: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *constraint_.int_prod_);
      break;
    }
    // .operations_research.sat.LinearConstraintProto linear = 12;
    case kLinear: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *constraint_.linear_);
      break;
    }
    // .operations_research.sat.AllDifferentConstraintProto all_diff = 13;
    case kAllDiff: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *constraint_.all_diff_);
      break;
    }
    // .operations_research.sat.ElementConstraintProto element = 14;
    case kElement: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *constraint_.element_);
      break;
    }
    // .operations_research.sat.CircuitConstraintProto circuit = 15;
    case kCircuit: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *constraint_.circuit_);
      break;
    }
    // .operations_research.sat.RoutesConstraintProto routes = 23;
    case kRoutes: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *constraint_.routes_);
      break;
    }
    // .operations_research.sat.CircuitCoveringConstraintProto circuit_covering = 25;
    case kCircuitCovering: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *constraint_.circuit_covering_);
      break;
    }
    // .operations_research.sat.TableConstraintProto table = 16;
    case kTable: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *constraint_.table_);
      break;
    }
    // .operations_research.sat.AutomatonConstraintProto automaton = 17;
    case kAutomaton: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *constraint_.automaton_);
      break;
    }
    // .operations_research.sat.InverseConstraintProto inverse = 18;
    case kInverse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *constraint_.inverse_);
      break;
    }
    // .operations_research.sat.ReservoirConstraintProto reservoir = 24;
    case kReservoir: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *constraint_.reservoir_);
      break;
    }
    // .operations_research.sat.IntervalConstraintProto interval = 19;
    case kInterval: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *constraint_.interval_);
      break;
    }
    // .operations_research.sat.NoOverlapConstraintProto no_overlap = 20;
    case kNoOverlap: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *constraint_.no_overlap_);
      break;
    }
    // .operations_research.sat.NoOverlap2DConstraintProto no_overlap_2d = 21;
    case kNoOverlap2D: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *constraint_.no_overlap_2d_);
      break;
    }
    // .operations_research.sat.CumulativeConstraintProto cumulative = 22;
    case kCumulative: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *constraint_.cumulative_);
      break;
    }
    case CONSTRAINT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConstraintProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:operations_research.sat.ConstraintProto)
  GOOGLE_DCHECK_NE(&from, this);
  const ConstraintProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConstraintProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:operations_research.sat.ConstraintProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:operations_research.sat.ConstraintProto)
    MergeFrom(*source);
  }
}

void ConstraintProto::MergeFrom(const ConstraintProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:operations_research.sat.ConstraintProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  enforcement_literal_.MergeFrom(from.enforcement_literal_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  switch (from.constraint_case()) {
    case kBoolOr: {
      _internal_mutable_bool_or()->::operations_research::sat::BoolArgumentProto::MergeFrom(from._internal_bool_or());
      break;
    }
    case kBoolAnd: {
      _internal_mutable_bool_and()->::operations_research::sat::BoolArgumentProto::MergeFrom(from._internal_bool_and());
      break;
    }
    case kAtMostOne: {
      _internal_mutable_at_most_one()->::operations_research::sat::BoolArgumentProto::MergeFrom(from._internal_at_most_one());
      break;
    }
    case kBoolXor: {
      _internal_mutable_bool_xor()->::operations_research::sat::BoolArgumentProto::MergeFrom(from._internal_bool_xor());
      break;
    }
    case kIntDiv: {
      _internal_mutable_int_div()->::operations_research::sat::IntegerArgumentProto::MergeFrom(from._internal_int_div());
      break;
    }
    case kIntMod: {
      _internal_mutable_int_mod()->::operations_research::sat::IntegerArgumentProto::MergeFrom(from._internal_int_mod());
      break;
    }
    case kIntMax: {
      _internal_mutable_int_max()->::operations_research::sat::IntegerArgumentProto::MergeFrom(from._internal_int_max());
      break;
    }
    case kLinMax: {
      _internal_mutable_lin_max()->::operations_research::sat::LinearArgumentProto::MergeFrom(from._internal_lin_max());
      break;
    }
    case kIntMin: {
      _internal_mutable_int_min()->::operations_research::sat::IntegerArgumentProto::MergeFrom(from._internal_int_min());
      break;
    }
    case kLinMin: {
      _internal_mutable_lin_min()->::operations_research::sat::LinearArgumentProto::MergeFrom(from._internal_lin_min());
      break;
    }
    case kIntProd: {
      _internal_mutable_int_prod()->::operations_research::sat::IntegerArgumentProto::MergeFrom(from._internal_int_prod());
      break;
    }
    case kLinear: {
      _internal_mutable_linear()->::operations_research::sat::LinearConstraintProto::MergeFrom(from._internal_linear());
      break;
    }
    case kAllDiff: {
      _internal_mutable_all_diff()->::operations_research::sat::AllDifferentConstraintProto::MergeFrom(from._internal_all_diff());
      break;
    }
    case kElement: {
      _internal_mutable_element()->::operations_research::sat::ElementConstraintProto::MergeFrom(from._internal_element());
      break;
    }
    case kCircuit: {
      _internal_mutable_circuit()->::operations_research::sat::CircuitConstraintProto::MergeFrom(from._internal_circuit());
      break;
    }
    case kRoutes: {
      _internal_mutable_routes()->::operations_research::sat::RoutesConstraintProto::MergeFrom(from._internal_routes());
      break;
    }
    case kCircuitCovering: {
      _internal_mutable_circuit_covering()->::operations_research::sat::CircuitCoveringConstraintProto::MergeFrom(from._internal_circuit_covering());
      break;
    }
    case kTable: {
      _internal_mutable_table()->::operations_research::sat::TableConstraintProto::MergeFrom(from._internal_table());
      break;
    }
    case kAutomaton: {
      _internal_mutable_automaton()->::operations_research::sat::AutomatonConstraintProto::MergeFrom(from._internal_automaton());
      break;
    }
    case kInverse: {
      _internal_mutable_inverse()->::operations_research::sat::InverseConstraintProto::MergeFrom(from._internal_inverse());
      break;
    }
    case kReservoir: {
      _internal_mutable_reservoir()->::operations_research::sat::ReservoirConstraintProto::MergeFrom(from._internal_reservoir());
      break;
    }
    case kInterval: {
      _internal_mutable_interval()->::operations_research::sat::IntervalConstraintProto::MergeFrom(from._internal_interval());
      break;
    }
    case kNoOverlap: {
      _internal_mutable_no_overlap()->::operations_research::sat::NoOverlapConstraintProto::MergeFrom(from._internal_no_overlap());
      break;
    }
    case kNoOverlap2D: {
      _internal_mutable_no_overlap_2d()->::operations_research::sat::NoOverlap2DConstraintProto::MergeFrom(from._internal_no_overlap_2d());
      break;
    }
    case kCumulative: {
      _internal_mutable_cumulative()->::operations_research::sat::CumulativeConstraintProto::MergeFrom(from._internal_cumulative());
      break;
    }
    case CONSTRAINT_NOT_SET: {
      break;
    }
  }
}

void ConstraintProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:operations_research.sat.ConstraintProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConstraintProto::CopyFrom(const ConstraintProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.sat.ConstraintProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConstraintProto::IsInitialized() const {
  return true;
}

void ConstraintProto::InternalSwap(ConstraintProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  enforcement_literal_.InternalSwap(&other->enforcement_literal_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(constraint_, other->constraint_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConstraintProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CpObjectiveProto::InitAsDefaultInstance() {
}
class CpObjectiveProto::_Internal {
 public:
};

CpObjectiveProto::CpObjectiveProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  vars_(arena),
  coeffs_(arena),
  domain_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:operations_research.sat.CpObjectiveProto)
}
CpObjectiveProto::CpObjectiveProto(const CpObjectiveProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vars_(from.vars_),
      coeffs_(from.coeffs_),
      domain_(from.domain_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&offset_, &from.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&scaling_factor_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(scaling_factor_));
  // @@protoc_insertion_point(copy_constructor:operations_research.sat.CpObjectiveProto)
}

void CpObjectiveProto::SharedCtor() {
  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scaling_factor_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(scaling_factor_));
}

CpObjectiveProto::~CpObjectiveProto() {
  // @@protoc_insertion_point(destructor:operations_research.sat.CpObjectiveProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CpObjectiveProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CpObjectiveProto::ArenaDtor(void* object) {
  CpObjectiveProto* _this = reinterpret_cast< CpObjectiveProto* >(object);
  (void)_this;
}
void CpObjectiveProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CpObjectiveProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CpObjectiveProto& CpObjectiveProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CpObjectiveProto_ortools_2fsat_2fcp_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void CpObjectiveProto::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.sat.CpObjectiveProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vars_.Clear();
  coeffs_.Clear();
  domain_.Clear();
  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scaling_factor_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(scaling_factor_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CpObjectiveProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 vars = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_vars(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_vars(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double scaling_factor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          scaling_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated int64 coeffs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_coeffs(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_coeffs(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 domain = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_domain(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_domain(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CpObjectiveProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.sat.CpObjectiveProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 vars = 1;
  {
    int byte_size = _vars_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_vars(), byte_size, target);
    }
  }

  // double offset = 2;
  if (!(this->offset() <= 0 && this->offset() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_offset(), target);
  }

  // double scaling_factor = 3;
  if (!(this->scaling_factor() <= 0 && this->scaling_factor() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_scaling_factor(), target);
  }

  // repeated int64 coeffs = 4;
  {
    int byte_size = _coeffs_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          4, _internal_coeffs(), byte_size, target);
    }
  }

  // repeated int64 domain = 5;
  {
    int byte_size = _domain_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          5, _internal_domain(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.sat.CpObjectiveProto)
  return target;
}

size_t CpObjectiveProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.sat.CpObjectiveProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 vars = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->vars_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _vars_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 coeffs = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->coeffs_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _coeffs_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 domain = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->domain_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _domain_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // double offset = 2;
  if (!(this->offset() <= 0 && this->offset() >= 0)) {
    total_size += 1 + 8;
  }

  // double scaling_factor = 3;
  if (!(this->scaling_factor() <= 0 && this->scaling_factor() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CpObjectiveProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:operations_research.sat.CpObjectiveProto)
  GOOGLE_DCHECK_NE(&from, this);
  const CpObjectiveProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CpObjectiveProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:operations_research.sat.CpObjectiveProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:operations_research.sat.CpObjectiveProto)
    MergeFrom(*source);
  }
}

void CpObjectiveProto::MergeFrom(const CpObjectiveProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:operations_research.sat.CpObjectiveProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vars_.MergeFrom(from.vars_);
  coeffs_.MergeFrom(from.coeffs_);
  domain_.MergeFrom(from.domain_);
  if (!(from.offset() <= 0 && from.offset() >= 0)) {
    _internal_set_offset(from._internal_offset());
  }
  if (!(from.scaling_factor() <= 0 && from.scaling_factor() >= 0)) {
    _internal_set_scaling_factor(from._internal_scaling_factor());
  }
}

void CpObjectiveProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:operations_research.sat.CpObjectiveProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CpObjectiveProto::CopyFrom(const CpObjectiveProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.sat.CpObjectiveProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CpObjectiveProto::IsInitialized() const {
  return true;
}

void CpObjectiveProto::InternalSwap(CpObjectiveProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vars_.InternalSwap(&other->vars_);
  coeffs_.InternalSwap(&other->coeffs_);
  domain_.InternalSwap(&other->domain_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CpObjectiveProto, scaling_factor_)
      + sizeof(CpObjectiveProto::scaling_factor_)
      - PROTOBUF_FIELD_OFFSET(CpObjectiveProto, offset_)>(
          reinterpret_cast<char*>(&offset_),
          reinterpret_cast<char*>(&other->offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CpObjectiveProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DecisionStrategyProto_AffineTransformation::InitAsDefaultInstance() {
}
class DecisionStrategyProto_AffineTransformation::_Internal {
 public:
};

DecisionStrategyProto_AffineTransformation::DecisionStrategyProto_AffineTransformation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:operations_research.sat.DecisionStrategyProto.AffineTransformation)
}
DecisionStrategyProto_AffineTransformation::DecisionStrategyProto_AffineTransformation(const DecisionStrategyProto_AffineTransformation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&offset_, &from.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&var_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(var_));
  // @@protoc_insertion_point(copy_constructor:operations_research.sat.DecisionStrategyProto.AffineTransformation)
}

void DecisionStrategyProto_AffineTransformation::SharedCtor() {
  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&var_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(var_));
}

DecisionStrategyProto_AffineTransformation::~DecisionStrategyProto_AffineTransformation() {
  // @@protoc_insertion_point(destructor:operations_research.sat.DecisionStrategyProto.AffineTransformation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DecisionStrategyProto_AffineTransformation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DecisionStrategyProto_AffineTransformation::ArenaDtor(void* object) {
  DecisionStrategyProto_AffineTransformation* _this = reinterpret_cast< DecisionStrategyProto_AffineTransformation* >(object);
  (void)_this;
}
void DecisionStrategyProto_AffineTransformation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DecisionStrategyProto_AffineTransformation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DecisionStrategyProto_AffineTransformation& DecisionStrategyProto_AffineTransformation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DecisionStrategyProto_AffineTransformation_ortools_2fsat_2fcp_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void DecisionStrategyProto_AffineTransformation::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.sat.DecisionStrategyProto.AffineTransformation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&var_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(var_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DecisionStrategyProto_AffineTransformation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 var = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          var_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 positive_coeff = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          positive_coeff_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DecisionStrategyProto_AffineTransformation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.sat.DecisionStrategyProto.AffineTransformation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 var = 1;
  if (this->var() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_var(), target);
  }

  // int64 offset = 2;
  if (this->offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_offset(), target);
  }

  // int64 positive_coeff = 3;
  if (this->positive_coeff() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_positive_coeff(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.sat.DecisionStrategyProto.AffineTransformation)
  return target;
}

size_t DecisionStrategyProto_AffineTransformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.sat.DecisionStrategyProto.AffineTransformation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 offset = 2;
  if (this->offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_offset());
  }

  // int64 positive_coeff = 3;
  if (this->positive_coeff() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_positive_coeff());
  }

  // int32 var = 1;
  if (this->var() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_var());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DecisionStrategyProto_AffineTransformation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:operations_research.sat.DecisionStrategyProto.AffineTransformation)
  GOOGLE_DCHECK_NE(&from, this);
  const DecisionStrategyProto_AffineTransformation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DecisionStrategyProto_AffineTransformation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:operations_research.sat.DecisionStrategyProto.AffineTransformation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:operations_research.sat.DecisionStrategyProto.AffineTransformation)
    MergeFrom(*source);
  }
}

void DecisionStrategyProto_AffineTransformation::MergeFrom(const DecisionStrategyProto_AffineTransformation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:operations_research.sat.DecisionStrategyProto.AffineTransformation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
  if (from.positive_coeff() != 0) {
    _internal_set_positive_coeff(from._internal_positive_coeff());
  }
  if (from.var() != 0) {
    _internal_set_var(from._internal_var());
  }
}

void DecisionStrategyProto_AffineTransformation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:operations_research.sat.DecisionStrategyProto.AffineTransformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DecisionStrategyProto_AffineTransformation::CopyFrom(const DecisionStrategyProto_AffineTransformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.sat.DecisionStrategyProto.AffineTransformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecisionStrategyProto_AffineTransformation::IsInitialized() const {
  return true;
}

void DecisionStrategyProto_AffineTransformation::InternalSwap(DecisionStrategyProto_AffineTransformation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DecisionStrategyProto_AffineTransformation, var_)
      + sizeof(DecisionStrategyProto_AffineTransformation::var_)
      - PROTOBUF_FIELD_OFFSET(DecisionStrategyProto_AffineTransformation, offset_)>(
          reinterpret_cast<char*>(&offset_),
          reinterpret_cast<char*>(&other->offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DecisionStrategyProto_AffineTransformation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DecisionStrategyProto::InitAsDefaultInstance() {
}
class DecisionStrategyProto::_Internal {
 public:
};

DecisionStrategyProto::DecisionStrategyProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  variables_(arena),
  transformations_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:operations_research.sat.DecisionStrategyProto)
}
DecisionStrategyProto::DecisionStrategyProto(const DecisionStrategyProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      variables_(from.variables_),
      transformations_(from.transformations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&variable_selection_strategy_, &from.variable_selection_strategy_,
    static_cast<size_t>(reinterpret_cast<char*>(&domain_reduction_strategy_) -
    reinterpret_cast<char*>(&variable_selection_strategy_)) + sizeof(domain_reduction_strategy_));
  // @@protoc_insertion_point(copy_constructor:operations_research.sat.DecisionStrategyProto)
}

void DecisionStrategyProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DecisionStrategyProto_ortools_2fsat_2fcp_5fmodel_2eproto.base);
  ::memset(&variable_selection_strategy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&domain_reduction_strategy_) -
      reinterpret_cast<char*>(&variable_selection_strategy_)) + sizeof(domain_reduction_strategy_));
}

DecisionStrategyProto::~DecisionStrategyProto() {
  // @@protoc_insertion_point(destructor:operations_research.sat.DecisionStrategyProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DecisionStrategyProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DecisionStrategyProto::ArenaDtor(void* object) {
  DecisionStrategyProto* _this = reinterpret_cast< DecisionStrategyProto* >(object);
  (void)_this;
}
void DecisionStrategyProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DecisionStrategyProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DecisionStrategyProto& DecisionStrategyProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DecisionStrategyProto_ortools_2fsat_2fcp_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void DecisionStrategyProto::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.sat.DecisionStrategyProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  variables_.Clear();
  transformations_.Clear();
  ::memset(&variable_selection_strategy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&domain_reduction_strategy_) -
      reinterpret_cast<char*>(&variable_selection_strategy_)) + sizeof(domain_reduction_strategy_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DecisionStrategyProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 variables = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_variables(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_variables(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .operations_research.sat.DecisionStrategyProto.VariableSelectionStrategy variable_selection_strategy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_variable_selection_strategy(static_cast<::operations_research::sat::DecisionStrategyProto_VariableSelectionStrategy>(val));
        } else goto handle_unusual;
        continue;
      // .operations_research.sat.DecisionStrategyProto.DomainReductionStrategy domain_reduction_strategy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_domain_reduction_strategy(static_cast<::operations_research::sat::DecisionStrategyProto_DomainReductionStrategy>(val));
        } else goto handle_unusual;
        continue;
      // repeated .operations_research.sat.DecisionStrategyProto.AffineTransformation transformations = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_transformations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DecisionStrategyProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.sat.DecisionStrategyProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 variables = 1;
  {
    int byte_size = _variables_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_variables(), byte_size, target);
    }
  }

  // .operations_research.sat.DecisionStrategyProto.VariableSelectionStrategy variable_selection_strategy = 2;
  if (this->variable_selection_strategy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_variable_selection_strategy(), target);
  }

  // .operations_research.sat.DecisionStrategyProto.DomainReductionStrategy domain_reduction_strategy = 3;
  if (this->domain_reduction_strategy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_domain_reduction_strategy(), target);
  }

  // repeated .operations_research.sat.DecisionStrategyProto.AffineTransformation transformations = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_transformations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_transformations(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.sat.DecisionStrategyProto)
  return target;
}

size_t DecisionStrategyProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.sat.DecisionStrategyProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 variables = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->variables_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _variables_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .operations_research.sat.DecisionStrategyProto.AffineTransformation transformations = 4;
  total_size += 1UL * this->_internal_transformations_size();
  for (const auto& msg : this->transformations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .operations_research.sat.DecisionStrategyProto.VariableSelectionStrategy variable_selection_strategy = 2;
  if (this->variable_selection_strategy() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_variable_selection_strategy());
  }

  // .operations_research.sat.DecisionStrategyProto.DomainReductionStrategy domain_reduction_strategy = 3;
  if (this->domain_reduction_strategy() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_domain_reduction_strategy());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DecisionStrategyProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:operations_research.sat.DecisionStrategyProto)
  GOOGLE_DCHECK_NE(&from, this);
  const DecisionStrategyProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DecisionStrategyProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:operations_research.sat.DecisionStrategyProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:operations_research.sat.DecisionStrategyProto)
    MergeFrom(*source);
  }
}

void DecisionStrategyProto::MergeFrom(const DecisionStrategyProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:operations_research.sat.DecisionStrategyProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  variables_.MergeFrom(from.variables_);
  transformations_.MergeFrom(from.transformations_);
  if (from.variable_selection_strategy() != 0) {
    _internal_set_variable_selection_strategy(from._internal_variable_selection_strategy());
  }
  if (from.domain_reduction_strategy() != 0) {
    _internal_set_domain_reduction_strategy(from._internal_domain_reduction_strategy());
  }
}

void DecisionStrategyProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:operations_research.sat.DecisionStrategyProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DecisionStrategyProto::CopyFrom(const DecisionStrategyProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.sat.DecisionStrategyProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecisionStrategyProto::IsInitialized() const {
  return true;
}

void DecisionStrategyProto::InternalSwap(DecisionStrategyProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  variables_.InternalSwap(&other->variables_);
  transformations_.InternalSwap(&other->transformations_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DecisionStrategyProto, domain_reduction_strategy_)
      + sizeof(DecisionStrategyProto::domain_reduction_strategy_)
      - PROTOBUF_FIELD_OFFSET(DecisionStrategyProto, variable_selection_strategy_)>(
          reinterpret_cast<char*>(&variable_selection_strategy_),
          reinterpret_cast<char*>(&other->variable_selection_strategy_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DecisionStrategyProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PartialVariableAssignment::InitAsDefaultInstance() {
}
class PartialVariableAssignment::_Internal {
 public:
};

PartialVariableAssignment::PartialVariableAssignment(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  vars_(arena),
  values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:operations_research.sat.PartialVariableAssignment)
}
PartialVariableAssignment::PartialVariableAssignment(const PartialVariableAssignment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vars_(from.vars_),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:operations_research.sat.PartialVariableAssignment)
}

void PartialVariableAssignment::SharedCtor() {
}

PartialVariableAssignment::~PartialVariableAssignment() {
  // @@protoc_insertion_point(destructor:operations_research.sat.PartialVariableAssignment)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PartialVariableAssignment::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PartialVariableAssignment::ArenaDtor(void* object) {
  PartialVariableAssignment* _this = reinterpret_cast< PartialVariableAssignment* >(object);
  (void)_this;
}
void PartialVariableAssignment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PartialVariableAssignment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PartialVariableAssignment& PartialVariableAssignment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PartialVariableAssignment_ortools_2fsat_2fcp_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void PartialVariableAssignment::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.sat.PartialVariableAssignment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vars_.Clear();
  values_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PartialVariableAssignment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 vars = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_vars(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_vars(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PartialVariableAssignment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.sat.PartialVariableAssignment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 vars = 1;
  {
    int byte_size = _vars_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_vars(), byte_size, target);
    }
  }

  // repeated int64 values = 2;
  {
    int byte_size = _values_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_values(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.sat.PartialVariableAssignment)
  return target;
}

size_t PartialVariableAssignment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.sat.PartialVariableAssignment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 vars = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->vars_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _vars_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 values = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->values_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PartialVariableAssignment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:operations_research.sat.PartialVariableAssignment)
  GOOGLE_DCHECK_NE(&from, this);
  const PartialVariableAssignment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PartialVariableAssignment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:operations_research.sat.PartialVariableAssignment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:operations_research.sat.PartialVariableAssignment)
    MergeFrom(*source);
  }
}

void PartialVariableAssignment::MergeFrom(const PartialVariableAssignment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:operations_research.sat.PartialVariableAssignment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vars_.MergeFrom(from.vars_);
  values_.MergeFrom(from.values_);
}

void PartialVariableAssignment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:operations_research.sat.PartialVariableAssignment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartialVariableAssignment::CopyFrom(const PartialVariableAssignment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.sat.PartialVariableAssignment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartialVariableAssignment::IsInitialized() const {
  return true;
}

void PartialVariableAssignment::InternalSwap(PartialVariableAssignment* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vars_.InternalSwap(&other->vars_);
  values_.InternalSwap(&other->values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PartialVariableAssignment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CpModelProto::InitAsDefaultInstance() {
  ::operations_research::sat::_CpModelProto_default_instance_._instance.get_mutable()->objective_ = const_cast< ::operations_research::sat::CpObjectiveProto*>(
      ::operations_research::sat::CpObjectiveProto::internal_default_instance());
  ::operations_research::sat::_CpModelProto_default_instance_._instance.get_mutable()->solution_hint_ = const_cast< ::operations_research::sat::PartialVariableAssignment*>(
      ::operations_research::sat::PartialVariableAssignment::internal_default_instance());
}
class CpModelProto::_Internal {
 public:
  static const ::operations_research::sat::CpObjectiveProto& objective(const CpModelProto* msg);
  static const ::operations_research::sat::PartialVariableAssignment& solution_hint(const CpModelProto* msg);
};

const ::operations_research::sat::CpObjectiveProto&
CpModelProto::_Internal::objective(const CpModelProto* msg) {
  return *msg->objective_;
}
const ::operations_research::sat::PartialVariableAssignment&
CpModelProto::_Internal::solution_hint(const CpModelProto* msg) {
  return *msg->solution_hint_;
}
CpModelProto::CpModelProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  variables_(arena),
  constraints_(arena),
  search_strategy_(arena),
  assumptions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:operations_research.sat.CpModelProto)
}
CpModelProto::CpModelProto(const CpModelProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      variables_(from.variables_),
      constraints_(from.constraints_),
      search_strategy_(from.search_strategy_),
      assumptions_(from.assumptions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  if (from._internal_has_objective()) {
    objective_ = new ::operations_research::sat::CpObjectiveProto(*from.objective_);
  } else {
    objective_ = nullptr;
  }
  if (from._internal_has_solution_hint()) {
    solution_hint_ = new ::operations_research::sat::PartialVariableAssignment(*from.solution_hint_);
  } else {
    solution_hint_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:operations_research.sat.CpModelProto)
}

void CpModelProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CpModelProto_ortools_2fsat_2fcp_5fmodel_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&objective_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&solution_hint_) -
      reinterpret_cast<char*>(&objective_)) + sizeof(solution_hint_));
}

CpModelProto::~CpModelProto() {
  // @@protoc_insertion_point(destructor:operations_research.sat.CpModelProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CpModelProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete objective_;
  if (this != internal_default_instance()) delete solution_hint_;
}

void CpModelProto::ArenaDtor(void* object) {
  CpModelProto* _this = reinterpret_cast< CpModelProto* >(object);
  (void)_this;
}
void CpModelProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CpModelProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CpModelProto& CpModelProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CpModelProto_ortools_2fsat_2fcp_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void CpModelProto::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.sat.CpModelProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  variables_.Clear();
  constraints_.Clear();
  search_strategy_.Clear();
  assumptions_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && objective_ != nullptr) {
    delete objective_;
  }
  objective_ = nullptr;
  if (GetArena() == nullptr && solution_hint_ != nullptr) {
    delete solution_hint_;
  }
  solution_hint_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CpModelProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "operations_research.sat.CpModelProto.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .operations_research.sat.IntegerVariableProto variables = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_variables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .operations_research.sat.ConstraintProto constraints = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_constraints(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .operations_research.sat.CpObjectiveProto objective = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_objective(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .operations_research.sat.DecisionStrategyProto search_strategy = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_search_strategy(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // .operations_research.sat.PartialVariableAssignment solution_hint = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_solution_hint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 assumptions = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_assumptions(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          _internal_add_assumptions(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CpModelProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.sat.CpModelProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "operations_research.sat.CpModelProto.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .operations_research.sat.IntegerVariableProto variables = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_variables_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_variables(i), target, stream);
  }

  // repeated .operations_research.sat.ConstraintProto constraints = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_constraints_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_constraints(i), target, stream);
  }

  // .operations_research.sat.CpObjectiveProto objective = 4;
  if (this->has_objective()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::objective(this), target, stream);
  }

  // repeated .operations_research.sat.DecisionStrategyProto search_strategy = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_search_strategy_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_search_strategy(i), target, stream);
  }

  // .operations_research.sat.PartialVariableAssignment solution_hint = 6;
  if (this->has_solution_hint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::solution_hint(this), target, stream);
  }

  // repeated int32 assumptions = 7;
  {
    int byte_size = _assumptions_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          7, _internal_assumptions(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.sat.CpModelProto)
  return target;
}

size_t CpModelProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.sat.CpModelProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .operations_research.sat.IntegerVariableProto variables = 2;
  total_size += 1UL * this->_internal_variables_size();
  for (const auto& msg : this->variables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .operations_research.sat.ConstraintProto constraints = 3;
  total_size += 1UL * this->_internal_constraints_size();
  for (const auto& msg : this->constraints_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .operations_research.sat.DecisionStrategyProto search_strategy = 5;
  total_size += 1UL * this->_internal_search_strategy_size();
  for (const auto& msg : this->search_strategy_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 assumptions = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->assumptions_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _assumptions_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .operations_research.sat.CpObjectiveProto objective = 4;
  if (this->has_objective()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *objective_);
  }

  // .operations_research.sat.PartialVariableAssignment solution_hint = 6;
  if (this->has_solution_hint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *solution_hint_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CpModelProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:operations_research.sat.CpModelProto)
  GOOGLE_DCHECK_NE(&from, this);
  const CpModelProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CpModelProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:operations_research.sat.CpModelProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:operations_research.sat.CpModelProto)
    MergeFrom(*source);
  }
}

void CpModelProto::MergeFrom(const CpModelProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:operations_research.sat.CpModelProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  variables_.MergeFrom(from.variables_);
  constraints_.MergeFrom(from.constraints_);
  search_strategy_.MergeFrom(from.search_strategy_);
  assumptions_.MergeFrom(from.assumptions_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_objective()) {
    _internal_mutable_objective()->::operations_research::sat::CpObjectiveProto::MergeFrom(from._internal_objective());
  }
  if (from.has_solution_hint()) {
    _internal_mutable_solution_hint()->::operations_research::sat::PartialVariableAssignment::MergeFrom(from._internal_solution_hint());
  }
}

void CpModelProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:operations_research.sat.CpModelProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CpModelProto::CopyFrom(const CpModelProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.sat.CpModelProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CpModelProto::IsInitialized() const {
  return true;
}

void CpModelProto::InternalSwap(CpModelProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  variables_.InternalSwap(&other->variables_);
  constraints_.InternalSwap(&other->constraints_);
  search_strategy_.InternalSwap(&other->search_strategy_);
  assumptions_.InternalSwap(&other->assumptions_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CpModelProto, solution_hint_)
      + sizeof(CpModelProto::solution_hint_)
      - PROTOBUF_FIELD_OFFSET(CpModelProto, objective_)>(
          reinterpret_cast<char*>(&objective_),
          reinterpret_cast<char*>(&other->objective_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CpModelProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CpSolverResponse::InitAsDefaultInstance() {
}
class CpSolverResponse::_Internal {
 public:
};

CpSolverResponse::CpSolverResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  solution_(arena),
  solution_lower_bounds_(arena),
  solution_upper_bounds_(arena),
  tightened_variables_(arena),
  sufficient_assumptions_for_infeasibility_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:operations_research.sat.CpSolverResponse)
}
CpSolverResponse::CpSolverResponse(const CpSolverResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      solution_(from.solution_),
      solution_lower_bounds_(from.solution_lower_bounds_),
      solution_upper_bounds_(from.solution_upper_bounds_),
      tightened_variables_(from.tightened_variables_),
      sufficient_assumptions_for_infeasibility_(from.sufficient_assumptions_for_infeasibility_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  solution_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_solution_info().empty()) {
    solution_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_solution_info(),
      GetArena());
  }
  ::memcpy(&objective_value_, &from.objective_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&primal_integral_) -
    reinterpret_cast<char*>(&objective_value_)) + sizeof(primal_integral_));
  // @@protoc_insertion_point(copy_constructor:operations_research.sat.CpSolverResponse)
}

void CpSolverResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CpSolverResponse_ortools_2fsat_2fcp_5fmodel_2eproto.base);
  solution_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&objective_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&primal_integral_) -
      reinterpret_cast<char*>(&objective_value_)) + sizeof(primal_integral_));
}

CpSolverResponse::~CpSolverResponse() {
  // @@protoc_insertion_point(destructor:operations_research.sat.CpSolverResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CpSolverResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  solution_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CpSolverResponse::ArenaDtor(void* object) {
  CpSolverResponse* _this = reinterpret_cast< CpSolverResponse* >(object);
  (void)_this;
}
void CpSolverResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CpSolverResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CpSolverResponse& CpSolverResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CpSolverResponse_ortools_2fsat_2fcp_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void CpSolverResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.sat.CpSolverResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  solution_.Clear();
  solution_lower_bounds_.Clear();
  solution_upper_bounds_.Clear();
  tightened_variables_.Clear();
  sufficient_assumptions_for_infeasibility_.Clear();
  solution_info_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&objective_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&primal_integral_) -
      reinterpret_cast<char*>(&objective_value_)) + sizeof(primal_integral_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CpSolverResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .operations_research.sat.CpSolverStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::operations_research::sat::CpSolverStatus>(val));
        } else goto handle_unusual;
        continue;
      // repeated int64 solution = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_solution(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_solution(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double objective_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          objective_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double best_objective_bound = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          best_objective_bound_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool all_solutions_were_found = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          all_solutions_were_found_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 num_booleans = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          num_booleans_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 num_conflicts = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          num_conflicts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 num_branches = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          num_branches_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 num_binary_propagations = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          num_binary_propagations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 num_integer_propagations = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          num_integer_propagations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double wall_time = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          wall_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double user_time = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          user_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double deterministic_time = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          deterministic_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated int64 solution_lower_bounds = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_solution_lower_bounds(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144) {
          _internal_add_solution_lower_bounds(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 solution_upper_bounds = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_solution_upper_bounds(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152) {
          _internal_add_solution_upper_bounds(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string solution_info = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_solution_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "operations_research.sat.CpSolverResponse.solution_info"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .operations_research.sat.IntegerVariableProto tightened_variables = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_tightened_variables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else goto handle_unusual;
        continue;
      // double primal_integral = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 177)) {
          primal_integral_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated int32 sufficient_assumptions_for_infeasibility = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_sufficient_assumptions_for_infeasibility(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184) {
          _internal_add_sufficient_assumptions_for_infeasibility(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CpSolverResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.sat.CpSolverResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .operations_research.sat.CpSolverStatus status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // repeated int64 solution = 2;
  {
    int byte_size = _solution_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_solution(), byte_size, target);
    }
  }

  // double objective_value = 3;
  if (!(this->objective_value() <= 0 && this->objective_value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_objective_value(), target);
  }

  // double best_objective_bound = 4;
  if (!(this->best_objective_bound() <= 0 && this->best_objective_bound() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_best_objective_bound(), target);
  }

  // bool all_solutions_were_found = 5;
  if (this->all_solutions_were_found() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_all_solutions_were_found(), target);
  }

  // int64 num_booleans = 10;
  if (this->num_booleans() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_num_booleans(), target);
  }

  // int64 num_conflicts = 11;
  if (this->num_conflicts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_num_conflicts(), target);
  }

  // int64 num_branches = 12;
  if (this->num_branches() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(12, this->_internal_num_branches(), target);
  }

  // int64 num_binary_propagations = 13;
  if (this->num_binary_propagations() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(13, this->_internal_num_binary_propagations(), target);
  }

  // int64 num_integer_propagations = 14;
  if (this->num_integer_propagations() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(14, this->_internal_num_integer_propagations(), target);
  }

  // double wall_time = 15;
  if (!(this->wall_time() <= 0 && this->wall_time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_wall_time(), target);
  }

  // double user_time = 16;
  if (!(this->user_time() <= 0 && this->user_time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_user_time(), target);
  }

  // double deterministic_time = 17;
  if (!(this->deterministic_time() <= 0 && this->deterministic_time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_deterministic_time(), target);
  }

  // repeated int64 solution_lower_bounds = 18;
  {
    int byte_size = _solution_lower_bounds_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          18, _internal_solution_lower_bounds(), byte_size, target);
    }
  }

  // repeated int64 solution_upper_bounds = 19;
  {
    int byte_size = _solution_upper_bounds_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          19, _internal_solution_upper_bounds(), byte_size, target);
    }
  }

  // string solution_info = 20;
  if (this->solution_info().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_solution_info().data(), static_cast<int>(this->_internal_solution_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "operations_research.sat.CpSolverResponse.solution_info");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_solution_info(), target);
  }

  // repeated .operations_research.sat.IntegerVariableProto tightened_variables = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tightened_variables_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, this->_internal_tightened_variables(i), target, stream);
  }

  // double primal_integral = 22;
  if (!(this->primal_integral() <= 0 && this->primal_integral() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(22, this->_internal_primal_integral(), target);
  }

  // repeated int32 sufficient_assumptions_for_infeasibility = 23;
  {
    int byte_size = _sufficient_assumptions_for_infeasibility_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          23, _internal_sufficient_assumptions_for_infeasibility(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.sat.CpSolverResponse)
  return target;
}

size_t CpSolverResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.sat.CpSolverResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 solution = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->solution_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _solution_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 solution_lower_bounds = 18;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->solution_lower_bounds_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _solution_lower_bounds_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 solution_upper_bounds = 19;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->solution_upper_bounds_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _solution_upper_bounds_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .operations_research.sat.IntegerVariableProto tightened_variables = 21;
  total_size += 2UL * this->_internal_tightened_variables_size();
  for (const auto& msg : this->tightened_variables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 sufficient_assumptions_for_infeasibility = 23;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->sufficient_assumptions_for_infeasibility_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _sufficient_assumptions_for_infeasibility_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string solution_info = 20;
  if (this->solution_info().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_solution_info());
  }

  // double objective_value = 3;
  if (!(this->objective_value() <= 0 && this->objective_value() >= 0)) {
    total_size += 1 + 8;
  }

  // .operations_research.sat.CpSolverStatus status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // bool all_solutions_were_found = 5;
  if (this->all_solutions_were_found() != 0) {
    total_size += 1 + 1;
  }

  // double best_objective_bound = 4;
  if (!(this->best_objective_bound() <= 0 && this->best_objective_bound() >= 0)) {
    total_size += 1 + 8;
  }

  // int64 num_booleans = 10;
  if (this->num_booleans() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_num_booleans());
  }

  // int64 num_conflicts = 11;
  if (this->num_conflicts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_num_conflicts());
  }

  // int64 num_branches = 12;
  if (this->num_branches() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_num_branches());
  }

  // int64 num_binary_propagations = 13;
  if (this->num_binary_propagations() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_num_binary_propagations());
  }

  // int64 num_integer_propagations = 14;
  if (this->num_integer_propagations() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_num_integer_propagations());
  }

  // double wall_time = 15;
  if (!(this->wall_time() <= 0 && this->wall_time() >= 0)) {
    total_size += 1 + 8;
  }

  // double user_time = 16;
  if (!(this->user_time() <= 0 && this->user_time() >= 0)) {
    total_size += 2 + 8;
  }

  // double deterministic_time = 17;
  if (!(this->deterministic_time() <= 0 && this->deterministic_time() >= 0)) {
    total_size += 2 + 8;
  }

  // double primal_integral = 22;
  if (!(this->primal_integral() <= 0 && this->primal_integral() >= 0)) {
    total_size += 2 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CpSolverResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:operations_research.sat.CpSolverResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CpSolverResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CpSolverResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:operations_research.sat.CpSolverResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:operations_research.sat.CpSolverResponse)
    MergeFrom(*source);
  }
}

void CpSolverResponse::MergeFrom(const CpSolverResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:operations_research.sat.CpSolverResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  solution_.MergeFrom(from.solution_);
  solution_lower_bounds_.MergeFrom(from.solution_lower_bounds_);
  solution_upper_bounds_.MergeFrom(from.solution_upper_bounds_);
  tightened_variables_.MergeFrom(from.tightened_variables_);
  sufficient_assumptions_for_infeasibility_.MergeFrom(from.sufficient_assumptions_for_infeasibility_);
  if (from.solution_info().size() > 0) {
    _internal_set_solution_info(from._internal_solution_info());
  }
  if (!(from.objective_value() <= 0 && from.objective_value() >= 0)) {
    _internal_set_objective_value(from._internal_objective_value());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.all_solutions_were_found() != 0) {
    _internal_set_all_solutions_were_found(from._internal_all_solutions_were_found());
  }
  if (!(from.best_objective_bound() <= 0 && from.best_objective_bound() >= 0)) {
    _internal_set_best_objective_bound(from._internal_best_objective_bound());
  }
  if (from.num_booleans() != 0) {
    _internal_set_num_booleans(from._internal_num_booleans());
  }
  if (from.num_conflicts() != 0) {
    _internal_set_num_conflicts(from._internal_num_conflicts());
  }
  if (from.num_branches() != 0) {
    _internal_set_num_branches(from._internal_num_branches());
  }
  if (from.num_binary_propagations() != 0) {
    _internal_set_num_binary_propagations(from._internal_num_binary_propagations());
  }
  if (from.num_integer_propagations() != 0) {
    _internal_set_num_integer_propagations(from._internal_num_integer_propagations());
  }
  if (!(from.wall_time() <= 0 && from.wall_time() >= 0)) {
    _internal_set_wall_time(from._internal_wall_time());
  }
  if (!(from.user_time() <= 0 && from.user_time() >= 0)) {
    _internal_set_user_time(from._internal_user_time());
  }
  if (!(from.deterministic_time() <= 0 && from.deterministic_time() >= 0)) {
    _internal_set_deterministic_time(from._internal_deterministic_time());
  }
  if (!(from.primal_integral() <= 0 && from.primal_integral() >= 0)) {
    _internal_set_primal_integral(from._internal_primal_integral());
  }
}

void CpSolverResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:operations_research.sat.CpSolverResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CpSolverResponse::CopyFrom(const CpSolverResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.sat.CpSolverResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CpSolverResponse::IsInitialized() const {
  return true;
}

void CpSolverResponse::InternalSwap(CpSolverResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  solution_.InternalSwap(&other->solution_);
  solution_lower_bounds_.InternalSwap(&other->solution_lower_bounds_);
  solution_upper_bounds_.InternalSwap(&other->solution_upper_bounds_);
  tightened_variables_.InternalSwap(&other->tightened_variables_);
  sufficient_assumptions_for_infeasibility_.InternalSwap(&other->sufficient_assumptions_for_infeasibility_);
  solution_info_.Swap(&other->solution_info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CpSolverResponse, primal_integral_)
      + sizeof(CpSolverResponse::primal_integral_)
      - PROTOBUF_FIELD_OFFSET(CpSolverResponse, objective_value_)>(
          reinterpret_cast<char*>(&objective_value_),
          reinterpret_cast<char*>(&other->objective_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CpSolverResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sat
}  // namespace operations_research
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::operations_research::sat::IntegerVariableProto* Arena::CreateMaybeMessage< ::operations_research::sat::IntegerVariableProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::sat::IntegerVariableProto >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::sat::BoolArgumentProto* Arena::CreateMaybeMessage< ::operations_research::sat::BoolArgumentProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::sat::BoolArgumentProto >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::sat::IntegerArgumentProto* Arena::CreateMaybeMessage< ::operations_research::sat::IntegerArgumentProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::sat::IntegerArgumentProto >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::sat::LinearExpressionProto* Arena::CreateMaybeMessage< ::operations_research::sat::LinearExpressionProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::sat::LinearExpressionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::sat::LinearArgumentProto* Arena::CreateMaybeMessage< ::operations_research::sat::LinearArgumentProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::sat::LinearArgumentProto >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::sat::AllDifferentConstraintProto* Arena::CreateMaybeMessage< ::operations_research::sat::AllDifferentConstraintProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::sat::AllDifferentConstraintProto >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::sat::LinearConstraintProto* Arena::CreateMaybeMessage< ::operations_research::sat::LinearConstraintProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::sat::LinearConstraintProto >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::sat::ElementConstraintProto* Arena::CreateMaybeMessage< ::operations_research::sat::ElementConstraintProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::sat::ElementConstraintProto >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::sat::IntervalConstraintProto* Arena::CreateMaybeMessage< ::operations_research::sat::IntervalConstraintProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::sat::IntervalConstraintProto >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::sat::NoOverlapConstraintProto* Arena::CreateMaybeMessage< ::operations_research::sat::NoOverlapConstraintProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::sat::NoOverlapConstraintProto >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::sat::NoOverlap2DConstraintProto* Arena::CreateMaybeMessage< ::operations_research::sat::NoOverlap2DConstraintProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::sat::NoOverlap2DConstraintProto >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::sat::CumulativeConstraintProto* Arena::CreateMaybeMessage< ::operations_research::sat::CumulativeConstraintProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::sat::CumulativeConstraintProto >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::sat::ReservoirConstraintProto* Arena::CreateMaybeMessage< ::operations_research::sat::ReservoirConstraintProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::sat::ReservoirConstraintProto >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::sat::CircuitConstraintProto* Arena::CreateMaybeMessage< ::operations_research::sat::CircuitConstraintProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::sat::CircuitConstraintProto >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::sat::RoutesConstraintProto* Arena::CreateMaybeMessage< ::operations_research::sat::RoutesConstraintProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::sat::RoutesConstraintProto >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::sat::CircuitCoveringConstraintProto* Arena::CreateMaybeMessage< ::operations_research::sat::CircuitCoveringConstraintProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::sat::CircuitCoveringConstraintProto >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::sat::TableConstraintProto* Arena::CreateMaybeMessage< ::operations_research::sat::TableConstraintProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::sat::TableConstraintProto >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::sat::InverseConstraintProto* Arena::CreateMaybeMessage< ::operations_research::sat::InverseConstraintProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::sat::InverseConstraintProto >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::sat::AutomatonConstraintProto* Arena::CreateMaybeMessage< ::operations_research::sat::AutomatonConstraintProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::sat::AutomatonConstraintProto >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::sat::ConstraintProto* Arena::CreateMaybeMessage< ::operations_research::sat::ConstraintProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::sat::ConstraintProto >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::sat::CpObjectiveProto* Arena::CreateMaybeMessage< ::operations_research::sat::CpObjectiveProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::sat::CpObjectiveProto >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::sat::DecisionStrategyProto_AffineTransformation* Arena::CreateMaybeMessage< ::operations_research::sat::DecisionStrategyProto_AffineTransformation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::sat::DecisionStrategyProto_AffineTransformation >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::sat::DecisionStrategyProto* Arena::CreateMaybeMessage< ::operations_research::sat::DecisionStrategyProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::sat::DecisionStrategyProto >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::sat::PartialVariableAssignment* Arena::CreateMaybeMessage< ::operations_research::sat::PartialVariableAssignment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::sat::PartialVariableAssignment >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::sat::CpModelProto* Arena::CreateMaybeMessage< ::operations_research::sat::CpModelProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::sat::CpModelProto >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::sat::CpSolverResponse* Arena::CreateMaybeMessage< ::operations_research::sat::CpSolverResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::sat::CpSolverResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
