// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ortools/sat/sat_parameters.proto

#include "ortools/sat/sat_parameters.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace operations_research {
namespace sat {
class SatParametersDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SatParameters> _instance;
} _SatParameters_default_instance_;
}  // namespace sat
}  // namespace operations_research
static void InitDefaultsscc_info_SatParameters_ortools_2fsat_2fsat_5fparameters_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::operations_research::sat::SatParameters::_i_give_permission_to_break_this_code_default_default_restart_algorithms_.DefaultConstruct();
  *::operations_research::sat::SatParameters::_i_give_permission_to_break_this_code_default_default_restart_algorithms_.get_mutable() = std::string("LUBY_RESTART,LBD_MOVING_AVERAGE_RESTART,DL_MOVING_AVERAGE_RESTART", 65);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::operations_research::sat::SatParameters::_i_give_permission_to_break_this_code_default_default_restart_algorithms_.get_mutable());
  {
    void* ptr = &::operations_research::sat::_SatParameters_default_instance_;
    new (ptr) ::operations_research::sat::SatParameters();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::operations_research::sat::SatParameters::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SatParameters_ortools_2fsat_2fsat_5fparameters_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SatParameters_ortools_2fsat_2fsat_5fparameters_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ortools_2fsat_2fsat_5fparameters_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_ortools_2fsat_2fsat_5fparameters_2eproto[11];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ortools_2fsat_2fsat_5fparameters_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ortools_2fsat_2fsat_5fparameters_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, preferred_variable_order_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, initial_polarity_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, use_phase_saving_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, random_polarity_ratio_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, random_branches_ratio_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, use_erwa_heuristic_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, initial_variables_activity_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, also_bump_variables_in_conflict_reasons_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, minimization_algorithm_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, binary_minimization_algorithm_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, subsumption_during_conflict_analysis_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, clause_cleanup_period_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, clause_cleanup_target_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, clause_cleanup_protection_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, clause_cleanup_lbd_bound_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, clause_cleanup_ordering_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, pb_cleanup_increment_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, pb_cleanup_ratio_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, minimize_with_propagation_restart_period_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, minimize_with_propagation_num_decisions_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, variable_activity_decay_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, max_variable_activity_value_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, glucose_max_decay_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, glucose_decay_increment_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, glucose_decay_increment_period_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, clause_activity_decay_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, max_clause_activity_value_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, restart_algorithms_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, default_restart_algorithms_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, restart_period_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, restart_running_window_size_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, restart_dl_average_ratio_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, restart_lbd_average_ratio_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, use_blocking_restart_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, blocking_restart_window_size_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, blocking_restart_multiplier_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, num_conflicts_before_strategy_changes_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, strategy_change_increase_ratio_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, max_time_in_seconds_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, max_deterministic_time_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, max_number_of_conflicts_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, max_memory_in_mb_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, absolute_gap_limit_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, relative_gap_limit_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, treat_binary_clauses_separately_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, random_seed_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, log_search_progress_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, use_pb_resolution_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, minimize_reduction_during_pb_resolution_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, count_assumption_levels_in_lbd_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, presolve_bve_threshold_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, presolve_bve_clause_weight_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, presolve_probing_deterministic_time_limit_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, presolve_blocked_clause_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, presolve_use_bva_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, presolve_bva_threshold_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, max_presolve_iterations_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, cp_model_presolve_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, cp_model_postsolve_with_full_solver_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, cp_model_max_num_presolve_operations_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, cp_model_probing_level_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, cp_model_use_sat_presolve_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, use_sat_inprocessing_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, expand_element_constraints_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, expand_automaton_constraints_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, expand_table_constraints_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, merge_no_overlap_work_limit_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, merge_at_most_one_work_limit_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, presolve_substitution_level_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, use_optimization_hints_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, minimize_core_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, find_multiple_cores_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, cover_optimization_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, max_sat_assumption_order_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, max_sat_reverse_assumption_order_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, max_sat_stratification_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, use_precedences_in_disjunctive_constraint_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, use_overload_checker_in_cumulative_constraint_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, use_timetable_edge_finding_in_cumulative_constraint_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, use_disjunctive_constraint_in_cumulative_constraint_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, linearization_level_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, boolean_encoding_level_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, max_num_cuts_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, only_add_cuts_at_level_zero_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, add_knapsack_cuts_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, add_cg_cuts_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, add_mir_cuts_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, max_all_diff_cut_size_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, add_lin_max_cuts_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, max_integer_rounding_scaling_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, add_lp_constraints_lazily_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, min_orthogonality_for_lp_constraints_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, max_cut_rounds_at_level_zero_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, max_consecutive_inactive_count_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, cut_max_active_count_value_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, cut_active_count_decay_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, cut_cleanup_target_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, new_constraints_batch_size_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, search_branching_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, hint_conflict_limit_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, exploit_integer_lp_solution_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, exploit_all_lp_solution_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, exploit_best_solution_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, exploit_relaxation_solution_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, exploit_objective_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, probing_period_at_root_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, pseudo_cost_reliability_threshold_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, optimize_with_core_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, binary_search_num_conflicts_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, optimize_with_max_hs_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, enumerate_all_solutions_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, fill_tightened_domains_in_response_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, instantiate_all_variables_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, auto_detect_greater_than_at_least_one_of_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, stop_after_first_solution_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, stop_after_presolve_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, num_search_workers_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, interleave_search_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, interleave_batch_size_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, reduce_memory_usage_in_interleave_mode_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, share_objective_bounds_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, share_level_zero_bounds_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, use_lns_only_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, lns_focus_on_decision_variables_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, use_rins_lns_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, use_feasibility_pump_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, fp_rounding_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, use_relaxation_lns_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, diversify_lns_params_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, randomize_search_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, search_randomization_tolerance_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, use_optional_variables_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, use_exact_lp_reason_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, use_branching_in_lp_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, use_combined_no_overlap_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, catch_sigint_signal_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, use_implied_bounds_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, mip_max_bound_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, mip_var_scaling_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, mip_automatically_scale_variables_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, mip_wanted_precision_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, mip_max_activity_exponent_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::SatParameters, mip_check_precision_),
  1,
  47,
  64,
  4,
  3,
  7,
  13,
  8,
  48,
  60,
  65,
  49,
  50,
  5,
  74,
  6,
  68,
  69,
  92,
  93,
  51,
  52,
  55,
  56,
  57,
  53,
  54,
  ~0u,
  0,
  58,
  76,
  75,
  80,
  9,
  77,
  78,
  11,
  12,
  61,
  79,
  62,
  63,
  44,
  45,
  66,
  59,
  10,
  23,
  24,
  67,
  71,
  73,
  72,
  86,
  87,
  81,
  129,
  88,
  25,
  43,
  101,
  89,
  26,
  112,
  113,
  114,
  130,
  131,
  132,
  115,
  82,
  83,
  84,
  2,
  14,
  70,
  85,
  15,
  16,
  107,
  90,
  96,
  91,
  17,
  28,
  108,
  109,
  133,
  110,
  111,
  103,
  102,
  139,
  116,
  138,
  141,
  140,
  117,
  18,
  137,
  104,
  105,
  29,
  30,
  106,
  42,
  118,
  31,
  94,
  19,
  20,
  21,
  97,
  98,
  22,
  36,
  95,
  37,
  128,
  38,
  99,
  100,
  39,
  32,
  123,
  124,
  46,
  33,
  34,
  35,
  27,
  125,
  126,
  40,
  41,
  134,
  135,
  119,
  120,
  136,
  121,
  122,
  127,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 148, sizeof(::operations_research::sat::SatParameters)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::operations_research::sat::_SatParameters_default_instance_),
};

const char descriptor_table_protodef_ortools_2fsat_2fsat_5fparameters_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n ortools/sat/sat_parameters.proto\022\027oper"
  "ations_research.sat\"\317=\n\rSatParameters\022`\n"
  "\030preferred_variable_order\030\001 \001(\01624.operat"
  "ions_research.sat.SatParameters.Variable"
  "Order:\010IN_ORDER\022Y\n\020initial_polarity\030\002 \001("
  "\0162/.operations_research.sat.SatParameter"
  "s.Polarity:\016POLARITY_FALSE\022\036\n\020use_phase_"
  "saving\030, \001(\010:\004true\022 \n\025random_polarity_ra"
  "tio\030- \001(\001:\0010\022 \n\025random_branches_ratio\030  "
  "\001(\001:\0010\022!\n\022use_erwa_heuristic\030K \001(\010:\005fals"
  "e\022%\n\032initial_variables_activity\030L \001(\001:\0010"
  "\0226\n\'also_bump_variables_in_conflict_reas"
  "ons\030M \001(\010:\005false\022o\n\026minimization_algorit"
  "hm\030\004 \001(\0162D.operations_research.sat.SatPa"
  "rameters.ConflictMinimizationAlgorithm:\t"
  "RECURSIVE\022\202\001\n\035binary_minimization_algori"
  "thm\030\" \001(\0162@.operations_research.sat.SatP"
  "arameters.BinaryMinizationAlgorithm:\031BIN"
  "ARY_MINIMIZATION_FIRST\0222\n$subsumption_du"
  "ring_conflict_analysis\0308 \001(\010:\004true\022$\n\025cl"
  "ause_cleanup_period\030\013 \001(\005:\00510000\022$\n\025clau"
  "se_cleanup_target\030\r \001(\005:\00510000\022k\n\031clause"
  "_cleanup_protection\030: \001(\01627.operations_r"
  "esearch.sat.SatParameters.ClauseProtecti"
  "on:\017PROTECTION_NONE\022#\n\030clause_cleanup_lb"
  "d_bound\030; \001(\005:\0015\022g\n\027clause_cleanup_order"
  "ing\030< \001(\01625.operations_research.sat.SatP"
  "arameters.ClauseOrdering:\017CLAUSE_ACTIVIT"
  "Y\022!\n\024pb_cleanup_increment\030. \001(\005:\003200\022\035\n\020"
  "pb_cleanup_ratio\030/ \001(\001:\0030.5\0224\n(minimize_"
  "with_propagation_restart_period\030` \001(\005:\0021"
  "0\0225\n\'minimize_with_propagation_num_decis"
  "ions\030a \001(\005:\0041000\022$\n\027variable_activity_de"
  "cay\030\017 \001(\001:\0030.8\022+\n\033max_variable_activity_"
  "value\030\020 \001(\001:\0061e+100\022\037\n\021glucose_max_decay"
  "\030\026 \001(\001:\0040.95\022%\n\027glucose_decay_increment\030"
  "\027 \001(\001:\0040.01\022,\n\036glucose_decay_increment_p"
  "eriod\030\030 \001(\005:\0045000\022$\n\025clause_activity_dec"
  "ay\030\021 \001(\001:\0050.999\022(\n\031max_clause_activity_v"
  "alue\030\022 \001(\001:\0051e+20\022S\n\022restart_algorithms\030"
  "= \003(\01627.operations_research.sat.SatParam"
  "eters.RestartAlgorithm\022e\n\032default_restar"
  "t_algorithms\030F \001(\t:ALUBY_RESTART,LBD_MOV"
  "ING_AVERAGE_RESTART,DL_MOVING_AVERAGE_RE"
  "START\022\032\n\016restart_period\030\036 \001(\005:\00250\022\'\n\033res"
  "tart_running_window_size\030> \001(\005:\00250\022#\n\030re"
  "start_dl_average_ratio\030\? \001(\001:\0011\022$\n\031resta"
  "rt_lbd_average_ratio\030G \001(\001:\0011\022#\n\024use_blo"
  "cking_restart\030@ \001(\010:\005false\022*\n\034blocking_r"
  "estart_window_size\030A \001(\005:\0045000\022(\n\033blocki"
  "ng_restart_multiplier\030B \001(\001:\0031.4\0220\n%num_"
  "conflicts_before_strategy_changes\030D \001(\005:"
  "\0010\022)\n\036strategy_change_increase_ratio\030E \001"
  "(\001:\0010\022 \n\023max_time_in_seconds\030$ \001(\001:\003inf\022"
  "#\n\026max_deterministic_time\030C \001(\001:\003inf\0224\n\027"
  "max_number_of_conflicts\030% \001(\003:\023922337203"
  "6854775807\022\037\n\020max_memory_in_mb\030( \001(\003:\00510"
  "000\022\036\n\022absolute_gap_limit\030\237\001 \001(\001:\0010\022\036\n\022r"
  "elative_gap_limit\030\240\001 \001(\001:\0010\022-\n\037treat_bin"
  "ary_clauses_separately\030! \001(\010:\004true\022\026\n\013ra"
  "ndom_seed\030\037 \001(\005:\0011\022\"\n\023log_search_progres"
  "s\030) \001(\010:\005false\022 \n\021use_pb_resolution\030+ \001("
  "\010:\005false\0226\n\'minimize_reduction_during_pb"
  "_resolution\0300 \001(\010:\005false\022,\n\036count_assump"
  "tion_levels_in_lbd\0301 \001(\010:\004true\022#\n\026presol"
  "ve_bve_threshold\0306 \001(\005:\003500\022%\n\032presolve_"
  "bve_clause_weight\0307 \001(\005:\0013\0225\n)presolve_p"
  "robing_deterministic_time_limit\0309 \001(\001:\0023"
  "0\022%\n\027presolve_blocked_clause\030X \001(\010:\004true"
  "\022\036\n\020presolve_use_bva\030H \001(\010:\004true\022!\n\026pres"
  "olve_bva_threshold\030I \001(\005:\0011\022#\n\027max_preso"
  "lve_iterations\030\212\001 \001(\005:\0013\022\037\n\021cp_model_pre"
  "solve\030V \001(\010:\004true\0223\n#cp_model_postsolve_"
  "with_full_solver\030\242\001 \001(\010:\005false\0220\n$cp_mod"
  "el_max_num_presolve_operations\030\227\001 \001(\005:\0010"
  "\022!\n\026cp_model_probing_level\030n \001(\005:\0012\022\'\n\031c"
  "p_model_use_sat_presolve\030] \001(\010:\004true\022$\n\024"
  "use_sat_inprocessing\030\243\001 \001(\010:\005false\022)\n\032ex"
  "pand_element_constraints\030\214\001 \001(\010:\004true\022+\n"
  "\034expand_automaton_constraints\030\217\001 \001(\010:\004tr"
  "ue\022\'\n\030expand_table_constraints\030\236\001 \001(\010:\004t"
  "rue\0223\n\033merge_no_overlap_work_limit\030\221\001 \001("
  "\001:\r1000000000000\0220\n\034merge_at_most_one_wo"
  "rk_limit\030\222\001 \001(\001:\t100000000\022\'\n\033presolve_s"
  "ubstitution_level\030\223\001 \001(\005:\0011\022$\n\026use_optim"
  "ization_hints\030# \001(\010:\004true\022\033\n\rminimize_co"
  "re\0302 \001(\010:\004true\022!\n\023find_multiple_cores\030T "
  "\001(\010:\004true\022 \n\022cover_optimization\030Y \001(\010:\004t"
  "rue\022x\n\030max_sat_assumption_order\0303 \001(\0162<."
  "operations_research.sat.SatParameters.Ma"
  "xSatAssumptionOrder:\030DEFAULT_ASSUMPTION_"
  "ORDER\022/\n max_sat_reverse_assumption_orde"
  "r\0304 \001(\010:\005false\022|\n\026max_sat_stratification"
  "\0305 \001(\0162D.operations_research.sat.SatPara"
  "meters.MaxSatStratificationAlgorithm:\026ST"
  "RATIFICATION_DESCENT\0227\n)use_precedences_"
  "in_disjunctive_constraint\030J \001(\010:\004true\022<\n"
  "-use_overload_checker_in_cumulative_cons"
  "traint\030N \001(\010:\005false\022B\n3use_timetable_edg"
  "e_finding_in_cumulative_constraint\030O \001(\010"
  ":\005false\022A\n3use_disjunctive_constraint_in"
  "_cumulative_constraint\030P \001(\010:\004true\022\036\n\023li"
  "nearization_level\030Z \001(\005:\0011\022!\n\026boolean_en"
  "coding_level\030k \001(\005:\0011\022\033\n\014max_num_cuts\030[ "
  "\001(\005:\00510000\022*\n\033only_add_cuts_at_level_zer"
  "o\030\\ \001(\010:\005false\022 \n\021add_knapsack_cuts\030o \001("
  "\010:\005false\022\031\n\013add_cg_cuts\030u \001(\010:\004true\022\032\n\014a"
  "dd_mir_cuts\030x \001(\010:\004true\022!\n\025max_all_diff_"
  "cut_size\030\224\001 \001(\005:\0017\022\037\n\020add_lin_max_cuts\030\230"
  "\001 \001(\010:\004true\022)\n\034max_integer_rounding_scal"
  "ing\030w \001(\005:\003600\022\'\n\031add_lp_constraints_laz"
  "ily\030p \001(\010:\004true\0222\n$min_orthogonality_for"
  "_lp_constraints\030s \001(\001:\0040.05\022(\n\034max_cut_r"
  "ounds_at_level_zero\030\232\001 \001(\005:\0011\022+\n\036max_con"
  "secutive_inactive_count\030y \001(\005:\003100\0220\n\032cu"
  "t_max_active_count_value\030\233\001 \001(\001:\0131000000"
  "0000\022$\n\026cut_active_count_decay\030\234\001 \001(\001:\0030"
  ".8\022!\n\022cut_cleanup_target\030\235\001 \001(\005:\0041000\022&\n"
  "\032new_constraints_batch_size\030z \001(\005:\00250\022b\n"
  "\020search_branching\030R \001(\01626.operations_res"
  "earch.sat.SatParameters.SearchBranching:"
  "\020AUTOMATIC_SEARCH\022 \n\023hint_conflict_limit"
  "\030\231\001 \001(\005:\00210\022)\n\033exploit_integer_lp_soluti"
  "on\030^ \001(\010:\004true\022%\n\027exploit_all_lp_solutio"
  "n\030t \001(\010:\004true\022%\n\025exploit_best_solution\030\202"
  "\001 \001(\010:\005false\022+\n\033exploit_relaxation_solut"
  "ion\030\241\001 \001(\010:\005false\022 \n\021exploit_objective\030\203"
  "\001 \001(\010:\004true\022\"\n\026probing_period_at_root\030\216\001"
  " \001(\003:\0010\022.\n!pseudo_cost_reliability_thres"
  "hold\030{ \001(\003:\003100\022!\n\022optimize_with_core\030S "
  "\001(\010:\005false\022\'\n\033binary_search_num_conflict"
  "s\030c \001(\005:\002-1\022#\n\024optimize_with_max_hs\030U \001("
  "\010:\005false\022&\n\027enumerate_all_solutions\030W \001("
  "\010:\005false\0222\n\"fill_tightened_domains_in_re"
  "sponse\030\204\001 \001(\010:\005false\022\'\n\031instantiate_all_"
  "variables\030j \001(\010:\004true\0226\n(auto_detect_gre"
  "ater_than_at_least_one_of\030_ \001(\010:\004true\022(\n"
  "\031stop_after_first_solution\030b \001(\010:\005false\022"
  "#\n\023stop_after_presolve\030\225\001 \001(\010:\005false\022\035\n\022"
  "num_search_workers\030d \001(\005:\0011\022!\n\021interleav"
  "e_search\030\210\001 \001(\010:\005false\022!\n\025interleave_bat"
  "ch_size\030\206\001 \001(\005:\0011\0226\n&reduce_memory_usage"
  "_in_interleave_mode\030\215\001 \001(\010:\005false\022$\n\026sha"
  "re_objective_bounds\030q \001(\010:\004true\022%\n\027share"
  "_level_zero_bounds\030r \001(\010:\004true\022\033\n\014use_ln"
  "s_only\030e \001(\010:\005false\022.\n\037lns_focus_on_deci"
  "sion_variables\030i \001(\010:\005false\022\033\n\014use_rins_"
  "lns\030\201\001 \001(\010:\004true\022#\n\024use_feasibility_pump"
  "\030\244\001 \001(\010:\004true\022c\n\013fp_rounding\030\245\001 \001(\01627.op"
  "erations_research.sat.SatParameters.FPRo"
  "undingMethod:\024PROPAGATION_ASSISTED\022\"\n\022us"
  "e_relaxation_lns\030\226\001 \001(\010:\005false\022$\n\024divers"
  "ify_lns_params\030\211\001 \001(\010:\005false\022\037\n\020randomiz"
  "e_search\030g \001(\010:\005false\022)\n\036search_randomiz"
  "ation_tolerance\030h \001(\003:\0010\022$\n\026use_optional"
  "_variables\030l \001(\010:\004true\022!\n\023use_exact_lp_r"
  "eason\030m \001(\010:\004true\022#\n\023use_branching_in_lp"
  "\030\213\001 \001(\010:\005false\022\'\n\027use_combined_no_overla"
  "p\030\205\001 \001(\010:\005false\022\"\n\023catch_sigint_signal\030\207"
  "\001 \001(\010:\004true\022!\n\022use_implied_bounds\030\220\001 \001(\010"
  ":\004true\022\037\n\rmip_max_bound\030| \001(\001:\01010000000\022"
  "\032\n\017mip_var_scaling\030} \001(\001:\0011\0220\n!mip_autom"
  "atically_scale_variables\030\246\001 \001(\010:\004true\022#\n"
  "\024mip_wanted_precision\030~ \001(\001:\0051e-06\022%\n\031mi"
  "p_max_activity_exponent\030\177 \001(\005:\00253\022$\n\023mip"
  "_check_precision\030\200\001 \001(\001:\0060.0001\"H\n\rVaria"
  "bleOrder\022\014\n\010IN_ORDER\020\000\022\024\n\020IN_REVERSE_ORD"
  "ER\020\001\022\023\n\017IN_RANDOM_ORDER\020\002\"\206\001\n\010Polarity\022\021"
  "\n\rPOLARITY_TRUE\020\000\022\022\n\016POLARITY_FALSE\020\001\022\023\n"
  "\017POLARITY_RANDOM\020\002\022\032\n\026POLARITY_WEIGHTED_"
  "SIGN\020\003\022\"\n\036POLARITY_REVERSE_WEIGHTED_SIGN"
  "\020\004\"V\n\035ConflictMinimizationAlgorithm\022\010\n\004N"
  "ONE\020\000\022\n\n\006SIMPLE\020\001\022\r\n\tRECURSIVE\020\002\022\020\n\014EXPE"
  "RIMENTAL\020\003\"\340\001\n\031BinaryMinizationAlgorithm"
  "\022\032\n\026NO_BINARY_MINIMIZATION\020\000\022\035\n\031BINARY_M"
  "INIMIZATION_FIRST\020\001\0227\n3BINARY_MINIMIZATI"
  "ON_FIRST_WITH_TRANSITIVE_REDUCTION\020\004\022)\n%"
  "BINARY_MINIMIZATION_WITH_REACHABILITY\020\002\022"
  "$\n EXPERIMENTAL_BINARY_MINIMIZATION\020\003\"R\n"
  "\020ClauseProtection\022\023\n\017PROTECTION_NONE\020\000\022\025"
  "\n\021PROTECTION_ALWAYS\020\001\022\022\n\016PROTECTION_LBD\020"
  "\002\"5\n\016ClauseOrdering\022\023\n\017CLAUSE_ACTIVITY\020\000"
  "\022\016\n\nCLAUSE_LBD\020\001\"\206\001\n\020RestartAlgorithm\022\016\n"
  "\nNO_RESTART\020\000\022\020\n\014LUBY_RESTART\020\001\022\035\n\031DL_MO"
  "VING_AVERAGE_RESTART\020\002\022\036\n\032LBD_MOVING_AVE"
  "RAGE_RESTART\020\003\022\021\n\rFIXED_RESTART\020\004\"t\n\025Max"
  "SatAssumptionOrder\022\034\n\030DEFAULT_ASSUMPTION"
  "_ORDER\020\000\022\035\n\031ORDER_ASSUMPTION_BY_DEPTH\020\001\022"
  "\036\n\032ORDER_ASSUMPTION_BY_WEIGHT\020\002\"o\n\035MaxSa"
  "tStratificationAlgorithm\022\027\n\023STRATIFICATI"
  "ON_NONE\020\000\022\032\n\026STRATIFICATION_DESCENT\020\001\022\031\n"
  "\025STRATIFICATION_ASCENT\020\002\"\260\001\n\017SearchBranc"
  "hing\022\024\n\020AUTOMATIC_SEARCH\020\000\022\020\n\014FIXED_SEAR"
  "CH\020\001\022\024\n\020PORTFOLIO_SEARCH\020\002\022\r\n\tLP_SEARCH\020"
  "\003\022\026\n\022PSEUDO_COST_SEARCH\020\004\022\'\n#PORTFOLIO_W"
  "ITH_QUICK_RESTART_SEARCH\020\005\022\017\n\013HINT_SEARC"
  "H\020\006\"h\n\020FPRoundingMethod\022\023\n\017NEAREST_INTEG"
  "ER\020\000\022\016\n\nLOCK_BASED\020\001\022\025\n\021ACTIVE_LOCK_BASE"
  "D\020\003\022\030\n\024PROPAGATION_ASSISTED\020\002B\032\n\026com.goo"
  "gle.ortools.satP\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto_sccs[1] = {
  &scc_info_SatParameters_ortools_2fsat_2fsat_5fparameters_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto = {
  false, false, descriptor_table_protodef_ortools_2fsat_2fsat_5fparameters_2eproto, "ortools/sat/sat_parameters.proto", 7977,
  &descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto_once, descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto_sccs, descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_ortools_2fsat_2fsat_5fparameters_2eproto::offsets,
  file_level_metadata_ortools_2fsat_2fsat_5fparameters_2eproto, 1, file_level_enum_descriptors_ortools_2fsat_2fsat_5fparameters_2eproto, file_level_service_descriptors_ortools_2fsat_2fsat_5fparameters_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ortools_2fsat_2fsat_5fparameters_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto)), true);
namespace operations_research {
namespace sat {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SatParameters_VariableOrder_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto);
  return file_level_enum_descriptors_ortools_2fsat_2fsat_5fparameters_2eproto[0];
}
bool SatParameters_VariableOrder_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SatParameters_VariableOrder SatParameters::IN_ORDER;
constexpr SatParameters_VariableOrder SatParameters::IN_REVERSE_ORDER;
constexpr SatParameters_VariableOrder SatParameters::IN_RANDOM_ORDER;
constexpr SatParameters_VariableOrder SatParameters::VariableOrder_MIN;
constexpr SatParameters_VariableOrder SatParameters::VariableOrder_MAX;
constexpr int SatParameters::VariableOrder_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SatParameters_Polarity_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto);
  return file_level_enum_descriptors_ortools_2fsat_2fsat_5fparameters_2eproto[1];
}
bool SatParameters_Polarity_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SatParameters_Polarity SatParameters::POLARITY_TRUE;
constexpr SatParameters_Polarity SatParameters::POLARITY_FALSE;
constexpr SatParameters_Polarity SatParameters::POLARITY_RANDOM;
constexpr SatParameters_Polarity SatParameters::POLARITY_WEIGHTED_SIGN;
constexpr SatParameters_Polarity SatParameters::POLARITY_REVERSE_WEIGHTED_SIGN;
constexpr SatParameters_Polarity SatParameters::Polarity_MIN;
constexpr SatParameters_Polarity SatParameters::Polarity_MAX;
constexpr int SatParameters::Polarity_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SatParameters_ConflictMinimizationAlgorithm_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto);
  return file_level_enum_descriptors_ortools_2fsat_2fsat_5fparameters_2eproto[2];
}
bool SatParameters_ConflictMinimizationAlgorithm_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SatParameters_ConflictMinimizationAlgorithm SatParameters::NONE;
constexpr SatParameters_ConflictMinimizationAlgorithm SatParameters::SIMPLE;
constexpr SatParameters_ConflictMinimizationAlgorithm SatParameters::RECURSIVE;
constexpr SatParameters_ConflictMinimizationAlgorithm SatParameters::EXPERIMENTAL;
constexpr SatParameters_ConflictMinimizationAlgorithm SatParameters::ConflictMinimizationAlgorithm_MIN;
constexpr SatParameters_ConflictMinimizationAlgorithm SatParameters::ConflictMinimizationAlgorithm_MAX;
constexpr int SatParameters::ConflictMinimizationAlgorithm_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SatParameters_BinaryMinizationAlgorithm_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto);
  return file_level_enum_descriptors_ortools_2fsat_2fsat_5fparameters_2eproto[3];
}
bool SatParameters_BinaryMinizationAlgorithm_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SatParameters_BinaryMinizationAlgorithm SatParameters::NO_BINARY_MINIMIZATION;
constexpr SatParameters_BinaryMinizationAlgorithm SatParameters::BINARY_MINIMIZATION_FIRST;
constexpr SatParameters_BinaryMinizationAlgorithm SatParameters::BINARY_MINIMIZATION_FIRST_WITH_TRANSITIVE_REDUCTION;
constexpr SatParameters_BinaryMinizationAlgorithm SatParameters::BINARY_MINIMIZATION_WITH_REACHABILITY;
constexpr SatParameters_BinaryMinizationAlgorithm SatParameters::EXPERIMENTAL_BINARY_MINIMIZATION;
constexpr SatParameters_BinaryMinizationAlgorithm SatParameters::BinaryMinizationAlgorithm_MIN;
constexpr SatParameters_BinaryMinizationAlgorithm SatParameters::BinaryMinizationAlgorithm_MAX;
constexpr int SatParameters::BinaryMinizationAlgorithm_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SatParameters_ClauseProtection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto);
  return file_level_enum_descriptors_ortools_2fsat_2fsat_5fparameters_2eproto[4];
}
bool SatParameters_ClauseProtection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SatParameters_ClauseProtection SatParameters::PROTECTION_NONE;
constexpr SatParameters_ClauseProtection SatParameters::PROTECTION_ALWAYS;
constexpr SatParameters_ClauseProtection SatParameters::PROTECTION_LBD;
constexpr SatParameters_ClauseProtection SatParameters::ClauseProtection_MIN;
constexpr SatParameters_ClauseProtection SatParameters::ClauseProtection_MAX;
constexpr int SatParameters::ClauseProtection_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SatParameters_ClauseOrdering_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto);
  return file_level_enum_descriptors_ortools_2fsat_2fsat_5fparameters_2eproto[5];
}
bool SatParameters_ClauseOrdering_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SatParameters_ClauseOrdering SatParameters::CLAUSE_ACTIVITY;
constexpr SatParameters_ClauseOrdering SatParameters::CLAUSE_LBD;
constexpr SatParameters_ClauseOrdering SatParameters::ClauseOrdering_MIN;
constexpr SatParameters_ClauseOrdering SatParameters::ClauseOrdering_MAX;
constexpr int SatParameters::ClauseOrdering_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SatParameters_RestartAlgorithm_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto);
  return file_level_enum_descriptors_ortools_2fsat_2fsat_5fparameters_2eproto[6];
}
bool SatParameters_RestartAlgorithm_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SatParameters_RestartAlgorithm SatParameters::NO_RESTART;
constexpr SatParameters_RestartAlgorithm SatParameters::LUBY_RESTART;
constexpr SatParameters_RestartAlgorithm SatParameters::DL_MOVING_AVERAGE_RESTART;
constexpr SatParameters_RestartAlgorithm SatParameters::LBD_MOVING_AVERAGE_RESTART;
constexpr SatParameters_RestartAlgorithm SatParameters::FIXED_RESTART;
constexpr SatParameters_RestartAlgorithm SatParameters::RestartAlgorithm_MIN;
constexpr SatParameters_RestartAlgorithm SatParameters::RestartAlgorithm_MAX;
constexpr int SatParameters::RestartAlgorithm_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SatParameters_MaxSatAssumptionOrder_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto);
  return file_level_enum_descriptors_ortools_2fsat_2fsat_5fparameters_2eproto[7];
}
bool SatParameters_MaxSatAssumptionOrder_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SatParameters_MaxSatAssumptionOrder SatParameters::DEFAULT_ASSUMPTION_ORDER;
constexpr SatParameters_MaxSatAssumptionOrder SatParameters::ORDER_ASSUMPTION_BY_DEPTH;
constexpr SatParameters_MaxSatAssumptionOrder SatParameters::ORDER_ASSUMPTION_BY_WEIGHT;
constexpr SatParameters_MaxSatAssumptionOrder SatParameters::MaxSatAssumptionOrder_MIN;
constexpr SatParameters_MaxSatAssumptionOrder SatParameters::MaxSatAssumptionOrder_MAX;
constexpr int SatParameters::MaxSatAssumptionOrder_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SatParameters_MaxSatStratificationAlgorithm_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto);
  return file_level_enum_descriptors_ortools_2fsat_2fsat_5fparameters_2eproto[8];
}
bool SatParameters_MaxSatStratificationAlgorithm_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SatParameters_MaxSatStratificationAlgorithm SatParameters::STRATIFICATION_NONE;
constexpr SatParameters_MaxSatStratificationAlgorithm SatParameters::STRATIFICATION_DESCENT;
constexpr SatParameters_MaxSatStratificationAlgorithm SatParameters::STRATIFICATION_ASCENT;
constexpr SatParameters_MaxSatStratificationAlgorithm SatParameters::MaxSatStratificationAlgorithm_MIN;
constexpr SatParameters_MaxSatStratificationAlgorithm SatParameters::MaxSatStratificationAlgorithm_MAX;
constexpr int SatParameters::MaxSatStratificationAlgorithm_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SatParameters_SearchBranching_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto);
  return file_level_enum_descriptors_ortools_2fsat_2fsat_5fparameters_2eproto[9];
}
bool SatParameters_SearchBranching_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SatParameters_SearchBranching SatParameters::AUTOMATIC_SEARCH;
constexpr SatParameters_SearchBranching SatParameters::FIXED_SEARCH;
constexpr SatParameters_SearchBranching SatParameters::PORTFOLIO_SEARCH;
constexpr SatParameters_SearchBranching SatParameters::LP_SEARCH;
constexpr SatParameters_SearchBranching SatParameters::PSEUDO_COST_SEARCH;
constexpr SatParameters_SearchBranching SatParameters::PORTFOLIO_WITH_QUICK_RESTART_SEARCH;
constexpr SatParameters_SearchBranching SatParameters::HINT_SEARCH;
constexpr SatParameters_SearchBranching SatParameters::SearchBranching_MIN;
constexpr SatParameters_SearchBranching SatParameters::SearchBranching_MAX;
constexpr int SatParameters::SearchBranching_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SatParameters_FPRoundingMethod_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto);
  return file_level_enum_descriptors_ortools_2fsat_2fsat_5fparameters_2eproto[10];
}
bool SatParameters_FPRoundingMethod_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SatParameters_FPRoundingMethod SatParameters::NEAREST_INTEGER;
constexpr SatParameters_FPRoundingMethod SatParameters::LOCK_BASED;
constexpr SatParameters_FPRoundingMethod SatParameters::ACTIVE_LOCK_BASED;
constexpr SatParameters_FPRoundingMethod SatParameters::PROPAGATION_ASSISTED;
constexpr SatParameters_FPRoundingMethod SatParameters::FPRoundingMethod_MIN;
constexpr SatParameters_FPRoundingMethod SatParameters::FPRoundingMethod_MAX;
constexpr int SatParameters::FPRoundingMethod_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void SatParameters::InitAsDefaultInstance() {
}
class SatParameters::_Internal {
 public:
  using HasBits = decltype(std::declval<SatParameters>()._has_bits_);
  static void set_has_preferred_variable_order(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_initial_polarity(HasBits* has_bits) {
    (*has_bits)[1] |= 32768u;
  }
  static void set_has_use_phase_saving(HasBits* has_bits) {
    (*has_bits)[2] |= 1u;
  }
  static void set_has_random_polarity_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_random_branches_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_use_erwa_heuristic(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_initial_variables_activity(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_also_bump_variables_in_conflict_reasons(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_minimization_algorithm(HasBits* has_bits) {
    (*has_bits)[1] |= 65536u;
  }
  static void set_has_binary_minimization_algorithm(HasBits* has_bits) {
    (*has_bits)[1] |= 268435456u;
  }
  static void set_has_subsumption_during_conflict_analysis(HasBits* has_bits) {
    (*has_bits)[2] |= 2u;
  }
  static void set_has_clause_cleanup_period(HasBits* has_bits) {
    (*has_bits)[1] |= 131072u;
  }
  static void set_has_clause_cleanup_target(HasBits* has_bits) {
    (*has_bits)[1] |= 262144u;
  }
  static void set_has_clause_cleanup_protection(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_clause_cleanup_lbd_bound(HasBits* has_bits) {
    (*has_bits)[2] |= 1024u;
  }
  static void set_has_clause_cleanup_ordering(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_pb_cleanup_increment(HasBits* has_bits) {
    (*has_bits)[2] |= 16u;
  }
  static void set_has_pb_cleanup_ratio(HasBits* has_bits) {
    (*has_bits)[2] |= 32u;
  }
  static void set_has_minimize_with_propagation_restart_period(HasBits* has_bits) {
    (*has_bits)[2] |= 268435456u;
  }
  static void set_has_minimize_with_propagation_num_decisions(HasBits* has_bits) {
    (*has_bits)[2] |= 536870912u;
  }
  static void set_has_variable_activity_decay(HasBits* has_bits) {
    (*has_bits)[1] |= 524288u;
  }
  static void set_has_max_variable_activity_value(HasBits* has_bits) {
    (*has_bits)[1] |= 1048576u;
  }
  static void set_has_glucose_max_decay(HasBits* has_bits) {
    (*has_bits)[1] |= 8388608u;
  }
  static void set_has_glucose_decay_increment(HasBits* has_bits) {
    (*has_bits)[1] |= 16777216u;
  }
  static void set_has_glucose_decay_increment_period(HasBits* has_bits) {
    (*has_bits)[1] |= 33554432u;
  }
  static void set_has_clause_activity_decay(HasBits* has_bits) {
    (*has_bits)[1] |= 2097152u;
  }
  static void set_has_max_clause_activity_value(HasBits* has_bits) {
    (*has_bits)[1] |= 4194304u;
  }
  static void set_has_default_restart_algorithms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_restart_period(HasBits* has_bits) {
    (*has_bits)[1] |= 67108864u;
  }
  static void set_has_restart_running_window_size(HasBits* has_bits) {
    (*has_bits)[2] |= 4096u;
  }
  static void set_has_restart_dl_average_ratio(HasBits* has_bits) {
    (*has_bits)[2] |= 2048u;
  }
  static void set_has_restart_lbd_average_ratio(HasBits* has_bits) {
    (*has_bits)[2] |= 65536u;
  }
  static void set_has_use_blocking_restart(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_blocking_restart_window_size(HasBits* has_bits) {
    (*has_bits)[2] |= 8192u;
  }
  static void set_has_blocking_restart_multiplier(HasBits* has_bits) {
    (*has_bits)[2] |= 16384u;
  }
  static void set_has_num_conflicts_before_strategy_changes(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_strategy_change_increase_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_max_time_in_seconds(HasBits* has_bits) {
    (*has_bits)[1] |= 536870912u;
  }
  static void set_has_max_deterministic_time(HasBits* has_bits) {
    (*has_bits)[2] |= 32768u;
  }
  static void set_has_max_number_of_conflicts(HasBits* has_bits) {
    (*has_bits)[1] |= 1073741824u;
  }
  static void set_has_max_memory_in_mb(HasBits* has_bits) {
    (*has_bits)[1] |= 2147483648u;
  }
  static void set_has_absolute_gap_limit(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static void set_has_relative_gap_limit(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static void set_has_treat_binary_clauses_separately(HasBits* has_bits) {
    (*has_bits)[2] |= 4u;
  }
  static void set_has_random_seed(HasBits* has_bits) {
    (*has_bits)[1] |= 134217728u;
  }
  static void set_has_log_search_progress(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_use_pb_resolution(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_minimize_reduction_during_pb_resolution(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_count_assumption_levels_in_lbd(HasBits* has_bits) {
    (*has_bits)[2] |= 8u;
  }
  static void set_has_presolve_bve_threshold(HasBits* has_bits) {
    (*has_bits)[2] |= 128u;
  }
  static void set_has_presolve_bve_clause_weight(HasBits* has_bits) {
    (*has_bits)[2] |= 512u;
  }
  static void set_has_presolve_probing_deterministic_time_limit(HasBits* has_bits) {
    (*has_bits)[2] |= 256u;
  }
  static void set_has_presolve_blocked_clause(HasBits* has_bits) {
    (*has_bits)[2] |= 4194304u;
  }
  static void set_has_presolve_use_bva(HasBits* has_bits) {
    (*has_bits)[2] |= 8388608u;
  }
  static void set_has_presolve_bva_threshold(HasBits* has_bits) {
    (*has_bits)[2] |= 131072u;
  }
  static void set_has_max_presolve_iterations(HasBits* has_bits) {
    (*has_bits)[4] |= 2u;
  }
  static void set_has_cp_model_presolve(HasBits* has_bits) {
    (*has_bits)[2] |= 16777216u;
  }
  static void set_has_cp_model_postsolve_with_full_solver(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_cp_model_max_num_presolve_operations(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static void set_has_cp_model_probing_level(HasBits* has_bits) {
    (*has_bits)[3] |= 32u;
  }
  static void set_has_cp_model_use_sat_presolve(HasBits* has_bits) {
    (*has_bits)[2] |= 33554432u;
  }
  static void set_has_use_sat_inprocessing(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_expand_element_constraints(HasBits* has_bits) {
    (*has_bits)[3] |= 65536u;
  }
  static void set_has_expand_automaton_constraints(HasBits* has_bits) {
    (*has_bits)[3] |= 131072u;
  }
  static void set_has_expand_table_constraints(HasBits* has_bits) {
    (*has_bits)[3] |= 262144u;
  }
  static void set_has_merge_no_overlap_work_limit(HasBits* has_bits) {
    (*has_bits)[4] |= 4u;
  }
  static void set_has_merge_at_most_one_work_limit(HasBits* has_bits) {
    (*has_bits)[4] |= 8u;
  }
  static void set_has_presolve_substitution_level(HasBits* has_bits) {
    (*has_bits)[4] |= 16u;
  }
  static void set_has_use_optimization_hints(HasBits* has_bits) {
    (*has_bits)[3] |= 524288u;
  }
  static void set_has_minimize_core(HasBits* has_bits) {
    (*has_bits)[2] |= 262144u;
  }
  static void set_has_find_multiple_cores(HasBits* has_bits) {
    (*has_bits)[2] |= 524288u;
  }
  static void set_has_cover_optimization(HasBits* has_bits) {
    (*has_bits)[2] |= 1048576u;
  }
  static void set_has_max_sat_assumption_order(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_max_sat_reverse_assumption_order(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_max_sat_stratification(HasBits* has_bits) {
    (*has_bits)[2] |= 64u;
  }
  static void set_has_use_precedences_in_disjunctive_constraint(HasBits* has_bits) {
    (*has_bits)[2] |= 2097152u;
  }
  static void set_has_use_overload_checker_in_cumulative_constraint(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_use_timetable_edge_finding_in_cumulative_constraint(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_use_disjunctive_constraint_in_cumulative_constraint(HasBits* has_bits) {
    (*has_bits)[3] |= 2048u;
  }
  static void set_has_linearization_level(HasBits* has_bits) {
    (*has_bits)[2] |= 67108864u;
  }
  static void set_has_boolean_encoding_level(HasBits* has_bits) {
    (*has_bits)[3] |= 1u;
  }
  static void set_has_max_num_cuts(HasBits* has_bits) {
    (*has_bits)[2] |= 134217728u;
  }
  static void set_has_only_add_cuts_at_level_zero(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_add_knapsack_cuts(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_add_cg_cuts(HasBits* has_bits) {
    (*has_bits)[3] |= 4096u;
  }
  static void set_has_add_mir_cuts(HasBits* has_bits) {
    (*has_bits)[3] |= 8192u;
  }
  static void set_has_max_all_diff_cut_size(HasBits* has_bits) {
    (*has_bits)[4] |= 32u;
  }
  static void set_has_add_lin_max_cuts(HasBits* has_bits) {
    (*has_bits)[3] |= 16384u;
  }
  static void set_has_max_integer_rounding_scaling(HasBits* has_bits) {
    (*has_bits)[3] |= 32768u;
  }
  static void set_has_add_lp_constraints_lazily(HasBits* has_bits) {
    (*has_bits)[3] |= 128u;
  }
  static void set_has_min_orthogonality_for_lp_constraints(HasBits* has_bits) {
    (*has_bits)[3] |= 64u;
  }
  static void set_has_max_cut_rounds_at_level_zero(HasBits* has_bits) {
    (*has_bits)[4] |= 2048u;
  }
  static void set_has_max_consecutive_inactive_count(HasBits* has_bits) {
    (*has_bits)[3] |= 1048576u;
  }
  static void set_has_cut_max_active_count_value(HasBits* has_bits) {
    (*has_bits)[4] |= 1024u;
  }
  static void set_has_cut_active_count_decay(HasBits* has_bits) {
    (*has_bits)[4] |= 8192u;
  }
  static void set_has_cut_cleanup_target(HasBits* has_bits) {
    (*has_bits)[4] |= 4096u;
  }
  static void set_has_new_constraints_batch_size(HasBits* has_bits) {
    (*has_bits)[3] |= 2097152u;
  }
  static void set_has_search_branching(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_hint_conflict_limit(HasBits* has_bits) {
    (*has_bits)[4] |= 512u;
  }
  static void set_has_exploit_integer_lp_solution(HasBits* has_bits) {
    (*has_bits)[3] |= 256u;
  }
  static void set_has_exploit_all_lp_solution(HasBits* has_bits) {
    (*has_bits)[3] |= 512u;
  }
  static void set_has_exploit_best_solution(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_exploit_relaxation_solution(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_exploit_objective(HasBits* has_bits) {
    (*has_bits)[3] |= 1024u;
  }
  static void set_has_probing_period_at_root(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_pseudo_cost_reliability_threshold(HasBits* has_bits) {
    (*has_bits)[3] |= 4194304u;
  }
  static void set_has_optimize_with_core(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_binary_search_num_conflicts(HasBits* has_bits) {
    (*has_bits)[2] |= 1073741824u;
  }
  static void set_has_optimize_with_max_hs(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_enumerate_all_solutions(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_fill_tightened_domains_in_response(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_instantiate_all_variables(HasBits* has_bits) {
    (*has_bits)[3] |= 2u;
  }
  static void set_has_auto_detect_greater_than_at_least_one_of(HasBits* has_bits) {
    (*has_bits)[3] |= 4u;
  }
  static void set_has_stop_after_first_solution(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_stop_after_presolve(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_num_search_workers(HasBits* has_bits) {
    (*has_bits)[2] |= 2147483648u;
  }
  static void set_has_interleave_search(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_interleave_batch_size(HasBits* has_bits) {
    (*has_bits)[4] |= 1u;
  }
  static void set_has_reduce_memory_usage_in_interleave_mode(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_share_objective_bounds(HasBits* has_bits) {
    (*has_bits)[3] |= 8u;
  }
  static void set_has_share_level_zero_bounds(HasBits* has_bits) {
    (*has_bits)[3] |= 16u;
  }
  static void set_has_use_lns_only(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_lns_focus_on_decision_variables(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_use_rins_lns(HasBits* has_bits) {
    (*has_bits)[3] |= 134217728u;
  }
  static void set_has_use_feasibility_pump(HasBits* has_bits) {
    (*has_bits)[3] |= 268435456u;
  }
  static void set_has_fp_rounding(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static void set_has_use_relaxation_lns(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_diversify_lns_params(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_randomize_search(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_search_randomization_tolerance(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_use_optional_variables(HasBits* has_bits) {
    (*has_bits)[3] |= 536870912u;
  }
  static void set_has_use_exact_lp_reason(HasBits* has_bits) {
    (*has_bits)[3] |= 1073741824u;
  }
  static void set_has_use_branching_in_lp(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_use_combined_no_overlap(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_catch_sigint_signal(HasBits* has_bits) {
    (*has_bits)[4] |= 64u;
  }
  static void set_has_use_implied_bounds(HasBits* has_bits) {
    (*has_bits)[4] |= 128u;
  }
  static void set_has_mip_max_bound(HasBits* has_bits) {
    (*has_bits)[3] |= 8388608u;
  }
  static void set_has_mip_var_scaling(HasBits* has_bits) {
    (*has_bits)[3] |= 16777216u;
  }
  static void set_has_mip_automatically_scale_variables(HasBits* has_bits) {
    (*has_bits)[4] |= 256u;
  }
  static void set_has_mip_wanted_precision(HasBits* has_bits) {
    (*has_bits)[3] |= 33554432u;
  }
  static void set_has_mip_max_activity_exponent(HasBits* has_bits) {
    (*has_bits)[3] |= 67108864u;
  }
  static void set_has_mip_check_precision(HasBits* has_bits) {
    (*has_bits)[3] |= 2147483648u;
  }
};

::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SatParameters::_i_give_permission_to_break_this_code_default_default_restart_algorithms_;
SatParameters::SatParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  restart_algorithms_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:operations_research.sat.SatParameters)
}
SatParameters::SatParameters(const SatParameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      restart_algorithms_(from.restart_algorithms_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  default_restart_algorithms_.UnsafeSetDefault(&::operations_research::sat::SatParameters::_i_give_permission_to_break_this_code_default_default_restart_algorithms_.get());
  if (from._internal_has_default_restart_algorithms()) {
    default_restart_algorithms_.Set(&::operations_research::sat::SatParameters::_i_give_permission_to_break_this_code_default_default_restart_algorithms_.get(), from._internal_default_restart_algorithms(),
      GetArena());
  }
  ::memcpy(&preferred_variable_order_, &from.preferred_variable_order_,
    static_cast<size_t>(reinterpret_cast<char*>(&cut_active_count_decay_) -
    reinterpret_cast<char*>(&preferred_variable_order_)) + sizeof(cut_active_count_decay_));
  // @@protoc_insertion_point(copy_constructor:operations_research.sat.SatParameters)
}

void SatParameters::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SatParameters_ortools_2fsat_2fsat_5fparameters_2eproto.base);
  default_restart_algorithms_.UnsafeSetDefault(&::operations_research::sat::SatParameters::_i_give_permission_to_break_this_code_default_default_restart_algorithms_.get());
  ::memset(&preferred_variable_order_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&relative_gap_limit_) -
      reinterpret_cast<char*>(&preferred_variable_order_)) + sizeof(relative_gap_limit_));
  fp_rounding_ = 2;
  initial_polarity_ = 1;
  minimization_algorithm_ = 2;
  clause_cleanup_period_ = 10000;
  clause_cleanup_target_ = 10000;
  variable_activity_decay_ = 0.8;
  max_variable_activity_value_ = 1e+100;
  clause_activity_decay_ = 0.999;
  max_clause_activity_value_ = 1e+20;
  glucose_max_decay_ = 0.95;
  glucose_decay_increment_ = 0.01;
  glucose_decay_increment_period_ = 5000;
  restart_period_ = 50;
  random_seed_ = 1;
  binary_minimization_algorithm_ = 1;
  max_time_in_seconds_ = std::numeric_limits<double>::infinity();
  max_number_of_conflicts_ = PROTOBUF_LONGLONG(9223372036854775807);
  max_memory_in_mb_ = PROTOBUF_LONGLONG(10000);
  use_phase_saving_ = true;
  subsumption_during_conflict_analysis_ = true;
  treat_binary_clauses_separately_ = true;
  count_assumption_levels_in_lbd_ = true;
  pb_cleanup_increment_ = 200;
  pb_cleanup_ratio_ = 0.5;
  max_sat_stratification_ = 1;
  presolve_bve_threshold_ = 500;
  presolve_probing_deterministic_time_limit_ = 30;
  presolve_bve_clause_weight_ = 3;
  clause_cleanup_lbd_bound_ = 5;
  restart_dl_average_ratio_ = 1;
  restart_running_window_size_ = 50;
  blocking_restart_window_size_ = 5000;
  blocking_restart_multiplier_ = 1.4;
  max_deterministic_time_ = std::numeric_limits<double>::infinity();
  restart_lbd_average_ratio_ = 1;
  presolve_bva_threshold_ = 1;
  minimize_core_ = true;
  find_multiple_cores_ = true;
  cover_optimization_ = true;
  use_precedences_in_disjunctive_constraint_ = true;
  presolve_blocked_clause_ = true;
  presolve_use_bva_ = true;
  cp_model_presolve_ = true;
  cp_model_use_sat_presolve_ = true;
  linearization_level_ = 1;
  max_num_cuts_ = 10000;
  minimize_with_propagation_restart_period_ = 10;
  minimize_with_propagation_num_decisions_ = 1000;
  binary_search_num_conflicts_ = -1;
  num_search_workers_ = 1;
  boolean_encoding_level_ = 1;
  instantiate_all_variables_ = true;
  auto_detect_greater_than_at_least_one_of_ = true;
  share_objective_bounds_ = true;
  share_level_zero_bounds_ = true;
  cp_model_probing_level_ = 2;
  min_orthogonality_for_lp_constraints_ = 0.05;
  add_lp_constraints_lazily_ = true;
  exploit_integer_lp_solution_ = true;
  exploit_all_lp_solution_ = true;
  exploit_objective_ = true;
  use_disjunctive_constraint_in_cumulative_constraint_ = true;
  add_cg_cuts_ = true;
  add_mir_cuts_ = true;
  add_lin_max_cuts_ = true;
  max_integer_rounding_scaling_ = 600;
  expand_element_constraints_ = true;
  expand_automaton_constraints_ = true;
  expand_table_constraints_ = true;
  use_optimization_hints_ = true;
  max_consecutive_inactive_count_ = 100;
  new_constraints_batch_size_ = 50;
  pseudo_cost_reliability_threshold_ = PROTOBUF_LONGLONG(100);
  mip_max_bound_ = 10000000;
  mip_var_scaling_ = 1;
  mip_wanted_precision_ = 1e-06;
  mip_max_activity_exponent_ = 53;
  use_rins_lns_ = true;
  use_feasibility_pump_ = true;
  use_optional_variables_ = true;
  use_exact_lp_reason_ = true;
  mip_check_precision_ = 0.0001;
  interleave_batch_size_ = 1;
  max_presolve_iterations_ = 3;
  merge_no_overlap_work_limit_ = 1000000000000;
  merge_at_most_one_work_limit_ = 100000000;
  presolve_substitution_level_ = 1;
  max_all_diff_cut_size_ = 7;
  catch_sigint_signal_ = true;
  use_implied_bounds_ = true;
  mip_automatically_scale_variables_ = true;
  hint_conflict_limit_ = 10;
  cut_max_active_count_value_ = 10000000000;
  max_cut_rounds_at_level_zero_ = 1;
  cut_cleanup_target_ = 1000;
  cut_active_count_decay_ = 0.8;
}

SatParameters::~SatParameters() {
  // @@protoc_insertion_point(destructor:operations_research.sat.SatParameters)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SatParameters::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  default_restart_algorithms_.DestroyNoArena(&::operations_research::sat::SatParameters::_i_give_permission_to_break_this_code_default_default_restart_algorithms_.get());
}

void SatParameters::ArenaDtor(void* object) {
  SatParameters* _this = reinterpret_cast< SatParameters* >(object);
  (void)_this;
}
void SatParameters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SatParameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SatParameters& SatParameters::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SatParameters_ortools_2fsat_2fsat_5fparameters_2eproto.base);
  return *internal_default_instance();
}


void SatParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.sat.SatParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  restart_algorithms_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    default_restart_algorithms_.ClearToDefault(&::operations_research::sat::SatParameters::_i_give_permission_to_break_this_code_default_default_restart_algorithms_.get(), GetArena());
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&preferred_variable_order_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&use_erwa_heuristic_) -
        reinterpret_cast<char*>(&preferred_variable_order_)) + sizeof(use_erwa_heuristic_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&also_bump_variables_in_conflict_reasons_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&use_overload_checker_in_cumulative_constraint_) -
        reinterpret_cast<char*>(&also_bump_variables_in_conflict_reasons_)) + sizeof(use_overload_checker_in_cumulative_constraint_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&use_timetable_edge_finding_in_cumulative_constraint_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&use_pb_resolution_) -
        reinterpret_cast<char*>(&use_timetable_edge_finding_in_cumulative_constraint_)) + sizeof(use_pb_resolution_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&minimize_reduction_during_pb_resolution_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&optimize_with_core_) -
        reinterpret_cast<char*>(&minimize_reduction_during_pb_resolution_)) + sizeof(optimize_with_core_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&lns_focus_on_decision_variables_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&use_lns_only_) -
        reinterpret_cast<char*>(&lns_focus_on_decision_variables_)) + sizeof(use_lns_only_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&use_branching_in_lp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&relative_gap_limit_) -
        reinterpret_cast<char*>(&use_branching_in_lp_)) + sizeof(relative_gap_limit_));
    fp_rounding_ = 2;
    initial_polarity_ = 1;
  }
  if (cached_has_bits & 0x00ff0000u) {
    minimization_algorithm_ = 2;
    clause_cleanup_period_ = 10000;
    clause_cleanup_target_ = 10000;
    variable_activity_decay_ = 0.8;
    max_variable_activity_value_ = 1e+100;
    clause_activity_decay_ = 0.999;
    max_clause_activity_value_ = 1e+20;
    glucose_max_decay_ = 0.95;
  }
  if (cached_has_bits & 0xff000000u) {
    glucose_decay_increment_ = 0.01;
    glucose_decay_increment_period_ = 5000;
    restart_period_ = 50;
    random_seed_ = 1;
    binary_minimization_algorithm_ = 1;
    max_time_in_seconds_ = std::numeric_limits<double>::infinity();
    max_number_of_conflicts_ = PROTOBUF_LONGLONG(9223372036854775807);
    max_memory_in_mb_ = PROTOBUF_LONGLONG(10000);
  }
  cached_has_bits = _has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    use_phase_saving_ = true;
    subsumption_during_conflict_analysis_ = true;
    treat_binary_clauses_separately_ = true;
    count_assumption_levels_in_lbd_ = true;
    pb_cleanup_increment_ = 200;
    pb_cleanup_ratio_ = 0.5;
    max_sat_stratification_ = 1;
    presolve_bve_threshold_ = 500;
  }
  if (cached_has_bits & 0x0000ff00u) {
    presolve_probing_deterministic_time_limit_ = 30;
    presolve_bve_clause_weight_ = 3;
    clause_cleanup_lbd_bound_ = 5;
    restart_dl_average_ratio_ = 1;
    restart_running_window_size_ = 50;
    blocking_restart_window_size_ = 5000;
    blocking_restart_multiplier_ = 1.4;
    max_deterministic_time_ = std::numeric_limits<double>::infinity();
  }
  if (cached_has_bits & 0x00ff0000u) {
    restart_lbd_average_ratio_ = 1;
    presolve_bva_threshold_ = 1;
    minimize_core_ = true;
    find_multiple_cores_ = true;
    cover_optimization_ = true;
    use_precedences_in_disjunctive_constraint_ = true;
    presolve_blocked_clause_ = true;
    presolve_use_bva_ = true;
  }
  if (cached_has_bits & 0xff000000u) {
    cp_model_presolve_ = true;
    cp_model_use_sat_presolve_ = true;
    linearization_level_ = 1;
    max_num_cuts_ = 10000;
    minimize_with_propagation_restart_period_ = 10;
    minimize_with_propagation_num_decisions_ = 1000;
    binary_search_num_conflicts_ = -1;
    num_search_workers_ = 1;
  }
  cached_has_bits = _has_bits_[3];
  if (cached_has_bits & 0x000000ffu) {
    boolean_encoding_level_ = 1;
    instantiate_all_variables_ = true;
    auto_detect_greater_than_at_least_one_of_ = true;
    share_objective_bounds_ = true;
    share_level_zero_bounds_ = true;
    cp_model_probing_level_ = 2;
    min_orthogonality_for_lp_constraints_ = 0.05;
    add_lp_constraints_lazily_ = true;
  }
  if (cached_has_bits & 0x0000ff00u) {
    exploit_integer_lp_solution_ = true;
    exploit_all_lp_solution_ = true;
    exploit_objective_ = true;
    use_disjunctive_constraint_in_cumulative_constraint_ = true;
    add_cg_cuts_ = true;
    add_mir_cuts_ = true;
    add_lin_max_cuts_ = true;
    max_integer_rounding_scaling_ = 600;
  }
  if (cached_has_bits & 0x00ff0000u) {
    expand_element_constraints_ = true;
    expand_automaton_constraints_ = true;
    expand_table_constraints_ = true;
    use_optimization_hints_ = true;
    max_consecutive_inactive_count_ = 100;
    new_constraints_batch_size_ = 50;
    pseudo_cost_reliability_threshold_ = PROTOBUF_LONGLONG(100);
    mip_max_bound_ = 10000000;
  }
  if (cached_has_bits & 0xff000000u) {
    mip_var_scaling_ = 1;
    mip_wanted_precision_ = 1e-06;
    mip_max_activity_exponent_ = 53;
    use_rins_lns_ = true;
    use_feasibility_pump_ = true;
    use_optional_variables_ = true;
    use_exact_lp_reason_ = true;
    mip_check_precision_ = 0.0001;
  }
  cached_has_bits = _has_bits_[4];
  if (cached_has_bits & 0x000000ffu) {
    interleave_batch_size_ = 1;
    max_presolve_iterations_ = 3;
    merge_no_overlap_work_limit_ = 1000000000000;
    merge_at_most_one_work_limit_ = 100000000;
    presolve_substitution_level_ = 1;
    max_all_diff_cut_size_ = 7;
    catch_sigint_signal_ = true;
    use_implied_bounds_ = true;
  }
  if (cached_has_bits & 0x00003f00u) {
    mip_automatically_scale_variables_ = true;
    hint_conflict_limit_ = 10;
    cut_max_active_count_value_ = 10000000000;
    max_cut_rounds_at_level_zero_ = 1;
    cut_cleanup_target_ = 1000;
    cut_active_count_decay_ = 0.8;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SatParameters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .operations_research.sat.SatParameters.VariableOrder preferred_variable_order = 1 [default = IN_ORDER];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::operations_research::sat::SatParameters_VariableOrder_IsValid(val))) {
            _internal_set_preferred_variable_order(static_cast<::operations_research::sat::SatParameters_VariableOrder>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .operations_research.sat.SatParameters.Polarity initial_polarity = 2 [default = POLARITY_FALSE];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::operations_research::sat::SatParameters_Polarity_IsValid(val))) {
            _internal_set_initial_polarity(static_cast<::operations_research::sat::SatParameters_Polarity>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .operations_research.sat.SatParameters.ConflictMinimizationAlgorithm minimization_algorithm = 4 [default = RECURSIVE];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::operations_research::sat::SatParameters_ConflictMinimizationAlgorithm_IsValid(val))) {
            _internal_set_minimization_algorithm(static_cast<::operations_research::sat::SatParameters_ConflictMinimizationAlgorithm>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 clause_cleanup_period = 11 [default = 10000];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_clause_cleanup_period(&_has_bits_);
          clause_cleanup_period_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 clause_cleanup_target = 13 [default = 10000];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_clause_cleanup_target(&_has_bits_);
          clause_cleanup_target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double variable_activity_decay = 15 [default = 0.8];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          _Internal::set_has_variable_activity_decay(&_has_bits_);
          variable_activity_decay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max_variable_activity_value = 16 [default = 1e+100];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          _Internal::set_has_max_variable_activity_value(&_has_bits_);
          max_variable_activity_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double clause_activity_decay = 17 [default = 0.999];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          _Internal::set_has_clause_activity_decay(&_has_bits_);
          clause_activity_decay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max_clause_activity_value = 18 [default = 1e+20];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          _Internal::set_has_max_clause_activity_value(&_has_bits_);
          max_clause_activity_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double glucose_max_decay = 22 [default = 0.95];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 177)) {
          _Internal::set_has_glucose_max_decay(&_has_bits_);
          glucose_max_decay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double glucose_decay_increment = 23 [default = 0.01];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 185)) {
          _Internal::set_has_glucose_decay_increment(&_has_bits_);
          glucose_decay_increment_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 glucose_decay_increment_period = 24 [default = 5000];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_glucose_decay_increment_period(&_has_bits_);
          glucose_decay_increment_period_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 restart_period = 30 [default = 50];
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_restart_period(&_has_bits_);
          restart_period_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 random_seed = 31 [default = 1];
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_random_seed(&_has_bits_);
          random_seed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double random_branches_ratio = 32 [default = 0];
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 1)) {
          _Internal::set_has_random_branches_ratio(&_has_bits_);
          random_branches_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool treat_binary_clauses_separately = 33 [default = true];
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_treat_binary_clauses_separately(&_has_bits_);
          treat_binary_clauses_separately_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .operations_research.sat.SatParameters.BinaryMinizationAlgorithm binary_minimization_algorithm = 34 [default = BINARY_MINIMIZATION_FIRST];
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::operations_research::sat::SatParameters_BinaryMinizationAlgorithm_IsValid(val))) {
            _internal_set_binary_minimization_algorithm(static_cast<::operations_research::sat::SatParameters_BinaryMinizationAlgorithm>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(34, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool use_optimization_hints = 35 [default = true];
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_use_optimization_hints(&_has_bits_);
          use_optimization_hints_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double max_time_in_seconds = 36 [default = inf];
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_max_time_in_seconds(&_has_bits_);
          max_time_in_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int64 max_number_of_conflicts = 37 [default = 9223372036854775807];
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_max_number_of_conflicts(&_has_bits_);
          max_number_of_conflicts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 max_memory_in_mb = 40 [default = 10000];
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_max_memory_in_mb(&_has_bits_);
          max_memory_in_mb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool log_search_progress = 41 [default = false];
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_log_search_progress(&_has_bits_);
          log_search_progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_pb_resolution = 43 [default = false];
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_use_pb_resolution(&_has_bits_);
          use_pb_resolution_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_phase_saving = 44 [default = true];
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_use_phase_saving(&_has_bits_);
          use_phase_saving_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double random_polarity_ratio = 45 [default = 0];
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_random_polarity_ratio(&_has_bits_);
          random_polarity_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 pb_cleanup_increment = 46 [default = 200];
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_pb_cleanup_increment(&_has_bits_);
          pb_cleanup_increment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double pb_cleanup_ratio = 47 [default = 0.5];
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          _Internal::set_has_pb_cleanup_ratio(&_has_bits_);
          pb_cleanup_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool minimize_reduction_during_pb_resolution = 48 [default = false];
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_minimize_reduction_during_pb_resolution(&_has_bits_);
          minimize_reduction_during_pb_resolution_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool count_assumption_levels_in_lbd = 49 [default = true];
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_count_assumption_levels_in_lbd(&_has_bits_);
          count_assumption_levels_in_lbd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool minimize_core = 50 [default = true];
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_minimize_core(&_has_bits_);
          minimize_core_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .operations_research.sat.SatParameters.MaxSatAssumptionOrder max_sat_assumption_order = 51 [default = DEFAULT_ASSUMPTION_ORDER];
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::operations_research::sat::SatParameters_MaxSatAssumptionOrder_IsValid(val))) {
            _internal_set_max_sat_assumption_order(static_cast<::operations_research::sat::SatParameters_MaxSatAssumptionOrder>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(51, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool max_sat_reverse_assumption_order = 52 [default = false];
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_max_sat_reverse_assumption_order(&_has_bits_);
          max_sat_reverse_assumption_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .operations_research.sat.SatParameters.MaxSatStratificationAlgorithm max_sat_stratification = 53 [default = STRATIFICATION_DESCENT];
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::operations_research::sat::SatParameters_MaxSatStratificationAlgorithm_IsValid(val))) {
            _internal_set_max_sat_stratification(static_cast<::operations_research::sat::SatParameters_MaxSatStratificationAlgorithm>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(53, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 presolve_bve_threshold = 54 [default = 500];
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_presolve_bve_threshold(&_has_bits_);
          presolve_bve_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 presolve_bve_clause_weight = 55 [default = 3];
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_presolve_bve_clause_weight(&_has_bits_);
          presolve_bve_clause_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool subsumption_during_conflict_analysis = 56 [default = true];
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_subsumption_during_conflict_analysis(&_has_bits_);
          subsumption_during_conflict_analysis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double presolve_probing_deterministic_time_limit = 57 [default = 30];
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 201)) {
          _Internal::set_has_presolve_probing_deterministic_time_limit(&_has_bits_);
          presolve_probing_deterministic_time_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .operations_research.sat.SatParameters.ClauseProtection clause_cleanup_protection = 58 [default = PROTECTION_NONE];
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::operations_research::sat::SatParameters_ClauseProtection_IsValid(val))) {
            _internal_set_clause_cleanup_protection(static_cast<::operations_research::sat::SatParameters_ClauseProtection>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(58, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 clause_cleanup_lbd_bound = 59 [default = 5];
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_clause_cleanup_lbd_bound(&_has_bits_);
          clause_cleanup_lbd_bound_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .operations_research.sat.SatParameters.ClauseOrdering clause_cleanup_ordering = 60 [default = CLAUSE_ACTIVITY];
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::operations_research::sat::SatParameters_ClauseOrdering_IsValid(val))) {
            _internal_set_clause_cleanup_ordering(static_cast<::operations_research::sat::SatParameters_ClauseOrdering>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(60, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .operations_research.sat.SatParameters.RestartAlgorithm restart_algorithms = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          ptr -= 2;
          do {
            ptr += 2;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::operations_research::sat::SatParameters_RestartAlgorithm_IsValid(val))) {
              _internal_add_restart_algorithms(static_cast<::operations_research::sat::SatParameters_RestartAlgorithm>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(61, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<488>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_restart_algorithms(), ptr, ctx, ::operations_research::sat::SatParameters_RestartAlgorithm_IsValid, &_internal_metadata_, 61);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 restart_running_window_size = 62 [default = 50];
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_restart_running_window_size(&_has_bits_);
          restart_running_window_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double restart_dl_average_ratio = 63 [default = 1];
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 249)) {
          _Internal::set_has_restart_dl_average_ratio(&_has_bits_);
          restart_dl_average_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool use_blocking_restart = 64 [default = false];
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_use_blocking_restart(&_has_bits_);
          use_blocking_restart_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 blocking_restart_window_size = 65 [default = 5000];
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_blocking_restart_window_size(&_has_bits_);
          blocking_restart_window_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double blocking_restart_multiplier = 66 [default = 1.4];
      case 66:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_blocking_restart_multiplier(&_has_bits_);
          blocking_restart_multiplier_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max_deterministic_time = 67 [default = inf];
      case 67:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_max_deterministic_time(&_has_bits_);
          max_deterministic_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 num_conflicts_before_strategy_changes = 68 [default = 0];
      case 68:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_num_conflicts_before_strategy_changes(&_has_bits_);
          num_conflicts_before_strategy_changes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double strategy_change_increase_ratio = 69 [default = 0];
      case 69:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_strategy_change_increase_ratio(&_has_bits_);
          strategy_change_increase_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional string default_restart_algorithms = 70 [default = "LUBY_RESTART,LBD_MOVING_AVERAGE_RESTART,DL_MOVING_AVERAGE_RESTART"];
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_default_restart_algorithms();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "operations_research.sat.SatParameters.default_restart_algorithms");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double restart_lbd_average_ratio = 71 [default = 1];
      case 71:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_restart_lbd_average_ratio(&_has_bits_);
          restart_lbd_average_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool presolve_use_bva = 72 [default = true];
      case 72:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_presolve_use_bva(&_has_bits_);
          presolve_use_bva_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 presolve_bva_threshold = 73 [default = 1];
      case 73:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_presolve_bva_threshold(&_has_bits_);
          presolve_bva_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_precedences_in_disjunctive_constraint = 74 [default = true];
      case 74:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_use_precedences_in_disjunctive_constraint(&_has_bits_);
          use_precedences_in_disjunctive_constraint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_erwa_heuristic = 75 [default = false];
      case 75:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_use_erwa_heuristic(&_has_bits_);
          use_erwa_heuristic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double initial_variables_activity = 76 [default = 0];
      case 76:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_initial_variables_activity(&_has_bits_);
          initial_variables_activity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool also_bump_variables_in_conflict_reasons = 77 [default = false];
      case 77:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_also_bump_variables_in_conflict_reasons(&_has_bits_);
          also_bump_variables_in_conflict_reasons_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_overload_checker_in_cumulative_constraint = 78 [default = false];
      case 78:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_use_overload_checker_in_cumulative_constraint(&_has_bits_);
          use_overload_checker_in_cumulative_constraint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_timetable_edge_finding_in_cumulative_constraint = 79 [default = false];
      case 79:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_use_timetable_edge_finding_in_cumulative_constraint(&_has_bits_);
          use_timetable_edge_finding_in_cumulative_constraint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_disjunctive_constraint_in_cumulative_constraint = 80 [default = true];
      case 80:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_use_disjunctive_constraint_in_cumulative_constraint(&_has_bits_);
          use_disjunctive_constraint_in_cumulative_constraint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .operations_research.sat.SatParameters.SearchBranching search_branching = 82 [default = AUTOMATIC_SEARCH];
      case 82:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::operations_research::sat::SatParameters_SearchBranching_IsValid(val))) {
            _internal_set_search_branching(static_cast<::operations_research::sat::SatParameters_SearchBranching>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(82, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool optimize_with_core = 83 [default = false];
      case 83:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_optimize_with_core(&_has_bits_);
          optimize_with_core_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool find_multiple_cores = 84 [default = true];
      case 84:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_find_multiple_cores(&_has_bits_);
          find_multiple_cores_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool optimize_with_max_hs = 85 [default = false];
      case 85:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_optimize_with_max_hs(&_has_bits_);
          optimize_with_max_hs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool cp_model_presolve = 86 [default = true];
      case 86:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_cp_model_presolve(&_has_bits_);
          cp_model_presolve_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enumerate_all_solutions = 87 [default = false];
      case 87:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_enumerate_all_solutions(&_has_bits_);
          enumerate_all_solutions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool presolve_blocked_clause = 88 [default = true];
      case 88:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_presolve_blocked_clause(&_has_bits_);
          presolve_blocked_clause_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool cover_optimization = 89 [default = true];
      case 89:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_cover_optimization(&_has_bits_);
          cover_optimization_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 linearization_level = 90 [default = 1];
      case 90:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_linearization_level(&_has_bits_);
          linearization_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_num_cuts = 91 [default = 10000];
      case 91:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_max_num_cuts(&_has_bits_);
          max_num_cuts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool only_add_cuts_at_level_zero = 92 [default = false];
      case 92:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_only_add_cuts_at_level_zero(&_has_bits_);
          only_add_cuts_at_level_zero_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool cp_model_use_sat_presolve = 93 [default = true];
      case 93:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_cp_model_use_sat_presolve(&_has_bits_);
          cp_model_use_sat_presolve_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool exploit_integer_lp_solution = 94 [default = true];
      case 94:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_exploit_integer_lp_solution(&_has_bits_);
          exploit_integer_lp_solution_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool auto_detect_greater_than_at_least_one_of = 95 [default = true];
      case 95:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_auto_detect_greater_than_at_least_one_of(&_has_bits_);
          auto_detect_greater_than_at_least_one_of_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 minimize_with_propagation_restart_period = 96 [default = 10];
      case 96:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_minimize_with_propagation_restart_period(&_has_bits_);
          minimize_with_propagation_restart_period_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 minimize_with_propagation_num_decisions = 97 [default = 1000];
      case 97:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_minimize_with_propagation_num_decisions(&_has_bits_);
          minimize_with_propagation_num_decisions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool stop_after_first_solution = 98 [default = false];
      case 98:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_stop_after_first_solution(&_has_bits_);
          stop_after_first_solution_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 binary_search_num_conflicts = 99 [default = -1];
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_binary_search_num_conflicts(&_has_bits_);
          binary_search_num_conflicts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_search_workers = 100 [default = 1];
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_num_search_workers(&_has_bits_);
          num_search_workers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_lns_only = 101 [default = false];
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_use_lns_only(&_has_bits_);
          use_lns_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool randomize_search = 103 [default = false];
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_randomize_search(&_has_bits_);
          randomize_search_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 search_randomization_tolerance = 104 [default = 0];
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_search_randomization_tolerance(&_has_bits_);
          search_randomization_tolerance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool lns_focus_on_decision_variables = 105 [default = false];
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_lns_focus_on_decision_variables(&_has_bits_);
          lns_focus_on_decision_variables_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool instantiate_all_variables = 106 [default = true];
      case 106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_instantiate_all_variables(&_has_bits_);
          instantiate_all_variables_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 boolean_encoding_level = 107 [default = 1];
      case 107:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_boolean_encoding_level(&_has_bits_);
          boolean_encoding_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_optional_variables = 108 [default = true];
      case 108:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_use_optional_variables(&_has_bits_);
          use_optional_variables_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_exact_lp_reason = 109 [default = true];
      case 109:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_use_exact_lp_reason(&_has_bits_);
          use_exact_lp_reason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 cp_model_probing_level = 110 [default = 2];
      case 110:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_cp_model_probing_level(&_has_bits_);
          cp_model_probing_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool add_knapsack_cuts = 111 [default = false];
      case 111:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_add_knapsack_cuts(&_has_bits_);
          add_knapsack_cuts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool add_lp_constraints_lazily = 112 [default = true];
      case 112:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_add_lp_constraints_lazily(&_has_bits_);
          add_lp_constraints_lazily_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool share_objective_bounds = 113 [default = true];
      case 113:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_share_objective_bounds(&_has_bits_);
          share_objective_bounds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool share_level_zero_bounds = 114 [default = true];
      case 114:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_share_level_zero_bounds(&_has_bits_);
          share_level_zero_bounds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double min_orthogonality_for_lp_constraints = 115 [default = 0.05];
      case 115:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 153)) {
          _Internal::set_has_min_orthogonality_for_lp_constraints(&_has_bits_);
          min_orthogonality_for_lp_constraints_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool exploit_all_lp_solution = 116 [default = true];
      case 116:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_exploit_all_lp_solution(&_has_bits_);
          exploit_all_lp_solution_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool add_cg_cuts = 117 [default = true];
      case 117:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_add_cg_cuts(&_has_bits_);
          add_cg_cuts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_integer_rounding_scaling = 119 [default = 600];
      case 119:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_max_integer_rounding_scaling(&_has_bits_);
          max_integer_rounding_scaling_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool add_mir_cuts = 120 [default = true];
      case 120:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_add_mir_cuts(&_has_bits_);
          add_mir_cuts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_consecutive_inactive_count = 121 [default = 100];
      case 121:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_max_consecutive_inactive_count(&_has_bits_);
          max_consecutive_inactive_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 new_constraints_batch_size = 122 [default = 50];
      case 122:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_new_constraints_batch_size(&_has_bits_);
          new_constraints_batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 pseudo_cost_reliability_threshold = 123 [default = 100];
      case 123:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_pseudo_cost_reliability_threshold(&_has_bits_);
          pseudo_cost_reliability_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double mip_max_bound = 124 [default = 10000000];
      case 124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 225)) {
          _Internal::set_has_mip_max_bound(&_has_bits_);
          mip_max_bound_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double mip_var_scaling = 125 [default = 1];
      case 125:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 233)) {
          _Internal::set_has_mip_var_scaling(&_has_bits_);
          mip_var_scaling_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double mip_wanted_precision = 126 [default = 1e-06];
      case 126:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 241)) {
          _Internal::set_has_mip_wanted_precision(&_has_bits_);
          mip_wanted_precision_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 mip_max_activity_exponent = 127 [default = 53];
      case 127:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_mip_max_activity_exponent(&_has_bits_);
          mip_max_activity_exponent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double mip_check_precision = 128 [default = 0.0001];
      case 128:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 1)) {
          _Internal::set_has_mip_check_precision(&_has_bits_);
          mip_check_precision_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool use_rins_lns = 129 [default = true];
      case 129:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_use_rins_lns(&_has_bits_);
          use_rins_lns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool exploit_best_solution = 130 [default = false];
      case 130:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_exploit_best_solution(&_has_bits_);
          exploit_best_solution_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool exploit_objective = 131 [default = true];
      case 131:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_exploit_objective(&_has_bits_);
          exploit_objective_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool fill_tightened_domains_in_response = 132 [default = false];
      case 132:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_fill_tightened_domains_in_response(&_has_bits_);
          fill_tightened_domains_in_response_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_combined_no_overlap = 133 [default = false];
      case 133:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_use_combined_no_overlap(&_has_bits_);
          use_combined_no_overlap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 interleave_batch_size = 134 [default = 1];
      case 134:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_interleave_batch_size(&_has_bits_);
          interleave_batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool catch_sigint_signal = 135 [default = true];
      case 135:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_catch_sigint_signal(&_has_bits_);
          catch_sigint_signal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool interleave_search = 136 [default = false];
      case 136:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_interleave_search(&_has_bits_);
          interleave_search_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool diversify_lns_params = 137 [default = false];
      case 137:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_diversify_lns_params(&_has_bits_);
          diversify_lns_params_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_presolve_iterations = 138 [default = 3];
      case 138:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_max_presolve_iterations(&_has_bits_);
          max_presolve_iterations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_branching_in_lp = 139 [default = false];
      case 139:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_use_branching_in_lp(&_has_bits_);
          use_branching_in_lp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool expand_element_constraints = 140 [default = true];
      case 140:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_expand_element_constraints(&_has_bits_);
          expand_element_constraints_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool reduce_memory_usage_in_interleave_mode = 141 [default = false];
      case 141:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_reduce_memory_usage_in_interleave_mode(&_has_bits_);
          reduce_memory_usage_in_interleave_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 probing_period_at_root = 142 [default = 0];
      case 142:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_probing_period_at_root(&_has_bits_);
          probing_period_at_root_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool expand_automaton_constraints = 143 [default = true];
      case 143:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_expand_automaton_constraints(&_has_bits_);
          expand_automaton_constraints_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_implied_bounds = 144 [default = true];
      case 144:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_use_implied_bounds(&_has_bits_);
          use_implied_bounds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double merge_no_overlap_work_limit = 145 [default = 1000000000000];
      case 145:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          _Internal::set_has_merge_no_overlap_work_limit(&_has_bits_);
          merge_no_overlap_work_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double merge_at_most_one_work_limit = 146 [default = 100000000];
      case 146:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          _Internal::set_has_merge_at_most_one_work_limit(&_has_bits_);
          merge_at_most_one_work_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 presolve_substitution_level = 147 [default = 1];
      case 147:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_presolve_substitution_level(&_has_bits_);
          presolve_substitution_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_all_diff_cut_size = 148 [default = 7];
      case 148:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_max_all_diff_cut_size(&_has_bits_);
          max_all_diff_cut_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool stop_after_presolve = 149 [default = false];
      case 149:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_stop_after_presolve(&_has_bits_);
          stop_after_presolve_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_relaxation_lns = 150 [default = false];
      case 150:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_use_relaxation_lns(&_has_bits_);
          use_relaxation_lns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 cp_model_max_num_presolve_operations = 151 [default = 0];
      case 151:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_cp_model_max_num_presolve_operations(&_has_bits_);
          cp_model_max_num_presolve_operations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool add_lin_max_cuts = 152 [default = true];
      case 152:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_add_lin_max_cuts(&_has_bits_);
          add_lin_max_cuts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 hint_conflict_limit = 153 [default = 10];
      case 153:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_hint_conflict_limit(&_has_bits_);
          hint_conflict_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_cut_rounds_at_level_zero = 154 [default = 1];
      case 154:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_max_cut_rounds_at_level_zero(&_has_bits_);
          max_cut_rounds_at_level_zero_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double cut_max_active_count_value = 155 [default = 10000000000];
      case 155:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 217)) {
          _Internal::set_has_cut_max_active_count_value(&_has_bits_);
          cut_max_active_count_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double cut_active_count_decay = 156 [default = 0.8];
      case 156:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 225)) {
          _Internal::set_has_cut_active_count_decay(&_has_bits_);
          cut_active_count_decay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 cut_cleanup_target = 157 [default = 1000];
      case 157:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_cut_cleanup_target(&_has_bits_);
          cut_cleanup_target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool expand_table_constraints = 158 [default = true];
      case 158:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_expand_table_constraints(&_has_bits_);
          expand_table_constraints_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double absolute_gap_limit = 159 [default = 0];
      case 159:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 249)) {
          _Internal::set_has_absolute_gap_limit(&_has_bits_);
          absolute_gap_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double relative_gap_limit = 160 [default = 0];
      case 160:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 1)) {
          _Internal::set_has_relative_gap_limit(&_has_bits_);
          relative_gap_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool exploit_relaxation_solution = 161 [default = false];
      case 161:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_exploit_relaxation_solution(&_has_bits_);
          exploit_relaxation_solution_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool cp_model_postsolve_with_full_solver = 162 [default = false];
      case 162:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_cp_model_postsolve_with_full_solver(&_has_bits_);
          cp_model_postsolve_with_full_solver_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_sat_inprocessing = 163 [default = false];
      case 163:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_use_sat_inprocessing(&_has_bits_);
          use_sat_inprocessing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_feasibility_pump = 164 [default = true];
      case 164:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_use_feasibility_pump(&_has_bits_);
          use_feasibility_pump_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .operations_research.sat.SatParameters.FPRoundingMethod fp_rounding = 165 [default = PROPAGATION_ASSISTED];
      case 165:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::operations_research::sat::SatParameters_FPRoundingMethod_IsValid(val))) {
            _internal_set_fp_rounding(static_cast<::operations_research::sat::SatParameters_FPRoundingMethod>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(165, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool mip_automatically_scale_variables = 166 [default = true];
      case 166:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_mip_automatically_scale_variables(&_has_bits_);
          mip_automatically_scale_variables_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SatParameters::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.sat.SatParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .operations_research.sat.SatParameters.VariableOrder preferred_variable_order = 1 [default = IN_ORDER];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_preferred_variable_order(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .operations_research.sat.SatParameters.Polarity initial_polarity = 2 [default = POLARITY_FALSE];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_initial_polarity(), target);
  }

  // optional .operations_research.sat.SatParameters.ConflictMinimizationAlgorithm minimization_algorithm = 4 [default = RECURSIVE];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_minimization_algorithm(), target);
  }

  // optional int32 clause_cleanup_period = 11 [default = 10000];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_clause_cleanup_period(), target);
  }

  // optional int32 clause_cleanup_target = 13 [default = 10000];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_clause_cleanup_target(), target);
  }

  // optional double variable_activity_decay = 15 [default = 0.8];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_variable_activity_decay(), target);
  }

  // optional double max_variable_activity_value = 16 [default = 1e+100];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_max_variable_activity_value(), target);
  }

  // optional double clause_activity_decay = 17 [default = 0.999];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_clause_activity_decay(), target);
  }

  // optional double max_clause_activity_value = 18 [default = 1e+20];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(18, this->_internal_max_clause_activity_value(), target);
  }

  // optional double glucose_max_decay = 22 [default = 0.95];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(22, this->_internal_glucose_max_decay(), target);
  }

  // optional double glucose_decay_increment = 23 [default = 0.01];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(23, this->_internal_glucose_decay_increment(), target);
  }

  // optional int32 glucose_decay_increment_period = 24 [default = 5000];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(24, this->_internal_glucose_decay_increment_period(), target);
  }

  // optional int32 restart_period = 30 [default = 50];
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(30, this->_internal_restart_period(), target);
  }

  // optional int32 random_seed = 31 [default = 1];
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(31, this->_internal_random_seed(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional double random_branches_ratio = 32 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(32, this->_internal_random_branches_ratio(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional bool treat_binary_clauses_separately = 33 [default = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(33, this->_internal_treat_binary_clauses_separately(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .operations_research.sat.SatParameters.BinaryMinizationAlgorithm binary_minimization_algorithm = 34 [default = BINARY_MINIMIZATION_FIRST];
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      34, this->_internal_binary_minimization_algorithm(), target);
  }

  cached_has_bits = _has_bits_[3];
  // optional bool use_optimization_hints = 35 [default = true];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(35, this->_internal_use_optimization_hints(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional double max_time_in_seconds = 36 [default = inf];
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(36, this->_internal_max_time_in_seconds(), target);
  }

  // optional int64 max_number_of_conflicts = 37 [default = 9223372036854775807];
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(37, this->_internal_max_number_of_conflicts(), target);
  }

  // optional int64 max_memory_in_mb = 40 [default = 10000];
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(40, this->_internal_max_memory_in_mb(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool log_search_progress = 41 [default = false];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(41, this->_internal_log_search_progress(), target);
  }

  // optional bool use_pb_resolution = 43 [default = false];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(43, this->_internal_use_pb_resolution(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional bool use_phase_saving = 44 [default = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(44, this->_internal_use_phase_saving(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional double random_polarity_ratio = 45 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(45, this->_internal_random_polarity_ratio(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional int32 pb_cleanup_increment = 46 [default = 200];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(46, this->_internal_pb_cleanup_increment(), target);
  }

  // optional double pb_cleanup_ratio = 47 [default = 0.5];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(47, this->_internal_pb_cleanup_ratio(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool minimize_reduction_during_pb_resolution = 48 [default = false];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(48, this->_internal_minimize_reduction_during_pb_resolution(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional bool count_assumption_levels_in_lbd = 49 [default = true];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(49, this->_internal_count_assumption_levels_in_lbd(), target);
  }

  // optional bool minimize_core = 50 [default = true];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(50, this->_internal_minimize_core(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .operations_research.sat.SatParameters.MaxSatAssumptionOrder max_sat_assumption_order = 51 [default = DEFAULT_ASSUMPTION_ORDER];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      51, this->_internal_max_sat_assumption_order(), target);
  }

  // optional bool max_sat_reverse_assumption_order = 52 [default = false];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(52, this->_internal_max_sat_reverse_assumption_order(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional .operations_research.sat.SatParameters.MaxSatStratificationAlgorithm max_sat_stratification = 53 [default = STRATIFICATION_DESCENT];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      53, this->_internal_max_sat_stratification(), target);
  }

  // optional int32 presolve_bve_threshold = 54 [default = 500];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(54, this->_internal_presolve_bve_threshold(), target);
  }

  // optional int32 presolve_bve_clause_weight = 55 [default = 3];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(55, this->_internal_presolve_bve_clause_weight(), target);
  }

  // optional bool subsumption_during_conflict_analysis = 56 [default = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(56, this->_internal_subsumption_during_conflict_analysis(), target);
  }

  // optional double presolve_probing_deterministic_time_limit = 57 [default = 30];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(57, this->_internal_presolve_probing_deterministic_time_limit(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .operations_research.sat.SatParameters.ClauseProtection clause_cleanup_protection = 58 [default = PROTECTION_NONE];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      58, this->_internal_clause_cleanup_protection(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional int32 clause_cleanup_lbd_bound = 59 [default = 5];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(59, this->_internal_clause_cleanup_lbd_bound(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .operations_research.sat.SatParameters.ClauseOrdering clause_cleanup_ordering = 60 [default = CLAUSE_ACTIVITY];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      60, this->_internal_clause_cleanup_ordering(), target);
  }

  // repeated .operations_research.sat.SatParameters.RestartAlgorithm restart_algorithms = 61;
  for (int i = 0, n = this->_internal_restart_algorithms_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        61, this->_internal_restart_algorithms(i), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional int32 restart_running_window_size = 62 [default = 50];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(62, this->_internal_restart_running_window_size(), target);
  }

  // optional double restart_dl_average_ratio = 63 [default = 1];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(63, this->_internal_restart_dl_average_ratio(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool use_blocking_restart = 64 [default = false];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(64, this->_internal_use_blocking_restart(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional int32 blocking_restart_window_size = 65 [default = 5000];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(65, this->_internal_blocking_restart_window_size(), target);
  }

  // optional double blocking_restart_multiplier = 66 [default = 1.4];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(66, this->_internal_blocking_restart_multiplier(), target);
  }

  // optional double max_deterministic_time = 67 [default = inf];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(67, this->_internal_max_deterministic_time(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 num_conflicts_before_strategy_changes = 68 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(68, this->_internal_num_conflicts_before_strategy_changes(), target);
  }

  // optional double strategy_change_increase_ratio = 69 [default = 0];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(69, this->_internal_strategy_change_increase_ratio(), target);
  }

  // optional string default_restart_algorithms = 70 [default = "LUBY_RESTART,LBD_MOVING_AVERAGE_RESTART,DL_MOVING_AVERAGE_RESTART"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_default_restart_algorithms().data(), static_cast<int>(this->_internal_default_restart_algorithms().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "operations_research.sat.SatParameters.default_restart_algorithms");
    target = stream->WriteStringMaybeAliased(
        70, this->_internal_default_restart_algorithms(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional double restart_lbd_average_ratio = 71 [default = 1];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(71, this->_internal_restart_lbd_average_ratio(), target);
  }

  // optional bool presolve_use_bva = 72 [default = true];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(72, this->_internal_presolve_use_bva(), target);
  }

  // optional int32 presolve_bva_threshold = 73 [default = 1];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(73, this->_internal_presolve_bva_threshold(), target);
  }

  // optional bool use_precedences_in_disjunctive_constraint = 74 [default = true];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(74, this->_internal_use_precedences_in_disjunctive_constraint(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool use_erwa_heuristic = 75 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(75, this->_internal_use_erwa_heuristic(), target);
  }

  // optional double initial_variables_activity = 76 [default = 0];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(76, this->_internal_initial_variables_activity(), target);
  }

  // optional bool also_bump_variables_in_conflict_reasons = 77 [default = false];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(77, this->_internal_also_bump_variables_in_conflict_reasons(), target);
  }

  // optional bool use_overload_checker_in_cumulative_constraint = 78 [default = false];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(78, this->_internal_use_overload_checker_in_cumulative_constraint(), target);
  }

  // optional bool use_timetable_edge_finding_in_cumulative_constraint = 79 [default = false];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(79, this->_internal_use_timetable_edge_finding_in_cumulative_constraint(), target);
  }

  cached_has_bits = _has_bits_[3];
  // optional bool use_disjunctive_constraint_in_cumulative_constraint = 80 [default = true];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(80, this->_internal_use_disjunctive_constraint_in_cumulative_constraint(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .operations_research.sat.SatParameters.SearchBranching search_branching = 82 [default = AUTOMATIC_SEARCH];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      82, this->_internal_search_branching(), target);
  }

  // optional bool optimize_with_core = 83 [default = false];
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(83, this->_internal_optimize_with_core(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional bool find_multiple_cores = 84 [default = true];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(84, this->_internal_find_multiple_cores(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool optimize_with_max_hs = 85 [default = false];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(85, this->_internal_optimize_with_max_hs(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional bool cp_model_presolve = 86 [default = true];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(86, this->_internal_cp_model_presolve(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool enumerate_all_solutions = 87 [default = false];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(87, this->_internal_enumerate_all_solutions(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional bool presolve_blocked_clause = 88 [default = true];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(88, this->_internal_presolve_blocked_clause(), target);
  }

  // optional bool cover_optimization = 89 [default = true];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(89, this->_internal_cover_optimization(), target);
  }

  // optional int32 linearization_level = 90 [default = 1];
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(90, this->_internal_linearization_level(), target);
  }

  // optional int32 max_num_cuts = 91 [default = 10000];
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(91, this->_internal_max_num_cuts(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool only_add_cuts_at_level_zero = 92 [default = false];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(92, this->_internal_only_add_cuts_at_level_zero(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional bool cp_model_use_sat_presolve = 93 [default = true];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(93, this->_internal_cp_model_use_sat_presolve(), target);
  }

  cached_has_bits = _has_bits_[3];
  // optional bool exploit_integer_lp_solution = 94 [default = true];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(94, this->_internal_exploit_integer_lp_solution(), target);
  }

  // optional bool auto_detect_greater_than_at_least_one_of = 95 [default = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(95, this->_internal_auto_detect_greater_than_at_least_one_of(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional int32 minimize_with_propagation_restart_period = 96 [default = 10];
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(96, this->_internal_minimize_with_propagation_restart_period(), target);
  }

  // optional int32 minimize_with_propagation_num_decisions = 97 [default = 1000];
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(97, this->_internal_minimize_with_propagation_num_decisions(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool stop_after_first_solution = 98 [default = false];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(98, this->_internal_stop_after_first_solution(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional int32 binary_search_num_conflicts = 99 [default = -1];
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(99, this->_internal_binary_search_num_conflicts(), target);
  }

  // optional int32 num_search_workers = 100 [default = 1];
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(100, this->_internal_num_search_workers(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool use_lns_only = 101 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(101, this->_internal_use_lns_only(), target);
  }

  // optional bool randomize_search = 103 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(103, this->_internal_randomize_search(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional int64 search_randomization_tolerance = 104 [default = 0];
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(104, this->_internal_search_randomization_tolerance(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool lns_focus_on_decision_variables = 105 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(105, this->_internal_lns_focus_on_decision_variables(), target);
  }

  cached_has_bits = _has_bits_[3];
  // optional bool instantiate_all_variables = 106 [default = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(106, this->_internal_instantiate_all_variables(), target);
  }

  // optional int32 boolean_encoding_level = 107 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(107, this->_internal_boolean_encoding_level(), target);
  }

  // optional bool use_optional_variables = 108 [default = true];
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(108, this->_internal_use_optional_variables(), target);
  }

  // optional bool use_exact_lp_reason = 109 [default = true];
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(109, this->_internal_use_exact_lp_reason(), target);
  }

  // optional int32 cp_model_probing_level = 110 [default = 2];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(110, this->_internal_cp_model_probing_level(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool add_knapsack_cuts = 111 [default = false];
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(111, this->_internal_add_knapsack_cuts(), target);
  }

  cached_has_bits = _has_bits_[3];
  // optional bool add_lp_constraints_lazily = 112 [default = true];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(112, this->_internal_add_lp_constraints_lazily(), target);
  }

  // optional bool share_objective_bounds = 113 [default = true];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(113, this->_internal_share_objective_bounds(), target);
  }

  // optional bool share_level_zero_bounds = 114 [default = true];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(114, this->_internal_share_level_zero_bounds(), target);
  }

  // optional double min_orthogonality_for_lp_constraints = 115 [default = 0.05];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(115, this->_internal_min_orthogonality_for_lp_constraints(), target);
  }

  // optional bool exploit_all_lp_solution = 116 [default = true];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(116, this->_internal_exploit_all_lp_solution(), target);
  }

  // optional bool add_cg_cuts = 117 [default = true];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(117, this->_internal_add_cg_cuts(), target);
  }

  // optional int32 max_integer_rounding_scaling = 119 [default = 600];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(119, this->_internal_max_integer_rounding_scaling(), target);
  }

  // optional bool add_mir_cuts = 120 [default = true];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(120, this->_internal_add_mir_cuts(), target);
  }

  // optional int32 max_consecutive_inactive_count = 121 [default = 100];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(121, this->_internal_max_consecutive_inactive_count(), target);
  }

  // optional int32 new_constraints_batch_size = 122 [default = 50];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(122, this->_internal_new_constraints_batch_size(), target);
  }

  // optional int64 pseudo_cost_reliability_threshold = 123 [default = 100];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(123, this->_internal_pseudo_cost_reliability_threshold(), target);
  }

  // optional double mip_max_bound = 124 [default = 10000000];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(124, this->_internal_mip_max_bound(), target);
  }

  // optional double mip_var_scaling = 125 [default = 1];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(125, this->_internal_mip_var_scaling(), target);
  }

  // optional double mip_wanted_precision = 126 [default = 1e-06];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(126, this->_internal_mip_wanted_precision(), target);
  }

  // optional int32 mip_max_activity_exponent = 127 [default = 53];
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(127, this->_internal_mip_max_activity_exponent(), target);
  }

  // optional double mip_check_precision = 128 [default = 0.0001];
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(128, this->_internal_mip_check_precision(), target);
  }

  // optional bool use_rins_lns = 129 [default = true];
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(129, this->_internal_use_rins_lns(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool exploit_best_solution = 130 [default = false];
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(130, this->_internal_exploit_best_solution(), target);
  }

  cached_has_bits = _has_bits_[3];
  // optional bool exploit_objective = 131 [default = true];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(131, this->_internal_exploit_objective(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool fill_tightened_domains_in_response = 132 [default = false];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(132, this->_internal_fill_tightened_domains_in_response(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool use_combined_no_overlap = 133 [default = false];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(133, this->_internal_use_combined_no_overlap(), target);
  }

  cached_has_bits = _has_bits_[4];
  // optional int32 interleave_batch_size = 134 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(134, this->_internal_interleave_batch_size(), target);
  }

  // optional bool catch_sigint_signal = 135 [default = true];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(135, this->_internal_catch_sigint_signal(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool interleave_search = 136 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(136, this->_internal_interleave_search(), target);
  }

  // optional bool diversify_lns_params = 137 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(137, this->_internal_diversify_lns_params(), target);
  }

  cached_has_bits = _has_bits_[4];
  // optional int32 max_presolve_iterations = 138 [default = 3];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(138, this->_internal_max_presolve_iterations(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool use_branching_in_lp = 139 [default = false];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(139, this->_internal_use_branching_in_lp(), target);
  }

  cached_has_bits = _has_bits_[3];
  // optional bool expand_element_constraints = 140 [default = true];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(140, this->_internal_expand_element_constraints(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool reduce_memory_usage_in_interleave_mode = 141 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(141, this->_internal_reduce_memory_usage_in_interleave_mode(), target);
  }

  // optional int64 probing_period_at_root = 142 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(142, this->_internal_probing_period_at_root(), target);
  }

  cached_has_bits = _has_bits_[3];
  // optional bool expand_automaton_constraints = 143 [default = true];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(143, this->_internal_expand_automaton_constraints(), target);
  }

  cached_has_bits = _has_bits_[4];
  // optional bool use_implied_bounds = 144 [default = true];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(144, this->_internal_use_implied_bounds(), target);
  }

  // optional double merge_no_overlap_work_limit = 145 [default = 1000000000000];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(145, this->_internal_merge_no_overlap_work_limit(), target);
  }

  // optional double merge_at_most_one_work_limit = 146 [default = 100000000];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(146, this->_internal_merge_at_most_one_work_limit(), target);
  }

  // optional int32 presolve_substitution_level = 147 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(147, this->_internal_presolve_substitution_level(), target);
  }

  // optional int32 max_all_diff_cut_size = 148 [default = 7];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(148, this->_internal_max_all_diff_cut_size(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool stop_after_presolve = 149 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(149, this->_internal_stop_after_presolve(), target);
  }

  // optional bool use_relaxation_lns = 150 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(150, this->_internal_use_relaxation_lns(), target);
  }

  // optional int32 cp_model_max_num_presolve_operations = 151 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(151, this->_internal_cp_model_max_num_presolve_operations(), target);
  }

  cached_has_bits = _has_bits_[3];
  // optional bool add_lin_max_cuts = 152 [default = true];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(152, this->_internal_add_lin_max_cuts(), target);
  }

  cached_has_bits = _has_bits_[4];
  // optional int32 hint_conflict_limit = 153 [default = 10];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(153, this->_internal_hint_conflict_limit(), target);
  }

  // optional int32 max_cut_rounds_at_level_zero = 154 [default = 1];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(154, this->_internal_max_cut_rounds_at_level_zero(), target);
  }

  // optional double cut_max_active_count_value = 155 [default = 10000000000];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(155, this->_internal_cut_max_active_count_value(), target);
  }

  // optional double cut_active_count_decay = 156 [default = 0.8];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(156, this->_internal_cut_active_count_decay(), target);
  }

  // optional int32 cut_cleanup_target = 157 [default = 1000];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(157, this->_internal_cut_cleanup_target(), target);
  }

  cached_has_bits = _has_bits_[3];
  // optional bool expand_table_constraints = 158 [default = true];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(158, this->_internal_expand_table_constraints(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional double absolute_gap_limit = 159 [default = 0];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(159, this->_internal_absolute_gap_limit(), target);
  }

  // optional double relative_gap_limit = 160 [default = 0];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(160, this->_internal_relative_gap_limit(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool exploit_relaxation_solution = 161 [default = false];
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(161, this->_internal_exploit_relaxation_solution(), target);
  }

  // optional bool cp_model_postsolve_with_full_solver = 162 [default = false];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(162, this->_internal_cp_model_postsolve_with_full_solver(), target);
  }

  // optional bool use_sat_inprocessing = 163 [default = false];
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(163, this->_internal_use_sat_inprocessing(), target);
  }

  cached_has_bits = _has_bits_[3];
  // optional bool use_feasibility_pump = 164 [default = true];
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(164, this->_internal_use_feasibility_pump(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .operations_research.sat.SatParameters.FPRoundingMethod fp_rounding = 165 [default = PROPAGATION_ASSISTED];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      165, this->_internal_fp_rounding(), target);
  }

  cached_has_bits = _has_bits_[4];
  // optional bool mip_automatically_scale_variables = 166 [default = true];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(166, this->_internal_mip_automatically_scale_variables(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.sat.SatParameters)
  return target;
}

size_t SatParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.sat.SatParameters)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .operations_research.sat.SatParameters.RestartAlgorithm restart_algorithms = 61;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_restart_algorithms_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_restart_algorithms(static_cast<int>(i)));
    }
    total_size += (2UL * count) + data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string default_restart_algorithms = 70 [default = "LUBY_RESTART,LBD_MOVING_AVERAGE_RESTART,DL_MOVING_AVERAGE_RESTART"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_default_restart_algorithms());
    }

    // optional .operations_research.sat.SatParameters.VariableOrder preferred_variable_order = 1 [default = IN_ORDER];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_preferred_variable_order());
    }

    // optional .operations_research.sat.SatParameters.MaxSatAssumptionOrder max_sat_assumption_order = 51 [default = DEFAULT_ASSUMPTION_ORDER];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_max_sat_assumption_order());
    }

    // optional double random_branches_ratio = 32 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 8;
    }

    // optional double random_polarity_ratio = 45 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 8;
    }

    // optional .operations_research.sat.SatParameters.ClauseProtection clause_cleanup_protection = 58 [default = PROTECTION_NONE];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_clause_cleanup_protection());
    }

    // optional .operations_research.sat.SatParameters.ClauseOrdering clause_cleanup_ordering = 60 [default = CLAUSE_ACTIVITY];
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_clause_cleanup_ordering());
    }

    // optional bool use_erwa_heuristic = 75 [default = false];
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool also_bump_variables_in_conflict_reasons = 77 [default = false];
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional bool use_blocking_restart = 64 [default = false];
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

    // optional bool log_search_progress = 41 [default = false];
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional int32 num_conflicts_before_strategy_changes = 68 [default = 0];
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_num_conflicts_before_strategy_changes());
    }

    // optional double strategy_change_increase_ratio = 69 [default = 0];
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 8;
    }

    // optional double initial_variables_activity = 76 [default = 0];
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 8;
    }

    // optional bool max_sat_reverse_assumption_order = 52 [default = false];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional bool use_overload_checker_in_cumulative_constraint = 78 [default = false];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool use_timetable_edge_finding_in_cumulative_constraint = 79 [default = false];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool only_add_cuts_at_level_zero = 92 [default = false];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional .operations_research.sat.SatParameters.SearchBranching search_branching = 82 [default = AUTOMATIC_SEARCH];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_search_branching());
    }

    // optional bool optimize_with_max_hs = 85 [default = false];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional bool enumerate_all_solutions = 87 [default = false];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional bool fill_tightened_domains_in_response = 132 [default = false];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional bool stop_after_first_solution = 98 [default = false];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

    // optional bool use_pb_resolution = 43 [default = false];
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional bool minimize_reduction_during_pb_resolution = 48 [default = false];
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 1;
    }

    // optional bool cp_model_postsolve_with_full_solver = 162 [default = false];
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 1;
    }

    // optional bool use_sat_inprocessing = 163 [default = false];
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 1;
    }

    // optional int64 search_randomization_tolerance = 104 [default = 0];
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_search_randomization_tolerance());
    }

    // optional bool add_knapsack_cuts = 111 [default = false];
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 1;
    }

    // optional bool exploit_best_solution = 130 [default = false];
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 1;
    }

    // optional bool exploit_relaxation_solution = 161 [default = false];
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 1;
    }

    // optional bool optimize_with_core = 83 [default = false];
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 1;
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool lns_focus_on_decision_variables = 105 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 1;
    }

    // optional bool use_relaxation_lns = 150 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 1;
    }

    // optional bool diversify_lns_params = 137 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 1;
    }

    // optional bool randomize_search = 103 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 1;
    }

    // optional bool stop_after_presolve = 149 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 1;
    }

    // optional bool interleave_search = 136 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 1;
    }

    // optional bool reduce_memory_usage_in_interleave_mode = 141 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

    // optional bool use_lns_only = 101 [default = false];
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool use_branching_in_lp = 139 [default = false];
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional bool use_combined_no_overlap = 133 [default = false];
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

    // optional int64 probing_period_at_root = 142 [default = 0];
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_probing_period_at_root());
    }

    // optional int32 cp_model_max_num_presolve_operations = 151 [default = 0];
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_cp_model_max_num_presolve_operations());
    }

    // optional double absolute_gap_limit = 159 [default = 0];
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 8;
    }

    // optional double relative_gap_limit = 160 [default = 0];
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 8;
    }

    // optional .operations_research.sat.SatParameters.FPRoundingMethod fp_rounding = 165 [default = PROPAGATION_ASSISTED];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_fp_rounding());
    }

    // optional .operations_research.sat.SatParameters.Polarity initial_polarity = 2 [default = POLARITY_FALSE];
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_initial_polarity());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .operations_research.sat.SatParameters.ConflictMinimizationAlgorithm minimization_algorithm = 4 [default = RECURSIVE];
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_minimization_algorithm());
    }

    // optional int32 clause_cleanup_period = 11 [default = 10000];
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_clause_cleanup_period());
    }

    // optional int32 clause_cleanup_target = 13 [default = 10000];
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_clause_cleanup_target());
    }

    // optional double variable_activity_decay = 15 [default = 0.8];
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 + 8;
    }

    // optional double max_variable_activity_value = 16 [default = 1e+100];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 8;
    }

    // optional double clause_activity_decay = 17 [default = 0.999];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 8;
    }

    // optional double max_clause_activity_value = 18 [default = 1e+20];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 8;
    }

    // optional double glucose_max_decay = 22 [default = 0.95];
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional double glucose_decay_increment = 23 [default = 0.01];
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 8;
    }

    // optional int32 glucose_decay_increment_period = 24 [default = 5000];
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_glucose_decay_increment_period());
    }

    // optional int32 restart_period = 30 [default = 50];
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_restart_period());
    }

    // optional int32 random_seed = 31 [default = 1];
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_random_seed());
    }

    // optional .operations_research.sat.SatParameters.BinaryMinizationAlgorithm binary_minimization_algorithm = 34 [default = BINARY_MINIMIZATION_FIRST];
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_binary_minimization_algorithm());
    }

    // optional double max_time_in_seconds = 36 [default = inf];
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 8;
    }

    // optional int64 max_number_of_conflicts = 37 [default = 9223372036854775807];
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_max_number_of_conflicts());
    }

    // optional int64 max_memory_in_mb = 40 [default = 10000];
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_max_memory_in_mb());
    }

  }
  cached_has_bits = _has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool use_phase_saving = 44 [default = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 1;
    }

    // optional bool subsumption_during_conflict_analysis = 56 [default = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 1;
    }

    // optional bool treat_binary_clauses_separately = 33 [default = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 1;
    }

    // optional bool count_assumption_levels_in_lbd = 49 [default = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 1;
    }

    // optional int32 pb_cleanup_increment = 46 [default = 200];
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_pb_cleanup_increment());
    }

    // optional double pb_cleanup_ratio = 47 [default = 0.5];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 8;
    }

    // optional .operations_research.sat.SatParameters.MaxSatStratificationAlgorithm max_sat_stratification = 53 [default = STRATIFICATION_DESCENT];
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_max_sat_stratification());
    }

    // optional int32 presolve_bve_threshold = 54 [default = 500];
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_presolve_bve_threshold());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double presolve_probing_deterministic_time_limit = 57 [default = 30];
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 8;
    }

    // optional int32 presolve_bve_clause_weight = 55 [default = 3];
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_presolve_bve_clause_weight());
    }

    // optional int32 clause_cleanup_lbd_bound = 59 [default = 5];
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_clause_cleanup_lbd_bound());
    }

    // optional double restart_dl_average_ratio = 63 [default = 1];
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 8;
    }

    // optional int32 restart_running_window_size = 62 [default = 50];
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_restart_running_window_size());
    }

    // optional int32 blocking_restart_window_size = 65 [default = 5000];
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_blocking_restart_window_size());
    }

    // optional double blocking_restart_multiplier = 66 [default = 1.4];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 8;
    }

    // optional double max_deterministic_time = 67 [default = inf];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional double restart_lbd_average_ratio = 71 [default = 1];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 8;
    }

    // optional int32 presolve_bva_threshold = 73 [default = 1];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_presolve_bva_threshold());
    }

    // optional bool minimize_core = 50 [default = true];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional bool find_multiple_cores = 84 [default = true];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional bool cover_optimization = 89 [default = true];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional bool use_precedences_in_disjunctive_constraint = 74 [default = true];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional bool presolve_blocked_clause = 88 [default = true];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

    // optional bool presolve_use_bva = 72 [default = true];
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional bool cp_model_presolve = 86 [default = true];
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 1;
    }

    // optional bool cp_model_use_sat_presolve = 93 [default = true];
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 1;
    }

    // optional int32 linearization_level = 90 [default = 1];
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_linearization_level());
    }

    // optional int32 max_num_cuts = 91 [default = 10000];
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_max_num_cuts());
    }

    // optional int32 minimize_with_propagation_restart_period = 96 [default = 10];
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_minimize_with_propagation_restart_period());
    }

    // optional int32 minimize_with_propagation_num_decisions = 97 [default = 1000];
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_minimize_with_propagation_num_decisions());
    }

    // optional int32 binary_search_num_conflicts = 99 [default = -1];
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_binary_search_num_conflicts());
    }

    // optional int32 num_search_workers = 100 [default = 1];
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_num_search_workers());
    }

  }
  cached_has_bits = _has_bits_[3];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 boolean_encoding_level = 107 [default = 1];
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_boolean_encoding_level());
    }

    // optional bool instantiate_all_variables = 106 [default = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 1;
    }

    // optional bool auto_detect_greater_than_at_least_one_of = 95 [default = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 1;
    }

    // optional bool share_objective_bounds = 113 [default = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 1;
    }

    // optional bool share_level_zero_bounds = 114 [default = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 1;
    }

    // optional int32 cp_model_probing_level = 110 [default = 2];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_cp_model_probing_level());
    }

    // optional double min_orthogonality_for_lp_constraints = 115 [default = 0.05];
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 8;
    }

    // optional bool add_lp_constraints_lazily = 112 [default = true];
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool exploit_integer_lp_solution = 94 [default = true];
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional bool exploit_all_lp_solution = 116 [default = true];
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

    // optional bool exploit_objective = 131 [default = true];
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional bool use_disjunctive_constraint_in_cumulative_constraint = 80 [default = true];
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional bool add_cg_cuts = 117 [default = true];
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

    // optional bool add_mir_cuts = 120 [default = true];
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

    // optional bool add_lin_max_cuts = 152 [default = true];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional int32 max_integer_rounding_scaling = 119 [default = 600];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_max_integer_rounding_scaling());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool expand_element_constraints = 140 [default = true];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool expand_automaton_constraints = 143 [default = true];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional bool expand_table_constraints = 158 [default = true];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional bool use_optimization_hints = 35 [default = true];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional int32 max_consecutive_inactive_count = 121 [default = 100];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_max_consecutive_inactive_count());
    }

    // optional int32 new_constraints_batch_size = 122 [default = 50];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_new_constraints_batch_size());
    }

    // optional int64 pseudo_cost_reliability_threshold = 123 [default = 100];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_pseudo_cost_reliability_threshold());
    }

    // optional double mip_max_bound = 124 [default = 10000000];
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional double mip_var_scaling = 125 [default = 1];
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 8;
    }

    // optional double mip_wanted_precision = 126 [default = 1e-06];
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 8;
    }

    // optional int32 mip_max_activity_exponent = 127 [default = 53];
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mip_max_activity_exponent());
    }

    // optional bool use_rins_lns = 129 [default = true];
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 1;
    }

    // optional bool use_feasibility_pump = 164 [default = true];
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 1;
    }

    // optional bool use_optional_variables = 108 [default = true];
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 1;
    }

    // optional bool use_exact_lp_reason = 109 [default = true];
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 1;
    }

    // optional double mip_check_precision = 128 [default = 0.0001];
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 8;
    }

  }
  cached_has_bits = _has_bits_[4];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 interleave_batch_size = 134 [default = 1];
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_interleave_batch_size());
    }

    // optional int32 max_presolve_iterations = 138 [default = 3];
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_max_presolve_iterations());
    }

    // optional double merge_no_overlap_work_limit = 145 [default = 1000000000000];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 8;
    }

    // optional double merge_at_most_one_work_limit = 146 [default = 100000000];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 8;
    }

    // optional int32 presolve_substitution_level = 147 [default = 1];
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_presolve_substitution_level());
    }

    // optional int32 max_all_diff_cut_size = 148 [default = 7];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_max_all_diff_cut_size());
    }

    // optional bool catch_sigint_signal = 135 [default = true];
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

    // optional bool use_implied_bounds = 144 [default = true];
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional bool mip_automatically_scale_variables = 166 [default = true];
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional int32 hint_conflict_limit = 153 [default = 10];
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_hint_conflict_limit());
    }

    // optional double cut_max_active_count_value = 155 [default = 10000000000];
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 8;
    }

    // optional int32 max_cut_rounds_at_level_zero = 154 [default = 1];
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_max_cut_rounds_at_level_zero());
    }

    // optional int32 cut_cleanup_target = 157 [default = 1000];
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_cut_cleanup_target());
    }

    // optional double cut_active_count_decay = 156 [default = 0.8];
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SatParameters::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:operations_research.sat.SatParameters)
  GOOGLE_DCHECK_NE(&from, this);
  const SatParameters* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SatParameters>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:operations_research.sat.SatParameters)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:operations_research.sat.SatParameters)
    MergeFrom(*source);
  }
}

void SatParameters::MergeFrom(const SatParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:operations_research.sat.SatParameters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  restart_algorithms_.MergeFrom(from.restart_algorithms_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_default_restart_algorithms(from._internal_default_restart_algorithms());
    }
    if (cached_has_bits & 0x00000002u) {
      preferred_variable_order_ = from.preferred_variable_order_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_sat_assumption_order_ = from.max_sat_assumption_order_;
    }
    if (cached_has_bits & 0x00000008u) {
      random_branches_ratio_ = from.random_branches_ratio_;
    }
    if (cached_has_bits & 0x00000010u) {
      random_polarity_ratio_ = from.random_polarity_ratio_;
    }
    if (cached_has_bits & 0x00000020u) {
      clause_cleanup_protection_ = from.clause_cleanup_protection_;
    }
    if (cached_has_bits & 0x00000040u) {
      clause_cleanup_ordering_ = from.clause_cleanup_ordering_;
    }
    if (cached_has_bits & 0x00000080u) {
      use_erwa_heuristic_ = from.use_erwa_heuristic_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      also_bump_variables_in_conflict_reasons_ = from.also_bump_variables_in_conflict_reasons_;
    }
    if (cached_has_bits & 0x00000200u) {
      use_blocking_restart_ = from.use_blocking_restart_;
    }
    if (cached_has_bits & 0x00000400u) {
      log_search_progress_ = from.log_search_progress_;
    }
    if (cached_has_bits & 0x00000800u) {
      num_conflicts_before_strategy_changes_ = from.num_conflicts_before_strategy_changes_;
    }
    if (cached_has_bits & 0x00001000u) {
      strategy_change_increase_ratio_ = from.strategy_change_increase_ratio_;
    }
    if (cached_has_bits & 0x00002000u) {
      initial_variables_activity_ = from.initial_variables_activity_;
    }
    if (cached_has_bits & 0x00004000u) {
      max_sat_reverse_assumption_order_ = from.max_sat_reverse_assumption_order_;
    }
    if (cached_has_bits & 0x00008000u) {
      use_overload_checker_in_cumulative_constraint_ = from.use_overload_checker_in_cumulative_constraint_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      use_timetable_edge_finding_in_cumulative_constraint_ = from.use_timetable_edge_finding_in_cumulative_constraint_;
    }
    if (cached_has_bits & 0x00020000u) {
      only_add_cuts_at_level_zero_ = from.only_add_cuts_at_level_zero_;
    }
    if (cached_has_bits & 0x00040000u) {
      search_branching_ = from.search_branching_;
    }
    if (cached_has_bits & 0x00080000u) {
      optimize_with_max_hs_ = from.optimize_with_max_hs_;
    }
    if (cached_has_bits & 0x00100000u) {
      enumerate_all_solutions_ = from.enumerate_all_solutions_;
    }
    if (cached_has_bits & 0x00200000u) {
      fill_tightened_domains_in_response_ = from.fill_tightened_domains_in_response_;
    }
    if (cached_has_bits & 0x00400000u) {
      stop_after_first_solution_ = from.stop_after_first_solution_;
    }
    if (cached_has_bits & 0x00800000u) {
      use_pb_resolution_ = from.use_pb_resolution_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      minimize_reduction_during_pb_resolution_ = from.minimize_reduction_during_pb_resolution_;
    }
    if (cached_has_bits & 0x02000000u) {
      cp_model_postsolve_with_full_solver_ = from.cp_model_postsolve_with_full_solver_;
    }
    if (cached_has_bits & 0x04000000u) {
      use_sat_inprocessing_ = from.use_sat_inprocessing_;
    }
    if (cached_has_bits & 0x08000000u) {
      search_randomization_tolerance_ = from.search_randomization_tolerance_;
    }
    if (cached_has_bits & 0x10000000u) {
      add_knapsack_cuts_ = from.add_knapsack_cuts_;
    }
    if (cached_has_bits & 0x20000000u) {
      exploit_best_solution_ = from.exploit_best_solution_;
    }
    if (cached_has_bits & 0x40000000u) {
      exploit_relaxation_solution_ = from.exploit_relaxation_solution_;
    }
    if (cached_has_bits & 0x80000000u) {
      optimize_with_core_ = from.optimize_with_core_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      lns_focus_on_decision_variables_ = from.lns_focus_on_decision_variables_;
    }
    if (cached_has_bits & 0x00000002u) {
      use_relaxation_lns_ = from.use_relaxation_lns_;
    }
    if (cached_has_bits & 0x00000004u) {
      diversify_lns_params_ = from.diversify_lns_params_;
    }
    if (cached_has_bits & 0x00000008u) {
      randomize_search_ = from.randomize_search_;
    }
    if (cached_has_bits & 0x00000010u) {
      stop_after_presolve_ = from.stop_after_presolve_;
    }
    if (cached_has_bits & 0x00000020u) {
      interleave_search_ = from.interleave_search_;
    }
    if (cached_has_bits & 0x00000040u) {
      reduce_memory_usage_in_interleave_mode_ = from.reduce_memory_usage_in_interleave_mode_;
    }
    if (cached_has_bits & 0x00000080u) {
      use_lns_only_ = from.use_lns_only_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      use_branching_in_lp_ = from.use_branching_in_lp_;
    }
    if (cached_has_bits & 0x00000200u) {
      use_combined_no_overlap_ = from.use_combined_no_overlap_;
    }
    if (cached_has_bits & 0x00000400u) {
      probing_period_at_root_ = from.probing_period_at_root_;
    }
    if (cached_has_bits & 0x00000800u) {
      cp_model_max_num_presolve_operations_ = from.cp_model_max_num_presolve_operations_;
    }
    if (cached_has_bits & 0x00001000u) {
      absolute_gap_limit_ = from.absolute_gap_limit_;
    }
    if (cached_has_bits & 0x00002000u) {
      relative_gap_limit_ = from.relative_gap_limit_;
    }
    if (cached_has_bits & 0x00004000u) {
      fp_rounding_ = from.fp_rounding_;
    }
    if (cached_has_bits & 0x00008000u) {
      initial_polarity_ = from.initial_polarity_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      minimization_algorithm_ = from.minimization_algorithm_;
    }
    if (cached_has_bits & 0x00020000u) {
      clause_cleanup_period_ = from.clause_cleanup_period_;
    }
    if (cached_has_bits & 0x00040000u) {
      clause_cleanup_target_ = from.clause_cleanup_target_;
    }
    if (cached_has_bits & 0x00080000u) {
      variable_activity_decay_ = from.variable_activity_decay_;
    }
    if (cached_has_bits & 0x00100000u) {
      max_variable_activity_value_ = from.max_variable_activity_value_;
    }
    if (cached_has_bits & 0x00200000u) {
      clause_activity_decay_ = from.clause_activity_decay_;
    }
    if (cached_has_bits & 0x00400000u) {
      max_clause_activity_value_ = from.max_clause_activity_value_;
    }
    if (cached_has_bits & 0x00800000u) {
      glucose_max_decay_ = from.glucose_max_decay_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      glucose_decay_increment_ = from.glucose_decay_increment_;
    }
    if (cached_has_bits & 0x02000000u) {
      glucose_decay_increment_period_ = from.glucose_decay_increment_period_;
    }
    if (cached_has_bits & 0x04000000u) {
      restart_period_ = from.restart_period_;
    }
    if (cached_has_bits & 0x08000000u) {
      random_seed_ = from.random_seed_;
    }
    if (cached_has_bits & 0x10000000u) {
      binary_minimization_algorithm_ = from.binary_minimization_algorithm_;
    }
    if (cached_has_bits & 0x20000000u) {
      max_time_in_seconds_ = from.max_time_in_seconds_;
    }
    if (cached_has_bits & 0x40000000u) {
      max_number_of_conflicts_ = from.max_number_of_conflicts_;
    }
    if (cached_has_bits & 0x80000000u) {
      max_memory_in_mb_ = from.max_memory_in_mb_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      use_phase_saving_ = from.use_phase_saving_;
    }
    if (cached_has_bits & 0x00000002u) {
      subsumption_during_conflict_analysis_ = from.subsumption_during_conflict_analysis_;
    }
    if (cached_has_bits & 0x00000004u) {
      treat_binary_clauses_separately_ = from.treat_binary_clauses_separately_;
    }
    if (cached_has_bits & 0x00000008u) {
      count_assumption_levels_in_lbd_ = from.count_assumption_levels_in_lbd_;
    }
    if (cached_has_bits & 0x00000010u) {
      pb_cleanup_increment_ = from.pb_cleanup_increment_;
    }
    if (cached_has_bits & 0x00000020u) {
      pb_cleanup_ratio_ = from.pb_cleanup_ratio_;
    }
    if (cached_has_bits & 0x00000040u) {
      max_sat_stratification_ = from.max_sat_stratification_;
    }
    if (cached_has_bits & 0x00000080u) {
      presolve_bve_threshold_ = from.presolve_bve_threshold_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      presolve_probing_deterministic_time_limit_ = from.presolve_probing_deterministic_time_limit_;
    }
    if (cached_has_bits & 0x00000200u) {
      presolve_bve_clause_weight_ = from.presolve_bve_clause_weight_;
    }
    if (cached_has_bits & 0x00000400u) {
      clause_cleanup_lbd_bound_ = from.clause_cleanup_lbd_bound_;
    }
    if (cached_has_bits & 0x00000800u) {
      restart_dl_average_ratio_ = from.restart_dl_average_ratio_;
    }
    if (cached_has_bits & 0x00001000u) {
      restart_running_window_size_ = from.restart_running_window_size_;
    }
    if (cached_has_bits & 0x00002000u) {
      blocking_restart_window_size_ = from.blocking_restart_window_size_;
    }
    if (cached_has_bits & 0x00004000u) {
      blocking_restart_multiplier_ = from.blocking_restart_multiplier_;
    }
    if (cached_has_bits & 0x00008000u) {
      max_deterministic_time_ = from.max_deterministic_time_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      restart_lbd_average_ratio_ = from.restart_lbd_average_ratio_;
    }
    if (cached_has_bits & 0x00020000u) {
      presolve_bva_threshold_ = from.presolve_bva_threshold_;
    }
    if (cached_has_bits & 0x00040000u) {
      minimize_core_ = from.minimize_core_;
    }
    if (cached_has_bits & 0x00080000u) {
      find_multiple_cores_ = from.find_multiple_cores_;
    }
    if (cached_has_bits & 0x00100000u) {
      cover_optimization_ = from.cover_optimization_;
    }
    if (cached_has_bits & 0x00200000u) {
      use_precedences_in_disjunctive_constraint_ = from.use_precedences_in_disjunctive_constraint_;
    }
    if (cached_has_bits & 0x00400000u) {
      presolve_blocked_clause_ = from.presolve_blocked_clause_;
    }
    if (cached_has_bits & 0x00800000u) {
      presolve_use_bva_ = from.presolve_use_bva_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      cp_model_presolve_ = from.cp_model_presolve_;
    }
    if (cached_has_bits & 0x02000000u) {
      cp_model_use_sat_presolve_ = from.cp_model_use_sat_presolve_;
    }
    if (cached_has_bits & 0x04000000u) {
      linearization_level_ = from.linearization_level_;
    }
    if (cached_has_bits & 0x08000000u) {
      max_num_cuts_ = from.max_num_cuts_;
    }
    if (cached_has_bits & 0x10000000u) {
      minimize_with_propagation_restart_period_ = from.minimize_with_propagation_restart_period_;
    }
    if (cached_has_bits & 0x20000000u) {
      minimize_with_propagation_num_decisions_ = from.minimize_with_propagation_num_decisions_;
    }
    if (cached_has_bits & 0x40000000u) {
      binary_search_num_conflicts_ = from.binary_search_num_conflicts_;
    }
    if (cached_has_bits & 0x80000000u) {
      num_search_workers_ = from.num_search_workers_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[3];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      boolean_encoding_level_ = from.boolean_encoding_level_;
    }
    if (cached_has_bits & 0x00000002u) {
      instantiate_all_variables_ = from.instantiate_all_variables_;
    }
    if (cached_has_bits & 0x00000004u) {
      auto_detect_greater_than_at_least_one_of_ = from.auto_detect_greater_than_at_least_one_of_;
    }
    if (cached_has_bits & 0x00000008u) {
      share_objective_bounds_ = from.share_objective_bounds_;
    }
    if (cached_has_bits & 0x00000010u) {
      share_level_zero_bounds_ = from.share_level_zero_bounds_;
    }
    if (cached_has_bits & 0x00000020u) {
      cp_model_probing_level_ = from.cp_model_probing_level_;
    }
    if (cached_has_bits & 0x00000040u) {
      min_orthogonality_for_lp_constraints_ = from.min_orthogonality_for_lp_constraints_;
    }
    if (cached_has_bits & 0x00000080u) {
      add_lp_constraints_lazily_ = from.add_lp_constraints_lazily_;
    }
    _has_bits_[3] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      exploit_integer_lp_solution_ = from.exploit_integer_lp_solution_;
    }
    if (cached_has_bits & 0x00000200u) {
      exploit_all_lp_solution_ = from.exploit_all_lp_solution_;
    }
    if (cached_has_bits & 0x00000400u) {
      exploit_objective_ = from.exploit_objective_;
    }
    if (cached_has_bits & 0x00000800u) {
      use_disjunctive_constraint_in_cumulative_constraint_ = from.use_disjunctive_constraint_in_cumulative_constraint_;
    }
    if (cached_has_bits & 0x00001000u) {
      add_cg_cuts_ = from.add_cg_cuts_;
    }
    if (cached_has_bits & 0x00002000u) {
      add_mir_cuts_ = from.add_mir_cuts_;
    }
    if (cached_has_bits & 0x00004000u) {
      add_lin_max_cuts_ = from.add_lin_max_cuts_;
    }
    if (cached_has_bits & 0x00008000u) {
      max_integer_rounding_scaling_ = from.max_integer_rounding_scaling_;
    }
    _has_bits_[3] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      expand_element_constraints_ = from.expand_element_constraints_;
    }
    if (cached_has_bits & 0x00020000u) {
      expand_automaton_constraints_ = from.expand_automaton_constraints_;
    }
    if (cached_has_bits & 0x00040000u) {
      expand_table_constraints_ = from.expand_table_constraints_;
    }
    if (cached_has_bits & 0x00080000u) {
      use_optimization_hints_ = from.use_optimization_hints_;
    }
    if (cached_has_bits & 0x00100000u) {
      max_consecutive_inactive_count_ = from.max_consecutive_inactive_count_;
    }
    if (cached_has_bits & 0x00200000u) {
      new_constraints_batch_size_ = from.new_constraints_batch_size_;
    }
    if (cached_has_bits & 0x00400000u) {
      pseudo_cost_reliability_threshold_ = from.pseudo_cost_reliability_threshold_;
    }
    if (cached_has_bits & 0x00800000u) {
      mip_max_bound_ = from.mip_max_bound_;
    }
    _has_bits_[3] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      mip_var_scaling_ = from.mip_var_scaling_;
    }
    if (cached_has_bits & 0x02000000u) {
      mip_wanted_precision_ = from.mip_wanted_precision_;
    }
    if (cached_has_bits & 0x04000000u) {
      mip_max_activity_exponent_ = from.mip_max_activity_exponent_;
    }
    if (cached_has_bits & 0x08000000u) {
      use_rins_lns_ = from.use_rins_lns_;
    }
    if (cached_has_bits & 0x10000000u) {
      use_feasibility_pump_ = from.use_feasibility_pump_;
    }
    if (cached_has_bits & 0x20000000u) {
      use_optional_variables_ = from.use_optional_variables_;
    }
    if (cached_has_bits & 0x40000000u) {
      use_exact_lp_reason_ = from.use_exact_lp_reason_;
    }
    if (cached_has_bits & 0x80000000u) {
      mip_check_precision_ = from.mip_check_precision_;
    }
    _has_bits_[3] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[4];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      interleave_batch_size_ = from.interleave_batch_size_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_presolve_iterations_ = from.max_presolve_iterations_;
    }
    if (cached_has_bits & 0x00000004u) {
      merge_no_overlap_work_limit_ = from.merge_no_overlap_work_limit_;
    }
    if (cached_has_bits & 0x00000008u) {
      merge_at_most_one_work_limit_ = from.merge_at_most_one_work_limit_;
    }
    if (cached_has_bits & 0x00000010u) {
      presolve_substitution_level_ = from.presolve_substitution_level_;
    }
    if (cached_has_bits & 0x00000020u) {
      max_all_diff_cut_size_ = from.max_all_diff_cut_size_;
    }
    if (cached_has_bits & 0x00000040u) {
      catch_sigint_signal_ = from.catch_sigint_signal_;
    }
    if (cached_has_bits & 0x00000080u) {
      use_implied_bounds_ = from.use_implied_bounds_;
    }
    _has_bits_[4] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      mip_automatically_scale_variables_ = from.mip_automatically_scale_variables_;
    }
    if (cached_has_bits & 0x00000200u) {
      hint_conflict_limit_ = from.hint_conflict_limit_;
    }
    if (cached_has_bits & 0x00000400u) {
      cut_max_active_count_value_ = from.cut_max_active_count_value_;
    }
    if (cached_has_bits & 0x00000800u) {
      max_cut_rounds_at_level_zero_ = from.max_cut_rounds_at_level_zero_;
    }
    if (cached_has_bits & 0x00001000u) {
      cut_cleanup_target_ = from.cut_cleanup_target_;
    }
    if (cached_has_bits & 0x00002000u) {
      cut_active_count_decay_ = from.cut_active_count_decay_;
    }
    _has_bits_[4] |= cached_has_bits;
  }
}

void SatParameters::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:operations_research.sat.SatParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SatParameters::CopyFrom(const SatParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.sat.SatParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SatParameters::IsInitialized() const {
  return true;
}

void SatParameters::InternalSwap(SatParameters* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  swap(_has_bits_[2], other->_has_bits_[2]);
  swap(_has_bits_[3], other->_has_bits_[3]);
  swap(_has_bits_[4], other->_has_bits_[4]);
  restart_algorithms_.InternalSwap(&other->restart_algorithms_);
  default_restart_algorithms_.Swap(&other->default_restart_algorithms_, &::operations_research::sat::SatParameters::_i_give_permission_to_break_this_code_default_default_restart_algorithms_.get(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SatParameters, relative_gap_limit_)
      + sizeof(SatParameters::relative_gap_limit_)
      - PROTOBUF_FIELD_OFFSET(SatParameters, preferred_variable_order_)>(
          reinterpret_cast<char*>(&preferred_variable_order_),
          reinterpret_cast<char*>(&other->preferred_variable_order_));
  swap(fp_rounding_, other->fp_rounding_);
  swap(initial_polarity_, other->initial_polarity_);
  swap(minimization_algorithm_, other->minimization_algorithm_);
  swap(clause_cleanup_period_, other->clause_cleanup_period_);
  swap(clause_cleanup_target_, other->clause_cleanup_target_);
  swap(variable_activity_decay_, other->variable_activity_decay_);
  swap(max_variable_activity_value_, other->max_variable_activity_value_);
  swap(clause_activity_decay_, other->clause_activity_decay_);
  swap(max_clause_activity_value_, other->max_clause_activity_value_);
  swap(glucose_max_decay_, other->glucose_max_decay_);
  swap(glucose_decay_increment_, other->glucose_decay_increment_);
  swap(glucose_decay_increment_period_, other->glucose_decay_increment_period_);
  swap(restart_period_, other->restart_period_);
  swap(random_seed_, other->random_seed_);
  swap(binary_minimization_algorithm_, other->binary_minimization_algorithm_);
  swap(max_time_in_seconds_, other->max_time_in_seconds_);
  swap(max_number_of_conflicts_, other->max_number_of_conflicts_);
  swap(max_memory_in_mb_, other->max_memory_in_mb_);
  swap(use_phase_saving_, other->use_phase_saving_);
  swap(subsumption_during_conflict_analysis_, other->subsumption_during_conflict_analysis_);
  swap(treat_binary_clauses_separately_, other->treat_binary_clauses_separately_);
  swap(count_assumption_levels_in_lbd_, other->count_assumption_levels_in_lbd_);
  swap(pb_cleanup_increment_, other->pb_cleanup_increment_);
  swap(pb_cleanup_ratio_, other->pb_cleanup_ratio_);
  swap(max_sat_stratification_, other->max_sat_stratification_);
  swap(presolve_bve_threshold_, other->presolve_bve_threshold_);
  swap(presolve_probing_deterministic_time_limit_, other->presolve_probing_deterministic_time_limit_);
  swap(presolve_bve_clause_weight_, other->presolve_bve_clause_weight_);
  swap(clause_cleanup_lbd_bound_, other->clause_cleanup_lbd_bound_);
  swap(restart_dl_average_ratio_, other->restart_dl_average_ratio_);
  swap(restart_running_window_size_, other->restart_running_window_size_);
  swap(blocking_restart_window_size_, other->blocking_restart_window_size_);
  swap(blocking_restart_multiplier_, other->blocking_restart_multiplier_);
  swap(max_deterministic_time_, other->max_deterministic_time_);
  swap(restart_lbd_average_ratio_, other->restart_lbd_average_ratio_);
  swap(presolve_bva_threshold_, other->presolve_bva_threshold_);
  swap(minimize_core_, other->minimize_core_);
  swap(find_multiple_cores_, other->find_multiple_cores_);
  swap(cover_optimization_, other->cover_optimization_);
  swap(use_precedences_in_disjunctive_constraint_, other->use_precedences_in_disjunctive_constraint_);
  swap(presolve_blocked_clause_, other->presolve_blocked_clause_);
  swap(presolve_use_bva_, other->presolve_use_bva_);
  swap(cp_model_presolve_, other->cp_model_presolve_);
  swap(cp_model_use_sat_presolve_, other->cp_model_use_sat_presolve_);
  swap(linearization_level_, other->linearization_level_);
  swap(max_num_cuts_, other->max_num_cuts_);
  swap(minimize_with_propagation_restart_period_, other->minimize_with_propagation_restart_period_);
  swap(minimize_with_propagation_num_decisions_, other->minimize_with_propagation_num_decisions_);
  swap(binary_search_num_conflicts_, other->binary_search_num_conflicts_);
  swap(num_search_workers_, other->num_search_workers_);
  swap(boolean_encoding_level_, other->boolean_encoding_level_);
  swap(instantiate_all_variables_, other->instantiate_all_variables_);
  swap(auto_detect_greater_than_at_least_one_of_, other->auto_detect_greater_than_at_least_one_of_);
  swap(share_objective_bounds_, other->share_objective_bounds_);
  swap(share_level_zero_bounds_, other->share_level_zero_bounds_);
  swap(cp_model_probing_level_, other->cp_model_probing_level_);
  swap(min_orthogonality_for_lp_constraints_, other->min_orthogonality_for_lp_constraints_);
  swap(add_lp_constraints_lazily_, other->add_lp_constraints_lazily_);
  swap(exploit_integer_lp_solution_, other->exploit_integer_lp_solution_);
  swap(exploit_all_lp_solution_, other->exploit_all_lp_solution_);
  swap(exploit_objective_, other->exploit_objective_);
  swap(use_disjunctive_constraint_in_cumulative_constraint_, other->use_disjunctive_constraint_in_cumulative_constraint_);
  swap(add_cg_cuts_, other->add_cg_cuts_);
  swap(add_mir_cuts_, other->add_mir_cuts_);
  swap(add_lin_max_cuts_, other->add_lin_max_cuts_);
  swap(max_integer_rounding_scaling_, other->max_integer_rounding_scaling_);
  swap(expand_element_constraints_, other->expand_element_constraints_);
  swap(expand_automaton_constraints_, other->expand_automaton_constraints_);
  swap(expand_table_constraints_, other->expand_table_constraints_);
  swap(use_optimization_hints_, other->use_optimization_hints_);
  swap(max_consecutive_inactive_count_, other->max_consecutive_inactive_count_);
  swap(new_constraints_batch_size_, other->new_constraints_batch_size_);
  swap(pseudo_cost_reliability_threshold_, other->pseudo_cost_reliability_threshold_);
  swap(mip_max_bound_, other->mip_max_bound_);
  swap(mip_var_scaling_, other->mip_var_scaling_);
  swap(mip_wanted_precision_, other->mip_wanted_precision_);
  swap(mip_max_activity_exponent_, other->mip_max_activity_exponent_);
  swap(use_rins_lns_, other->use_rins_lns_);
  swap(use_feasibility_pump_, other->use_feasibility_pump_);
  swap(use_optional_variables_, other->use_optional_variables_);
  swap(use_exact_lp_reason_, other->use_exact_lp_reason_);
  swap(mip_check_precision_, other->mip_check_precision_);
  swap(interleave_batch_size_, other->interleave_batch_size_);
  swap(max_presolve_iterations_, other->max_presolve_iterations_);
  swap(merge_no_overlap_work_limit_, other->merge_no_overlap_work_limit_);
  swap(merge_at_most_one_work_limit_, other->merge_at_most_one_work_limit_);
  swap(presolve_substitution_level_, other->presolve_substitution_level_);
  swap(max_all_diff_cut_size_, other->max_all_diff_cut_size_);
  swap(catch_sigint_signal_, other->catch_sigint_signal_);
  swap(use_implied_bounds_, other->use_implied_bounds_);
  swap(mip_automatically_scale_variables_, other->mip_automatically_scale_variables_);
  swap(hint_conflict_limit_, other->hint_conflict_limit_);
  swap(cut_max_active_count_value_, other->cut_max_active_count_value_);
  swap(max_cut_rounds_at_level_zero_, other->max_cut_rounds_at_level_zero_);
  swap(cut_cleanup_target_, other->cut_cleanup_target_);
  swap(cut_active_count_decay_, other->cut_active_count_decay_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SatParameters::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sat
}  // namespace operations_research
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::operations_research::sat::SatParameters* Arena::CreateMaybeMessage< ::operations_research::sat::SatParameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::sat::SatParameters >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
