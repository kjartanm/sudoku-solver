// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ortools/sat/boolean_problem.proto

#include "ortools/sat/boolean_problem.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ortools_2fsat_2fboolean_5fproblem_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BooleanAssignment_ortools_2fsat_2fboolean_5fproblem_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ortools_2fsat_2fboolean_5fproblem_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LinearBooleanConstraint_ortools_2fsat_2fboolean_5fproblem_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ortools_2fsat_2fboolean_5fproblem_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LinearObjective_ortools_2fsat_2fboolean_5fproblem_2eproto;
namespace operations_research {
namespace sat {
class LinearBooleanConstraintDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LinearBooleanConstraint> _instance;
} _LinearBooleanConstraint_default_instance_;
class LinearObjectiveDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LinearObjective> _instance;
} _LinearObjective_default_instance_;
class BooleanAssignmentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BooleanAssignment> _instance;
} _BooleanAssignment_default_instance_;
class LinearBooleanProblemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LinearBooleanProblem> _instance;
} _LinearBooleanProblem_default_instance_;
}  // namespace sat
}  // namespace operations_research
static void InitDefaultsscc_info_BooleanAssignment_ortools_2fsat_2fboolean_5fproblem_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::operations_research::sat::_BooleanAssignment_default_instance_;
    new (ptr) ::operations_research::sat::BooleanAssignment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::operations_research::sat::BooleanAssignment::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BooleanAssignment_ortools_2fsat_2fboolean_5fproblem_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BooleanAssignment_ortools_2fsat_2fboolean_5fproblem_2eproto}, {}};

static void InitDefaultsscc_info_LinearBooleanConstraint_ortools_2fsat_2fboolean_5fproblem_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::operations_research::sat::_LinearBooleanConstraint_default_instance_;
    new (ptr) ::operations_research::sat::LinearBooleanConstraint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::operations_research::sat::LinearBooleanConstraint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LinearBooleanConstraint_ortools_2fsat_2fboolean_5fproblem_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LinearBooleanConstraint_ortools_2fsat_2fboolean_5fproblem_2eproto}, {}};

static void InitDefaultsscc_info_LinearBooleanProblem_ortools_2fsat_2fboolean_5fproblem_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::operations_research::sat::_LinearBooleanProblem_default_instance_;
    new (ptr) ::operations_research::sat::LinearBooleanProblem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::operations_research::sat::LinearBooleanProblem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_LinearBooleanProblem_ortools_2fsat_2fboolean_5fproblem_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_LinearBooleanProblem_ortools_2fsat_2fboolean_5fproblem_2eproto}, {
      &scc_info_LinearBooleanConstraint_ortools_2fsat_2fboolean_5fproblem_2eproto.base,
      &scc_info_LinearObjective_ortools_2fsat_2fboolean_5fproblem_2eproto.base,
      &scc_info_BooleanAssignment_ortools_2fsat_2fboolean_5fproblem_2eproto.base,}};

static void InitDefaultsscc_info_LinearObjective_ortools_2fsat_2fboolean_5fproblem_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::operations_research::sat::_LinearObjective_default_instance_;
    new (ptr) ::operations_research::sat::LinearObjective();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::operations_research::sat::LinearObjective::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LinearObjective_ortools_2fsat_2fboolean_5fproblem_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LinearObjective_ortools_2fsat_2fboolean_5fproblem_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ortools_2fsat_2fboolean_5fproblem_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ortools_2fsat_2fboolean_5fproblem_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ortools_2fsat_2fboolean_5fproblem_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ortools_2fsat_2fboolean_5fproblem_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::LinearBooleanConstraint, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::LinearBooleanConstraint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::LinearBooleanConstraint, literals_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::LinearBooleanConstraint, coefficients_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::LinearBooleanConstraint, lower_bound_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::LinearBooleanConstraint, upper_bound_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::LinearBooleanConstraint, name_),
  ~0u,
  ~0u,
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::LinearObjective, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::LinearObjective, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::LinearObjective, literals_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::LinearObjective, coefficients_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::LinearObjective, offset_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::LinearObjective, scaling_factor_),
  ~0u,
  ~0u,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::BooleanAssignment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::BooleanAssignment, literals_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::LinearBooleanProblem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::LinearBooleanProblem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::LinearBooleanProblem, name_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::LinearBooleanProblem, num_variables_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::LinearBooleanProblem, constraints_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::LinearBooleanProblem, objective_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::LinearBooleanProblem, var_names_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::LinearBooleanProblem, assignment_),
  PROTOBUF_FIELD_OFFSET(::operations_research::sat::LinearBooleanProblem, original_num_variables_),
  0,
  3,
  ~0u,
  1,
  ~0u,
  2,
  4,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::operations_research::sat::LinearBooleanConstraint)},
  { 15, 24, sizeof(::operations_research::sat::LinearObjective)},
  { 28, -1, sizeof(::operations_research::sat::BooleanAssignment)},
  { 34, 46, sizeof(::operations_research::sat::LinearBooleanProblem)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::operations_research::sat::_LinearBooleanConstraint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::operations_research::sat::_LinearObjective_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::operations_research::sat::_BooleanAssignment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::operations_research::sat::_LinearBooleanProblem_default_instance_),
};

const char descriptor_table_protodef_ortools_2fsat_2fboolean_5fproblem_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n!ortools/sat/boolean_problem.proto\022\027ope"
  "rations_research.sat\"{\n\027LinearBooleanCon"
  "straint\022\020\n\010literals\030\001 \003(\005\022\024\n\014coefficient"
  "s\030\002 \003(\003\022\023\n\013lower_bound\030\003 \001(\003\022\023\n\013upper_bo"
  "und\030\004 \001(\003\022\016\n\004name\030\005 \001(\t:\000\"g\n\017LinearObjec"
  "tive\022\020\n\010literals\030\001 \003(\005\022\024\n\014coefficients\030\002"
  " \003(\003\022\021\n\006offset\030\003 \001(\001:\0010\022\031\n\016scaling_facto"
  "r\030\004 \001(\001:\0011\"%\n\021BooleanAssignment\022\020\n\010liter"
  "als\030\001 \003(\005\"\264\002\n\024LinearBooleanProblem\022\016\n\004na"
  "me\030\001 \001(\t:\000\022\025\n\rnum_variables\030\003 \001(\005\022E\n\013con"
  "straints\030\004 \003(\01320.operations_research.sat"
  ".LinearBooleanConstraint\022;\n\tobjective\030\005 "
  "\001(\0132(.operations_research.sat.LinearObje"
  "ctive\022\021\n\tvar_names\030\006 \003(\t\022>\n\nassignment\030\007"
  " \001(\0132*.operations_research.sat.BooleanAs"
  "signment\022\036\n\026original_num_variables\030\010 \001(\005"
  "B/\n\026com.google.ortools.satP\001\252\002\022Google.Or"
  "Tools.Sat"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ortools_2fsat_2fboolean_5fproblem_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ortools_2fsat_2fboolean_5fproblem_2eproto_sccs[4] = {
  &scc_info_BooleanAssignment_ortools_2fsat_2fboolean_5fproblem_2eproto.base,
  &scc_info_LinearBooleanConstraint_ortools_2fsat_2fboolean_5fproblem_2eproto.base,
  &scc_info_LinearBooleanProblem_ortools_2fsat_2fboolean_5fproblem_2eproto.base,
  &scc_info_LinearObjective_ortools_2fsat_2fboolean_5fproblem_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ortools_2fsat_2fboolean_5fproblem_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ortools_2fsat_2fboolean_5fproblem_2eproto = {
  false, false, descriptor_table_protodef_ortools_2fsat_2fboolean_5fproblem_2eproto, "ortools/sat/boolean_problem.proto", 689,
  &descriptor_table_ortools_2fsat_2fboolean_5fproblem_2eproto_once, descriptor_table_ortools_2fsat_2fboolean_5fproblem_2eproto_sccs, descriptor_table_ortools_2fsat_2fboolean_5fproblem_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_ortools_2fsat_2fboolean_5fproblem_2eproto::offsets,
  file_level_metadata_ortools_2fsat_2fboolean_5fproblem_2eproto, 4, file_level_enum_descriptors_ortools_2fsat_2fboolean_5fproblem_2eproto, file_level_service_descriptors_ortools_2fsat_2fboolean_5fproblem_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ortools_2fsat_2fboolean_5fproblem_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ortools_2fsat_2fboolean_5fproblem_2eproto)), true);
namespace operations_research {
namespace sat {

// ===================================================================

void LinearBooleanConstraint::InitAsDefaultInstance() {
}
class LinearBooleanConstraint::_Internal {
 public:
  using HasBits = decltype(std::declval<LinearBooleanConstraint>()._has_bits_);
  static void set_has_lower_bound(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_upper_bound(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

LinearBooleanConstraint::LinearBooleanConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  literals_(arena),
  coefficients_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:operations_research.sat.LinearBooleanConstraint)
}
LinearBooleanConstraint::LinearBooleanConstraint(const LinearBooleanConstraint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      literals_(from.literals_),
      coefficients_(from.coefficients_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  ::memcpy(&lower_bound_, &from.lower_bound_,
    static_cast<size_t>(reinterpret_cast<char*>(&upper_bound_) -
    reinterpret_cast<char*>(&lower_bound_)) + sizeof(upper_bound_));
  // @@protoc_insertion_point(copy_constructor:operations_research.sat.LinearBooleanConstraint)
}

void LinearBooleanConstraint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LinearBooleanConstraint_ortools_2fsat_2fboolean_5fproblem_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&lower_bound_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&upper_bound_) -
      reinterpret_cast<char*>(&lower_bound_)) + sizeof(upper_bound_));
}

LinearBooleanConstraint::~LinearBooleanConstraint() {
  // @@protoc_insertion_point(destructor:operations_research.sat.LinearBooleanConstraint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LinearBooleanConstraint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LinearBooleanConstraint::ArenaDtor(void* object) {
  LinearBooleanConstraint* _this = reinterpret_cast< LinearBooleanConstraint* >(object);
  (void)_this;
}
void LinearBooleanConstraint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LinearBooleanConstraint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LinearBooleanConstraint& LinearBooleanConstraint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LinearBooleanConstraint_ortools_2fsat_2fboolean_5fproblem_2eproto.base);
  return *internal_default_instance();
}


void LinearBooleanConstraint::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.sat.LinearBooleanConstraint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  literals_.Clear();
  coefficients_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&lower_bound_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&upper_bound_) -
        reinterpret_cast<char*>(&lower_bound_)) + sizeof(upper_bound_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LinearBooleanConstraint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 literals = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_literals(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_literals(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 coefficients = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_coefficients(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_coefficients(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 lower_bound = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_lower_bound(&has_bits);
          lower_bound_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 upper_bound = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_upper_bound(&has_bits);
          upper_bound_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 5 [default = ""];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "operations_research.sat.LinearBooleanConstraint.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LinearBooleanConstraint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.sat.LinearBooleanConstraint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 literals = 1;
  for (int i = 0, n = this->_internal_literals_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_literals(i), target);
  }

  // repeated int64 coefficients = 2;
  for (int i = 0, n = this->_internal_coefficients_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_coefficients(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional int64 lower_bound = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_lower_bound(), target);
  }

  // optional int64 upper_bound = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_upper_bound(), target);
  }

  // optional string name = 5 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "operations_research.sat.LinearBooleanConstraint.name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.sat.LinearBooleanConstraint)
  return target;
}

size_t LinearBooleanConstraint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.sat.LinearBooleanConstraint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 literals = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->literals_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_literals_size());
    total_size += data_size;
  }

  // repeated int64 coefficients = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->coefficients_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_coefficients_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 5 [default = ""];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional int64 lower_bound = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_lower_bound());
    }

    // optional int64 upper_bound = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_upper_bound());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LinearBooleanConstraint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:operations_research.sat.LinearBooleanConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  const LinearBooleanConstraint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LinearBooleanConstraint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:operations_research.sat.LinearBooleanConstraint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:operations_research.sat.LinearBooleanConstraint)
    MergeFrom(*source);
  }
}

void LinearBooleanConstraint::MergeFrom(const LinearBooleanConstraint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:operations_research.sat.LinearBooleanConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  literals_.MergeFrom(from.literals_);
  coefficients_.MergeFrom(from.coefficients_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      lower_bound_ = from.lower_bound_;
    }
    if (cached_has_bits & 0x00000004u) {
      upper_bound_ = from.upper_bound_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LinearBooleanConstraint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:operations_research.sat.LinearBooleanConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinearBooleanConstraint::CopyFrom(const LinearBooleanConstraint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.sat.LinearBooleanConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinearBooleanConstraint::IsInitialized() const {
  return true;
}

void LinearBooleanConstraint::InternalSwap(LinearBooleanConstraint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  literals_.InternalSwap(&other->literals_);
  coefficients_.InternalSwap(&other->coefficients_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LinearBooleanConstraint, upper_bound_)
      + sizeof(LinearBooleanConstraint::upper_bound_)
      - PROTOBUF_FIELD_OFFSET(LinearBooleanConstraint, lower_bound_)>(
          reinterpret_cast<char*>(&lower_bound_),
          reinterpret_cast<char*>(&other->lower_bound_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LinearBooleanConstraint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LinearObjective::InitAsDefaultInstance() {
}
class LinearObjective::_Internal {
 public:
  using HasBits = decltype(std::declval<LinearObjective>()._has_bits_);
  static void set_has_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_scaling_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

LinearObjective::LinearObjective(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  literals_(arena),
  coefficients_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:operations_research.sat.LinearObjective)
}
LinearObjective::LinearObjective(const LinearObjective& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      literals_(from.literals_),
      coefficients_(from.coefficients_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&offset_, &from.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&scaling_factor_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(scaling_factor_));
  // @@protoc_insertion_point(copy_constructor:operations_research.sat.LinearObjective)
}

void LinearObjective::SharedCtor() {
  offset_ = 0;
  scaling_factor_ = 1;
}

LinearObjective::~LinearObjective() {
  // @@protoc_insertion_point(destructor:operations_research.sat.LinearObjective)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LinearObjective::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LinearObjective::ArenaDtor(void* object) {
  LinearObjective* _this = reinterpret_cast< LinearObjective* >(object);
  (void)_this;
}
void LinearObjective::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LinearObjective::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LinearObjective& LinearObjective::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LinearObjective_ortools_2fsat_2fboolean_5fproblem_2eproto.base);
  return *internal_default_instance();
}


void LinearObjective::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.sat.LinearObjective)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  literals_.Clear();
  coefficients_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    offset_ = 0;
    scaling_factor_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LinearObjective::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 literals = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_literals(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_literals(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 coefficients = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_coefficients(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_coefficients(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double offset = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_offset(&has_bits);
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double scaling_factor = 4 [default = 1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_scaling_factor(&has_bits);
          scaling_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LinearObjective::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.sat.LinearObjective)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 literals = 1;
  for (int i = 0, n = this->_internal_literals_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_literals(i), target);
  }

  // repeated int64 coefficients = 2;
  for (int i = 0, n = this->_internal_coefficients_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_coefficients(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional double offset = 3 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_offset(), target);
  }

  // optional double scaling_factor = 4 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_scaling_factor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.sat.LinearObjective)
  return target;
}

size_t LinearObjective::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.sat.LinearObjective)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 literals = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->literals_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_literals_size());
    total_size += data_size;
  }

  // repeated int64 coefficients = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->coefficients_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_coefficients_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double offset = 3 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double scaling_factor = 4 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LinearObjective::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:operations_research.sat.LinearObjective)
  GOOGLE_DCHECK_NE(&from, this);
  const LinearObjective* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LinearObjective>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:operations_research.sat.LinearObjective)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:operations_research.sat.LinearObjective)
    MergeFrom(*source);
  }
}

void LinearObjective::MergeFrom(const LinearObjective& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:operations_research.sat.LinearObjective)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  literals_.MergeFrom(from.literals_);
  coefficients_.MergeFrom(from.coefficients_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      offset_ = from.offset_;
    }
    if (cached_has_bits & 0x00000002u) {
      scaling_factor_ = from.scaling_factor_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LinearObjective::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:operations_research.sat.LinearObjective)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinearObjective::CopyFrom(const LinearObjective& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.sat.LinearObjective)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinearObjective::IsInitialized() const {
  return true;
}

void LinearObjective::InternalSwap(LinearObjective* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  literals_.InternalSwap(&other->literals_);
  coefficients_.InternalSwap(&other->coefficients_);
  swap(offset_, other->offset_);
  swap(scaling_factor_, other->scaling_factor_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LinearObjective::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BooleanAssignment::InitAsDefaultInstance() {
}
class BooleanAssignment::_Internal {
 public:
};

BooleanAssignment::BooleanAssignment(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  literals_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:operations_research.sat.BooleanAssignment)
}
BooleanAssignment::BooleanAssignment(const BooleanAssignment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      literals_(from.literals_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:operations_research.sat.BooleanAssignment)
}

void BooleanAssignment::SharedCtor() {
}

BooleanAssignment::~BooleanAssignment() {
  // @@protoc_insertion_point(destructor:operations_research.sat.BooleanAssignment)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BooleanAssignment::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BooleanAssignment::ArenaDtor(void* object) {
  BooleanAssignment* _this = reinterpret_cast< BooleanAssignment* >(object);
  (void)_this;
}
void BooleanAssignment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BooleanAssignment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BooleanAssignment& BooleanAssignment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BooleanAssignment_ortools_2fsat_2fboolean_5fproblem_2eproto.base);
  return *internal_default_instance();
}


void BooleanAssignment::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.sat.BooleanAssignment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  literals_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BooleanAssignment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 literals = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_literals(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_literals(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BooleanAssignment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.sat.BooleanAssignment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 literals = 1;
  for (int i = 0, n = this->_internal_literals_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_literals(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.sat.BooleanAssignment)
  return target;
}

size_t BooleanAssignment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.sat.BooleanAssignment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 literals = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->literals_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_literals_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BooleanAssignment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:operations_research.sat.BooleanAssignment)
  GOOGLE_DCHECK_NE(&from, this);
  const BooleanAssignment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BooleanAssignment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:operations_research.sat.BooleanAssignment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:operations_research.sat.BooleanAssignment)
    MergeFrom(*source);
  }
}

void BooleanAssignment::MergeFrom(const BooleanAssignment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:operations_research.sat.BooleanAssignment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  literals_.MergeFrom(from.literals_);
}

void BooleanAssignment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:operations_research.sat.BooleanAssignment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BooleanAssignment::CopyFrom(const BooleanAssignment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.sat.BooleanAssignment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BooleanAssignment::IsInitialized() const {
  return true;
}

void BooleanAssignment::InternalSwap(BooleanAssignment* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  literals_.InternalSwap(&other->literals_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BooleanAssignment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LinearBooleanProblem::InitAsDefaultInstance() {
  ::operations_research::sat::_LinearBooleanProblem_default_instance_._instance.get_mutable()->objective_ = const_cast< ::operations_research::sat::LinearObjective*>(
      ::operations_research::sat::LinearObjective::internal_default_instance());
  ::operations_research::sat::_LinearBooleanProblem_default_instance_._instance.get_mutable()->assignment_ = const_cast< ::operations_research::sat::BooleanAssignment*>(
      ::operations_research::sat::BooleanAssignment::internal_default_instance());
}
class LinearBooleanProblem::_Internal {
 public:
  using HasBits = decltype(std::declval<LinearBooleanProblem>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_variables(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::operations_research::sat::LinearObjective& objective(const LinearBooleanProblem* msg);
  static void set_has_objective(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::operations_research::sat::BooleanAssignment& assignment(const LinearBooleanProblem* msg);
  static void set_has_assignment(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_original_num_variables(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::operations_research::sat::LinearObjective&
LinearBooleanProblem::_Internal::objective(const LinearBooleanProblem* msg) {
  return *msg->objective_;
}
const ::operations_research::sat::BooleanAssignment&
LinearBooleanProblem::_Internal::assignment(const LinearBooleanProblem* msg) {
  return *msg->assignment_;
}
LinearBooleanProblem::LinearBooleanProblem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  constraints_(arena),
  var_names_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:operations_research.sat.LinearBooleanProblem)
}
LinearBooleanProblem::LinearBooleanProblem(const LinearBooleanProblem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      constraints_(from.constraints_),
      var_names_(from.var_names_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  if (from._internal_has_objective()) {
    objective_ = new ::operations_research::sat::LinearObjective(*from.objective_);
  } else {
    objective_ = nullptr;
  }
  if (from._internal_has_assignment()) {
    assignment_ = new ::operations_research::sat::BooleanAssignment(*from.assignment_);
  } else {
    assignment_ = nullptr;
  }
  ::memcpy(&num_variables_, &from.num_variables_,
    static_cast<size_t>(reinterpret_cast<char*>(&original_num_variables_) -
    reinterpret_cast<char*>(&num_variables_)) + sizeof(original_num_variables_));
  // @@protoc_insertion_point(copy_constructor:operations_research.sat.LinearBooleanProblem)
}

void LinearBooleanProblem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LinearBooleanProblem_ortools_2fsat_2fboolean_5fproblem_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&objective_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&original_num_variables_) -
      reinterpret_cast<char*>(&objective_)) + sizeof(original_num_variables_));
}

LinearBooleanProblem::~LinearBooleanProblem() {
  // @@protoc_insertion_point(destructor:operations_research.sat.LinearBooleanProblem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LinearBooleanProblem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete objective_;
  if (this != internal_default_instance()) delete assignment_;
}

void LinearBooleanProblem::ArenaDtor(void* object) {
  LinearBooleanProblem* _this = reinterpret_cast< LinearBooleanProblem* >(object);
  (void)_this;
}
void LinearBooleanProblem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LinearBooleanProblem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LinearBooleanProblem& LinearBooleanProblem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LinearBooleanProblem_ortools_2fsat_2fboolean_5fproblem_2eproto.base);
  return *internal_default_instance();
}


void LinearBooleanProblem::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.sat.LinearBooleanProblem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  constraints_.Clear();
  var_names_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(objective_ != nullptr);
      objective_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(assignment_ != nullptr);
      assignment_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&num_variables_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&original_num_variables_) -
        reinterpret_cast<char*>(&num_variables_)) + sizeof(original_num_variables_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LinearBooleanProblem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1 [default = ""];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "operations_research.sat.LinearBooleanProblem.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_variables = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_num_variables(&has_bits);
          num_variables_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .operations_research.sat.LinearBooleanConstraint constraints = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_constraints(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .operations_research.sat.LinearObjective objective = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_objective(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string var_names = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_var_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "operations_research.sat.LinearBooleanProblem.var_names");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .operations_research.sat.BooleanAssignment assignment = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_assignment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 original_num_variables = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_original_num_variables(&has_bits);
          original_num_variables_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LinearBooleanProblem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.sat.LinearBooleanProblem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "operations_research.sat.LinearBooleanProblem.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional int32 num_variables = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_num_variables(), target);
  }

  // repeated .operations_research.sat.LinearBooleanConstraint constraints = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_constraints_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_constraints(i), target, stream);
  }

  // optional .operations_research.sat.LinearObjective objective = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::objective(this), target, stream);
  }

  // repeated string var_names = 6;
  for (int i = 0, n = this->_internal_var_names_size(); i < n; i++) {
    const auto& s = this->_internal_var_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "operations_research.sat.LinearBooleanProblem.var_names");
    target = stream->WriteString(6, s, target);
  }

  // optional .operations_research.sat.BooleanAssignment assignment = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::assignment(this), target, stream);
  }

  // optional int32 original_num_variables = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_original_num_variables(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.sat.LinearBooleanProblem)
  return target;
}

size_t LinearBooleanProblem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.sat.LinearBooleanProblem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .operations_research.sat.LinearBooleanConstraint constraints = 4;
  total_size += 1UL * this->_internal_constraints_size();
  for (const auto& msg : this->constraints_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string var_names = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(var_names_.size());
  for (int i = 0, n = var_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      var_names_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string name = 1 [default = ""];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .operations_research.sat.LinearObjective objective = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *objective_);
    }

    // optional .operations_research.sat.BooleanAssignment assignment = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *assignment_);
    }

    // optional int32 num_variables = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_num_variables());
    }

    // optional int32 original_num_variables = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_original_num_variables());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LinearBooleanProblem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:operations_research.sat.LinearBooleanProblem)
  GOOGLE_DCHECK_NE(&from, this);
  const LinearBooleanProblem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LinearBooleanProblem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:operations_research.sat.LinearBooleanProblem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:operations_research.sat.LinearBooleanProblem)
    MergeFrom(*source);
  }
}

void LinearBooleanProblem::MergeFrom(const LinearBooleanProblem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:operations_research.sat.LinearBooleanProblem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  constraints_.MergeFrom(from.constraints_);
  var_names_.MergeFrom(from.var_names_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_objective()->::operations_research::sat::LinearObjective::MergeFrom(from._internal_objective());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_assignment()->::operations_research::sat::BooleanAssignment::MergeFrom(from._internal_assignment());
    }
    if (cached_has_bits & 0x00000008u) {
      num_variables_ = from.num_variables_;
    }
    if (cached_has_bits & 0x00000010u) {
      original_num_variables_ = from.original_num_variables_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LinearBooleanProblem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:operations_research.sat.LinearBooleanProblem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinearBooleanProblem::CopyFrom(const LinearBooleanProblem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.sat.LinearBooleanProblem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinearBooleanProblem::IsInitialized() const {
  return true;
}

void LinearBooleanProblem::InternalSwap(LinearBooleanProblem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  constraints_.InternalSwap(&other->constraints_);
  var_names_.InternalSwap(&other->var_names_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LinearBooleanProblem, original_num_variables_)
      + sizeof(LinearBooleanProblem::original_num_variables_)
      - PROTOBUF_FIELD_OFFSET(LinearBooleanProblem, objective_)>(
          reinterpret_cast<char*>(&objective_),
          reinterpret_cast<char*>(&other->objective_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LinearBooleanProblem::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sat
}  // namespace operations_research
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::operations_research::sat::LinearBooleanConstraint* Arena::CreateMaybeMessage< ::operations_research::sat::LinearBooleanConstraint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::sat::LinearBooleanConstraint >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::sat::LinearObjective* Arena::CreateMaybeMessage< ::operations_research::sat::LinearObjective >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::sat::LinearObjective >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::sat::BooleanAssignment* Arena::CreateMaybeMessage< ::operations_research::sat::BooleanAssignment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::sat::BooleanAssignment >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::sat::LinearBooleanProblem* Arena::CreateMaybeMessage< ::operations_research::sat::LinearBooleanProblem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::sat::LinearBooleanProblem >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
