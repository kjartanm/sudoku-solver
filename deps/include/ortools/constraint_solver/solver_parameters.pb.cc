// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ortools/constraint_solver/solver_parameters.proto

#include "ortools/constraint_solver/solver_parameters.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace operations_research {
class ConstraintSolverParametersDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConstraintSolverParameters> _instance;
} _ConstraintSolverParameters_default_instance_;
}  // namespace operations_research
static void InitDefaultsscc_info_ConstraintSolverParameters_ortools_2fconstraint_5fsolver_2fsolver_5fparameters_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::operations_research::_ConstraintSolverParameters_default_instance_;
    new (ptr) ::operations_research::ConstraintSolverParameters();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::operations_research::ConstraintSolverParameters::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConstraintSolverParameters_ortools_2fconstraint_5fsolver_2fsolver_5fparameters_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ConstraintSolverParameters_ortools_2fconstraint_5fsolver_2fsolver_5fparameters_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ortools_2fconstraint_5fsolver_2fsolver_5fparameters_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_ortools_2fconstraint_5fsolver_2fsolver_5fparameters_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ortools_2fconstraint_5fsolver_2fsolver_5fparameters_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ortools_2fconstraint_5fsolver_2fsolver_5fparameters_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::ConstraintSolverParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::operations_research::ConstraintSolverParameters, compress_trail_),
  PROTOBUF_FIELD_OFFSET(::operations_research::ConstraintSolverParameters, trail_block_size_),
  PROTOBUF_FIELD_OFFSET(::operations_research::ConstraintSolverParameters, array_split_size_),
  PROTOBUF_FIELD_OFFSET(::operations_research::ConstraintSolverParameters, store_names_),
  PROTOBUF_FIELD_OFFSET(::operations_research::ConstraintSolverParameters, name_cast_variables_),
  PROTOBUF_FIELD_OFFSET(::operations_research::ConstraintSolverParameters, name_all_variables_),
  PROTOBUF_FIELD_OFFSET(::operations_research::ConstraintSolverParameters, profile_propagation_),
  PROTOBUF_FIELD_OFFSET(::operations_research::ConstraintSolverParameters, profile_file_),
  PROTOBUF_FIELD_OFFSET(::operations_research::ConstraintSolverParameters, profile_local_search_),
  PROTOBUF_FIELD_OFFSET(::operations_research::ConstraintSolverParameters, print_local_search_profile_),
  PROTOBUF_FIELD_OFFSET(::operations_research::ConstraintSolverParameters, trace_propagation_),
  PROTOBUF_FIELD_OFFSET(::operations_research::ConstraintSolverParameters, trace_search_),
  PROTOBUF_FIELD_OFFSET(::operations_research::ConstraintSolverParameters, print_model_),
  PROTOBUF_FIELD_OFFSET(::operations_research::ConstraintSolverParameters, print_model_stats_),
  PROTOBUF_FIELD_OFFSET(::operations_research::ConstraintSolverParameters, print_added_constraints_),
  PROTOBUF_FIELD_OFFSET(::operations_research::ConstraintSolverParameters, disable_solve_),
  PROTOBUF_FIELD_OFFSET(::operations_research::ConstraintSolverParameters, use_small_table_),
  PROTOBUF_FIELD_OFFSET(::operations_research::ConstraintSolverParameters, use_cumulative_edge_finder_),
  PROTOBUF_FIELD_OFFSET(::operations_research::ConstraintSolverParameters, use_cumulative_time_table_),
  PROTOBUF_FIELD_OFFSET(::operations_research::ConstraintSolverParameters, use_cumulative_time_table_sync_),
  PROTOBUF_FIELD_OFFSET(::operations_research::ConstraintSolverParameters, use_sequence_high_demand_tasks_),
  PROTOBUF_FIELD_OFFSET(::operations_research::ConstraintSolverParameters, use_all_possible_disjunctions_),
  PROTOBUF_FIELD_OFFSET(::operations_research::ConstraintSolverParameters, max_edge_finder_size_),
  PROTOBUF_FIELD_OFFSET(::operations_research::ConstraintSolverParameters, diffn_use_cumulative_),
  PROTOBUF_FIELD_OFFSET(::operations_research::ConstraintSolverParameters, use_element_rmq_),
  PROTOBUF_FIELD_OFFSET(::operations_research::ConstraintSolverParameters, skip_locally_optimal_paths_),
  PROTOBUF_FIELD_OFFSET(::operations_research::ConstraintSolverParameters, check_solution_period_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::operations_research::ConstraintSolverParameters)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::operations_research::_ConstraintSolverParameters_default_instance_),
};

const char descriptor_table_protodef_ortools_2fconstraint_5fsolver_2fsolver_5fparameters_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n1ortools/constraint_solver/solver_param"
  "eters.proto\022\023operations_research\"\315\007\n\032Con"
  "straintSolverParameters\022X\n\016compress_trai"
  "l\030\001 \001(\0162@.operations_research.Constraint"
  "SolverParameters.TrailCompression\022\030\n\020tra"
  "il_block_size\030\002 \001(\005\022\030\n\020array_split_size\030"
  "\003 \001(\005\022\023\n\013store_names\030\004 \001(\010\022\033\n\023name_cast_"
  "variables\030\005 \001(\010\022\032\n\022name_all_variables\030\006 "
  "\001(\010\022\033\n\023profile_propagation\030\007 \001(\010\022\024\n\014prof"
  "ile_file\030\010 \001(\t\022\034\n\024profile_local_search\030\020"
  " \001(\010\022\"\n\032print_local_search_profile\030\021 \001(\010"
  "\022\031\n\021trace_propagation\030\t \001(\010\022\024\n\014trace_sea"
  "rch\030\n \001(\010\022\023\n\013print_model\030\013 \001(\010\022\031\n\021print_"
  "model_stats\030\014 \001(\010\022\037\n\027print_added_constra"
  "ints\030\r \001(\010\022\025\n\rdisable_solve\030\017 \001(\010\022\027\n\017use"
  "_small_table\030e \001(\010\022\"\n\032use_cumulative_edg"
  "e_finder\030i \001(\010\022!\n\031use_cumulative_time_ta"
  "ble\030j \001(\010\022&\n\036use_cumulative_time_table_s"
  "ync\030p \001(\010\022&\n\036use_sequence_high_demand_ta"
  "sks\030k \001(\010\022%\n\035use_all_possible_disjunctio"
  "ns\030l \001(\010\022\034\n\024max_edge_finder_size\030m \001(\005\022\034"
  "\n\024diffn_use_cumulative\030n \001(\010\022\027\n\017use_elem"
  "ent_rmq\030o \001(\010\022\"\n\032skip_locally_optimal_pa"
  "ths\030q \001(\010\022\035\n\025check_solution_period\030r \001(\005"
  "\">\n\020TrailCompression\022\022\n\016NO_COMPRESSION\020\000"
  "\022\026\n\022COMPRESS_WITH_ZLIB\020\001J\004\010d\020eJ\004\010f\020gJ\004\010g"
  "\020hJ\004\010h\020iBI\n#com.google.ortools.constrain"
  "tsolverP\001\252\002\037Google.OrTools.ConstraintSol"
  "verb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ortools_2fconstraint_5fsolver_2fsolver_5fparameters_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ortools_2fconstraint_5fsolver_2fsolver_5fparameters_2eproto_sccs[1] = {
  &scc_info_ConstraintSolverParameters_ortools_2fconstraint_5fsolver_2fsolver_5fparameters_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ortools_2fconstraint_5fsolver_2fsolver_5fparameters_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ortools_2fconstraint_5fsolver_2fsolver_5fparameters_2eproto = {
  false, false, descriptor_table_protodef_ortools_2fconstraint_5fsolver_2fsolver_5fparameters_2eproto, "ortools/constraint_solver/solver_parameters.proto", 1131,
  &descriptor_table_ortools_2fconstraint_5fsolver_2fsolver_5fparameters_2eproto_once, descriptor_table_ortools_2fconstraint_5fsolver_2fsolver_5fparameters_2eproto_sccs, descriptor_table_ortools_2fconstraint_5fsolver_2fsolver_5fparameters_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_ortools_2fconstraint_5fsolver_2fsolver_5fparameters_2eproto::offsets,
  file_level_metadata_ortools_2fconstraint_5fsolver_2fsolver_5fparameters_2eproto, 1, file_level_enum_descriptors_ortools_2fconstraint_5fsolver_2fsolver_5fparameters_2eproto, file_level_service_descriptors_ortools_2fconstraint_5fsolver_2fsolver_5fparameters_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ortools_2fconstraint_5fsolver_2fsolver_5fparameters_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ortools_2fconstraint_5fsolver_2fsolver_5fparameters_2eproto)), true);
namespace operations_research {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConstraintSolverParameters_TrailCompression_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ortools_2fconstraint_5fsolver_2fsolver_5fparameters_2eproto);
  return file_level_enum_descriptors_ortools_2fconstraint_5fsolver_2fsolver_5fparameters_2eproto[0];
}
bool ConstraintSolverParameters_TrailCompression_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ConstraintSolverParameters_TrailCompression ConstraintSolverParameters::NO_COMPRESSION;
constexpr ConstraintSolverParameters_TrailCompression ConstraintSolverParameters::COMPRESS_WITH_ZLIB;
constexpr ConstraintSolverParameters_TrailCompression ConstraintSolverParameters::TrailCompression_MIN;
constexpr ConstraintSolverParameters_TrailCompression ConstraintSolverParameters::TrailCompression_MAX;
constexpr int ConstraintSolverParameters::TrailCompression_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void ConstraintSolverParameters::InitAsDefaultInstance() {
}
class ConstraintSolverParameters::_Internal {
 public:
};

ConstraintSolverParameters::ConstraintSolverParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:operations_research.ConstraintSolverParameters)
}
ConstraintSolverParameters::ConstraintSolverParameters(const ConstraintSolverParameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  profile_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_profile_file().empty()) {
    profile_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_profile_file(),
      GetArena());
  }
  ::memcpy(&compress_trail_, &from.compress_trail_,
    static_cast<size_t>(reinterpret_cast<char*>(&skip_locally_optimal_paths_) -
    reinterpret_cast<char*>(&compress_trail_)) + sizeof(skip_locally_optimal_paths_));
  // @@protoc_insertion_point(copy_constructor:operations_research.ConstraintSolverParameters)
}

void ConstraintSolverParameters::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConstraintSolverParameters_ortools_2fconstraint_5fsolver_2fsolver_5fparameters_2eproto.base);
  profile_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&compress_trail_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&skip_locally_optimal_paths_) -
      reinterpret_cast<char*>(&compress_trail_)) + sizeof(skip_locally_optimal_paths_));
}

ConstraintSolverParameters::~ConstraintSolverParameters() {
  // @@protoc_insertion_point(destructor:operations_research.ConstraintSolverParameters)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConstraintSolverParameters::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  profile_file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConstraintSolverParameters::ArenaDtor(void* object) {
  ConstraintSolverParameters* _this = reinterpret_cast< ConstraintSolverParameters* >(object);
  (void)_this;
}
void ConstraintSolverParameters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConstraintSolverParameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConstraintSolverParameters& ConstraintSolverParameters::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConstraintSolverParameters_ortools_2fconstraint_5fsolver_2fsolver_5fparameters_2eproto.base);
  return *internal_default_instance();
}


void ConstraintSolverParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.ConstraintSolverParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  profile_file_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&compress_trail_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&skip_locally_optimal_paths_) -
      reinterpret_cast<char*>(&compress_trail_)) + sizeof(skip_locally_optimal_paths_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConstraintSolverParameters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .operations_research.ConstraintSolverParameters.TrailCompression compress_trail = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_compress_trail(static_cast<::operations_research::ConstraintSolverParameters_TrailCompression>(val));
        } else goto handle_unusual;
        continue;
      // int32 trail_block_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          trail_block_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 array_split_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          array_split_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool store_names = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          store_names_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool name_cast_variables = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          name_cast_variables_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool name_all_variables = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          name_all_variables_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool profile_propagation = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          profile_propagation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string profile_file = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_profile_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "operations_research.ConstraintSolverParameters.profile_file"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool trace_propagation = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          trace_propagation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool trace_search = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          trace_search_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool print_model = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          print_model_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool print_model_stats = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          print_model_stats_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool print_added_constraints = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          print_added_constraints_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool disable_solve = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          disable_solve_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool profile_local_search = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          profile_local_search_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool print_local_search_profile = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          print_local_search_profile_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool use_small_table = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          use_small_table_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool use_cumulative_edge_finder = 105;
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          use_cumulative_edge_finder_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool use_cumulative_time_table = 106;
      case 106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          use_cumulative_time_table_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool use_sequence_high_demand_tasks = 107;
      case 107:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          use_sequence_high_demand_tasks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool use_all_possible_disjunctions = 108;
      case 108:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          use_all_possible_disjunctions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_edge_finder_size = 109;
      case 109:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          max_edge_finder_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool diffn_use_cumulative = 110;
      case 110:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          diffn_use_cumulative_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool use_element_rmq = 111;
      case 111:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          use_element_rmq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool use_cumulative_time_table_sync = 112;
      case 112:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          use_cumulative_time_table_sync_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool skip_locally_optimal_paths = 113;
      case 113:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          skip_locally_optimal_paths_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 check_solution_period = 114;
      case 114:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          check_solution_period_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConstraintSolverParameters::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.ConstraintSolverParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .operations_research.ConstraintSolverParameters.TrailCompression compress_trail = 1;
  if (this->compress_trail() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_compress_trail(), target);
  }

  // int32 trail_block_size = 2;
  if (this->trail_block_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_trail_block_size(), target);
  }

  // int32 array_split_size = 3;
  if (this->array_split_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_array_split_size(), target);
  }

  // bool store_names = 4;
  if (this->store_names() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_store_names(), target);
  }

  // bool name_cast_variables = 5;
  if (this->name_cast_variables() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_name_cast_variables(), target);
  }

  // bool name_all_variables = 6;
  if (this->name_all_variables() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_name_all_variables(), target);
  }

  // bool profile_propagation = 7;
  if (this->profile_propagation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_profile_propagation(), target);
  }

  // string profile_file = 8;
  if (this->profile_file().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_profile_file().data(), static_cast<int>(this->_internal_profile_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "operations_research.ConstraintSolverParameters.profile_file");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_profile_file(), target);
  }

  // bool trace_propagation = 9;
  if (this->trace_propagation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_trace_propagation(), target);
  }

  // bool trace_search = 10;
  if (this->trace_search() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_trace_search(), target);
  }

  // bool print_model = 11;
  if (this->print_model() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_print_model(), target);
  }

  // bool print_model_stats = 12;
  if (this->print_model_stats() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_print_model_stats(), target);
  }

  // bool print_added_constraints = 13;
  if (this->print_added_constraints() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_print_added_constraints(), target);
  }

  // bool disable_solve = 15;
  if (this->disable_solve() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_disable_solve(), target);
  }

  // bool profile_local_search = 16;
  if (this->profile_local_search() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_profile_local_search(), target);
  }

  // bool print_local_search_profile = 17;
  if (this->print_local_search_profile() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_print_local_search_profile(), target);
  }

  // bool use_small_table = 101;
  if (this->use_small_table() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(101, this->_internal_use_small_table(), target);
  }

  // bool use_cumulative_edge_finder = 105;
  if (this->use_cumulative_edge_finder() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(105, this->_internal_use_cumulative_edge_finder(), target);
  }

  // bool use_cumulative_time_table = 106;
  if (this->use_cumulative_time_table() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(106, this->_internal_use_cumulative_time_table(), target);
  }

  // bool use_sequence_high_demand_tasks = 107;
  if (this->use_sequence_high_demand_tasks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(107, this->_internal_use_sequence_high_demand_tasks(), target);
  }

  // bool use_all_possible_disjunctions = 108;
  if (this->use_all_possible_disjunctions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(108, this->_internal_use_all_possible_disjunctions(), target);
  }

  // int32 max_edge_finder_size = 109;
  if (this->max_edge_finder_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(109, this->_internal_max_edge_finder_size(), target);
  }

  // bool diffn_use_cumulative = 110;
  if (this->diffn_use_cumulative() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(110, this->_internal_diffn_use_cumulative(), target);
  }

  // bool use_element_rmq = 111;
  if (this->use_element_rmq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(111, this->_internal_use_element_rmq(), target);
  }

  // bool use_cumulative_time_table_sync = 112;
  if (this->use_cumulative_time_table_sync() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(112, this->_internal_use_cumulative_time_table_sync(), target);
  }

  // bool skip_locally_optimal_paths = 113;
  if (this->skip_locally_optimal_paths() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(113, this->_internal_skip_locally_optimal_paths(), target);
  }

  // int32 check_solution_period = 114;
  if (this->check_solution_period() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(114, this->_internal_check_solution_period(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.ConstraintSolverParameters)
  return target;
}

size_t ConstraintSolverParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.ConstraintSolverParameters)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string profile_file = 8;
  if (this->profile_file().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_profile_file());
  }

  // .operations_research.ConstraintSolverParameters.TrailCompression compress_trail = 1;
  if (this->compress_trail() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_compress_trail());
  }

  // int32 trail_block_size = 2;
  if (this->trail_block_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_trail_block_size());
  }

  // int32 array_split_size = 3;
  if (this->array_split_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_array_split_size());
  }

  // bool store_names = 4;
  if (this->store_names() != 0) {
    total_size += 1 + 1;
  }

  // bool name_cast_variables = 5;
  if (this->name_cast_variables() != 0) {
    total_size += 1 + 1;
  }

  // bool name_all_variables = 6;
  if (this->name_all_variables() != 0) {
    total_size += 1 + 1;
  }

  // bool profile_propagation = 7;
  if (this->profile_propagation() != 0) {
    total_size += 1 + 1;
  }

  // bool print_model = 11;
  if (this->print_model() != 0) {
    total_size += 1 + 1;
  }

  // bool print_model_stats = 12;
  if (this->print_model_stats() != 0) {
    total_size += 1 + 1;
  }

  // bool print_added_constraints = 13;
  if (this->print_added_constraints() != 0) {
    total_size += 1 + 1;
  }

  // bool disable_solve = 15;
  if (this->disable_solve() != 0) {
    total_size += 1 + 1;
  }

  // bool profile_local_search = 16;
  if (this->profile_local_search() != 0) {
    total_size += 2 + 1;
  }

  // bool print_local_search_profile = 17;
  if (this->print_local_search_profile() != 0) {
    total_size += 2 + 1;
  }

  // bool trace_propagation = 9;
  if (this->trace_propagation() != 0) {
    total_size += 1 + 1;
  }

  // bool trace_search = 10;
  if (this->trace_search() != 0) {
    total_size += 1 + 1;
  }

  // int32 check_solution_period = 114;
  if (this->check_solution_period() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_check_solution_period());
  }

  // bool use_small_table = 101;
  if (this->use_small_table() != 0) {
    total_size += 2 + 1;
  }

  // bool use_cumulative_edge_finder = 105;
  if (this->use_cumulative_edge_finder() != 0) {
    total_size += 2 + 1;
  }

  // bool use_cumulative_time_table = 106;
  if (this->use_cumulative_time_table() != 0) {
    total_size += 2 + 1;
  }

  // bool use_cumulative_time_table_sync = 112;
  if (this->use_cumulative_time_table_sync() != 0) {
    total_size += 2 + 1;
  }

  // int32 max_edge_finder_size = 109;
  if (this->max_edge_finder_size() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_edge_finder_size());
  }

  // bool use_sequence_high_demand_tasks = 107;
  if (this->use_sequence_high_demand_tasks() != 0) {
    total_size += 2 + 1;
  }

  // bool use_all_possible_disjunctions = 108;
  if (this->use_all_possible_disjunctions() != 0) {
    total_size += 2 + 1;
  }

  // bool diffn_use_cumulative = 110;
  if (this->diffn_use_cumulative() != 0) {
    total_size += 2 + 1;
  }

  // bool use_element_rmq = 111;
  if (this->use_element_rmq() != 0) {
    total_size += 2 + 1;
  }

  // bool skip_locally_optimal_paths = 113;
  if (this->skip_locally_optimal_paths() != 0) {
    total_size += 2 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConstraintSolverParameters::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:operations_research.ConstraintSolverParameters)
  GOOGLE_DCHECK_NE(&from, this);
  const ConstraintSolverParameters* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConstraintSolverParameters>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:operations_research.ConstraintSolverParameters)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:operations_research.ConstraintSolverParameters)
    MergeFrom(*source);
  }
}

void ConstraintSolverParameters::MergeFrom(const ConstraintSolverParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:operations_research.ConstraintSolverParameters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.profile_file().size() > 0) {
    _internal_set_profile_file(from._internal_profile_file());
  }
  if (from.compress_trail() != 0) {
    _internal_set_compress_trail(from._internal_compress_trail());
  }
  if (from.trail_block_size() != 0) {
    _internal_set_trail_block_size(from._internal_trail_block_size());
  }
  if (from.array_split_size() != 0) {
    _internal_set_array_split_size(from._internal_array_split_size());
  }
  if (from.store_names() != 0) {
    _internal_set_store_names(from._internal_store_names());
  }
  if (from.name_cast_variables() != 0) {
    _internal_set_name_cast_variables(from._internal_name_cast_variables());
  }
  if (from.name_all_variables() != 0) {
    _internal_set_name_all_variables(from._internal_name_all_variables());
  }
  if (from.profile_propagation() != 0) {
    _internal_set_profile_propagation(from._internal_profile_propagation());
  }
  if (from.print_model() != 0) {
    _internal_set_print_model(from._internal_print_model());
  }
  if (from.print_model_stats() != 0) {
    _internal_set_print_model_stats(from._internal_print_model_stats());
  }
  if (from.print_added_constraints() != 0) {
    _internal_set_print_added_constraints(from._internal_print_added_constraints());
  }
  if (from.disable_solve() != 0) {
    _internal_set_disable_solve(from._internal_disable_solve());
  }
  if (from.profile_local_search() != 0) {
    _internal_set_profile_local_search(from._internal_profile_local_search());
  }
  if (from.print_local_search_profile() != 0) {
    _internal_set_print_local_search_profile(from._internal_print_local_search_profile());
  }
  if (from.trace_propagation() != 0) {
    _internal_set_trace_propagation(from._internal_trace_propagation());
  }
  if (from.trace_search() != 0) {
    _internal_set_trace_search(from._internal_trace_search());
  }
  if (from.check_solution_period() != 0) {
    _internal_set_check_solution_period(from._internal_check_solution_period());
  }
  if (from.use_small_table() != 0) {
    _internal_set_use_small_table(from._internal_use_small_table());
  }
  if (from.use_cumulative_edge_finder() != 0) {
    _internal_set_use_cumulative_edge_finder(from._internal_use_cumulative_edge_finder());
  }
  if (from.use_cumulative_time_table() != 0) {
    _internal_set_use_cumulative_time_table(from._internal_use_cumulative_time_table());
  }
  if (from.use_cumulative_time_table_sync() != 0) {
    _internal_set_use_cumulative_time_table_sync(from._internal_use_cumulative_time_table_sync());
  }
  if (from.max_edge_finder_size() != 0) {
    _internal_set_max_edge_finder_size(from._internal_max_edge_finder_size());
  }
  if (from.use_sequence_high_demand_tasks() != 0) {
    _internal_set_use_sequence_high_demand_tasks(from._internal_use_sequence_high_demand_tasks());
  }
  if (from.use_all_possible_disjunctions() != 0) {
    _internal_set_use_all_possible_disjunctions(from._internal_use_all_possible_disjunctions());
  }
  if (from.diffn_use_cumulative() != 0) {
    _internal_set_diffn_use_cumulative(from._internal_diffn_use_cumulative());
  }
  if (from.use_element_rmq() != 0) {
    _internal_set_use_element_rmq(from._internal_use_element_rmq());
  }
  if (from.skip_locally_optimal_paths() != 0) {
    _internal_set_skip_locally_optimal_paths(from._internal_skip_locally_optimal_paths());
  }
}

void ConstraintSolverParameters::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:operations_research.ConstraintSolverParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConstraintSolverParameters::CopyFrom(const ConstraintSolverParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.ConstraintSolverParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConstraintSolverParameters::IsInitialized() const {
  return true;
}

void ConstraintSolverParameters::InternalSwap(ConstraintSolverParameters* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  profile_file_.Swap(&other->profile_file_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConstraintSolverParameters, skip_locally_optimal_paths_)
      + sizeof(ConstraintSolverParameters::skip_locally_optimal_paths_)
      - PROTOBUF_FIELD_OFFSET(ConstraintSolverParameters, compress_trail_)>(
          reinterpret_cast<char*>(&compress_trail_),
          reinterpret_cast<char*>(&other->compress_trail_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConstraintSolverParameters::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace operations_research
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::operations_research::ConstraintSolverParameters* Arena::CreateMaybeMessage< ::operations_research::ConstraintSolverParameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::ConstraintSolverParameters >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
