// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ortools/constraint_solver/routing_parameters.proto

#include "ortools/constraint_solver/routing_parameters.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fduration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Duration_google_2fprotobuf_2fduration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ortools_2fconstraint_5fsolver_2fsolver_5fparameters_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConstraintSolverParameters_ortools_2fconstraint_5fsolver_2fsolver_5fparameters_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoutingSearchParameters_LocalSearchNeighborhoodOperators_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto;
namespace operations_research {
class RoutingSearchParameters_LocalSearchNeighborhoodOperatorsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoutingSearchParameters_LocalSearchNeighborhoodOperators> _instance;
} _RoutingSearchParameters_LocalSearchNeighborhoodOperators_default_instance_;
class RoutingSearchParametersDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoutingSearchParameters> _instance;
} _RoutingSearchParameters_default_instance_;
class RoutingModelParametersDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoutingModelParameters> _instance;
} _RoutingModelParameters_default_instance_;
}  // namespace operations_research
static void InitDefaultsscc_info_RoutingModelParameters_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::operations_research::_RoutingModelParameters_default_instance_;
    new (ptr) ::operations_research::RoutingModelParameters();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::operations_research::RoutingModelParameters::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RoutingModelParameters_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RoutingModelParameters_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto}, {
      &scc_info_ConstraintSolverParameters_ortools_2fconstraint_5fsolver_2fsolver_5fparameters_2eproto.base,}};

static void InitDefaultsscc_info_RoutingSearchParameters_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::operations_research::_RoutingSearchParameters_default_instance_;
    new (ptr) ::operations_research::RoutingSearchParameters();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::operations_research::RoutingSearchParameters::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RoutingSearchParameters_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RoutingSearchParameters_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto}, {
      &scc_info_RoutingSearchParameters_LocalSearchNeighborhoodOperators_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto.base,
      &scc_info_Duration_google_2fprotobuf_2fduration_2eproto.base,}};

static void InitDefaultsscc_info_RoutingSearchParameters_LocalSearchNeighborhoodOperators_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::operations_research::_RoutingSearchParameters_LocalSearchNeighborhoodOperators_default_instance_;
    new (ptr) ::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoutingSearchParameters_LocalSearchNeighborhoodOperators_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RoutingSearchParameters_LocalSearchNeighborhoodOperators_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators, use_relocate_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators, use_relocate_pair_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators, use_light_relocate_pair_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators, use_relocate_neighbors_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators, use_relocate_subtrip_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators, use_exchange_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators, use_exchange_pair_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators, use_exchange_subtrip_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators, use_cross_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators, use_cross_exchange_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators, use_relocate_expensive_chain_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators, use_two_opt_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators, use_or_opt_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators, use_lin_kernighan_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators, use_tsp_opt_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators, use_make_active_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators, use_relocate_and_make_active_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators, use_make_inactive_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators, use_make_chain_inactive_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators, use_swap_active_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators, use_extended_swap_active_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators, use_node_pair_swap_active_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators, use_path_lns_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators, use_full_path_lns_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators, use_tsp_lns_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators, use_inactive_lns_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators, use_global_cheapest_insertion_path_lns_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators, use_local_cheapest_insertion_path_lns_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators, use_global_cheapest_insertion_expensive_chain_lns_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators, use_local_cheapest_insertion_expensive_chain_lns_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, first_solution_strategy_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, use_unfiltered_first_solution_strategy_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, savings_neighbors_ratio_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, savings_max_memory_usage_bytes_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, savings_add_reverse_arcs_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, savings_arc_coefficient_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, savings_parallel_routes_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, cheapest_insertion_farthest_seeds_ratio_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, cheapest_insertion_first_solution_neighbors_ratio_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, cheapest_insertion_ls_operator_neighbors_ratio_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, christofides_use_minimum_matching_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, local_search_operators_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, relocate_expensive_chain_num_arcs_to_consider_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, heuristic_expensive_chain_lns_num_arcs_to_consider_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, local_search_metaheuristic_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, guided_local_search_lambda_coefficient_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, use_depth_first_search_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, use_cp_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, use_cp_sat_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, continuous_scheduling_solver_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, mixed_integer_scheduling_solver_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, optimization_step_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, number_of_solutions_to_collect_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, solution_limit_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, time_limit_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, lns_time_limit_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, use_full_propagation_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, log_search_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, log_cost_scaling_factor_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingSearchParameters, log_cost_offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingModelParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingModelParameters, solver_parameters_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingModelParameters, reduce_vehicle_cost_model_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RoutingModelParameters, max_callback_cache_size_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators)},
  { 35, -1, sizeof(::operations_research::RoutingSearchParameters)},
  { 70, -1, sizeof(::operations_research::RoutingModelParameters)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::operations_research::_RoutingSearchParameters_LocalSearchNeighborhoodOperators_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::operations_research::_RoutingSearchParameters_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::operations_research::_RoutingModelParameters_default_instance_),
};

const char descriptor_table_protodef_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n2ortools/constraint_solver/routing_para"
  "meters.proto\022\023operations_research\032\036googl"
  "e/protobuf/duration.proto\032-ortools/const"
  "raint_solver/routing_enums.proto\0321ortool"
  "s/constraint_solver/solver_parameters.pr"
  "oto\032#ortools/util/optional_boolean.proto"
  "\"\361\034\n\027RoutingSearchParameters\022Q\n\027first_so"
  "lution_strategy\030\001 \001(\01620.operations_resea"
  "rch.FirstSolutionStrategy.Value\022.\n&use_u"
  "nfiltered_first_solution_strategy\030\002 \001(\010\022"
  "\037\n\027savings_neighbors_ratio\030\016 \001(\001\022&\n\036savi"
  "ngs_max_memory_usage_bytes\030\027 \001(\001\022 \n\030savi"
  "ngs_add_reverse_arcs\030\017 \001(\010\022\037\n\027savings_ar"
  "c_coefficient\030\022 \001(\001\022\037\n\027savings_parallel_"
  "routes\030\023 \001(\010\022/\n\'cheapest_insertion_farth"
  "est_seeds_ratio\030\020 \001(\001\0229\n1cheapest_insert"
  "ion_first_solution_neighbors_ratio\030\025 \001(\001"
  "\0226\n.cheapest_insertion_ls_operator_neigh"
  "bors_ratio\030\037 \001(\001\022)\n!christofides_use_min"
  "imum_matching\030\036 \001(\010\022m\n\026local_search_oper"
  "ators\030\003 \001(\0132M.operations_research.Routin"
  "gSearchParameters.LocalSearchNeighborhoo"
  "dOperators\0225\n-relocate_expensive_chain_n"
  "um_arcs_to_consider\030\024 \001(\005\022:\n2heuristic_e"
  "xpensive_chain_lns_num_arcs_to_consider\030"
  "  \001(\005\022W\n\032local_search_metaheuristic\030\004 \001("
  "\01623.operations_research.LocalSearchMetah"
  "euristic.Value\022.\n&guided_local_search_la"
  "mbda_coefficient\030\005 \001(\001\022\036\n\026use_depth_firs"
  "t_search\030\006 \001(\010\0224\n\006use_cp\030\034 \001(\0162$.operati"
  "ons_research.OptionalBoolean\0228\n\nuse_cp_s"
  "at\030\033 \001(\0162$.operations_research.OptionalB"
  "oolean\022c\n\034continuous_scheduling_solver\030!"
  " \001(\0162=.operations_research.RoutingSearch"
  "Parameters.SchedulingSolver\022f\n\037mixed_int"
  "eger_scheduling_solver\030\" \001(\0162=.operation"
  "s_research.RoutingSearchParameters.Sched"
  "ulingSolver\022\031\n\021optimization_step\030\007 \001(\001\022&"
  "\n\036number_of_solutions_to_collect\030\021 \001(\005\022\026"
  "\n\016solution_limit\030\010 \001(\003\022-\n\ntime_limit\030\t \001"
  "(\0132\031.google.protobuf.Duration\0221\n\016lns_tim"
  "e_limit\030\n \001(\0132\031.google.protobuf.Duration"
  "\022\034\n\024use_full_propagation\030\013 \001(\010\022\022\n\nlog_se"
  "arch\030\r \001(\010\022\037\n\027log_cost_scaling_factor\030\026 "
  "\001(\001\022\027\n\017log_cost_offset\030\035 \001(\001\032\260\020\n LocalSe"
  "archNeighborhoodOperators\022:\n\014use_relocat"
  "e\030\001 \001(\0162$.operations_research.OptionalBo"
  "olean\022\?\n\021use_relocate_pair\030\002 \001(\0162$.opera"
  "tions_research.OptionalBoolean\022E\n\027use_li"
  "ght_relocate_pair\030\030 \001(\0162$.operations_res"
  "earch.OptionalBoolean\022D\n\026use_relocate_ne"
  "ighbors\030\003 \001(\0162$.operations_research.Opti"
  "onalBoolean\022B\n\024use_relocate_subtrip\030\031 \001("
  "\0162$.operations_research.OptionalBoolean\022"
  ":\n\014use_exchange\030\004 \001(\0162$.operations_resea"
  "rch.OptionalBoolean\022\?\n\021use_exchange_pair"
  "\030\026 \001(\0162$.operations_research.OptionalBoo"
  "lean\022B\n\024use_exchange_subtrip\030\032 \001(\0162$.ope"
  "rations_research.OptionalBoolean\0227\n\tuse_"
  "cross\030\005 \001(\0162$.operations_research.Option"
  "alBoolean\022@\n\022use_cross_exchange\030\006 \001(\0162$."
  "operations_research.OptionalBoolean\022J\n\034u"
  "se_relocate_expensive_chain\030\027 \001(\0162$.oper"
  "ations_research.OptionalBoolean\0229\n\013use_t"
  "wo_opt\030\007 \001(\0162$.operations_research.Optio"
  "nalBoolean\0228\n\nuse_or_opt\030\010 \001(\0162$.operati"
  "ons_research.OptionalBoolean\022\?\n\021use_lin_"
  "kernighan\030\t \001(\0162$.operations_research.Op"
  "tionalBoolean\0229\n\013use_tsp_opt\030\n \001(\0162$.ope"
  "rations_research.OptionalBoolean\022=\n\017use_"
  "make_active\030\013 \001(\0162$.operations_research."
  "OptionalBoolean\022J\n\034use_relocate_and_make"
  "_active\030\025 \001(\0162$.operations_research.Opti"
  "onalBoolean\022\?\n\021use_make_inactive\030\014 \001(\0162$"
  ".operations_research.OptionalBoolean\022E\n\027"
  "use_make_chain_inactive\030\r \001(\0162$.operatio"
  "ns_research.OptionalBoolean\022=\n\017use_swap_"
  "active\030\016 \001(\0162$.operations_research.Optio"
  "nalBoolean\022F\n\030use_extended_swap_active\030\017"
  " \001(\0162$.operations_research.OptionalBoole"
  "an\022G\n\031use_node_pair_swap_active\030\024 \001(\0162$."
  "operations_research.OptionalBoolean\022:\n\014u"
  "se_path_lns\030\020 \001(\0162$.operations_research."
  "OptionalBoolean\022\?\n\021use_full_path_lns\030\021 \001"
  "(\0162$.operations_research.OptionalBoolean"
  "\0229\n\013use_tsp_lns\030\022 \001(\0162$.operations_resea"
  "rch.OptionalBoolean\022>\n\020use_inactive_lns\030"
  "\023 \001(\0162$.operations_research.OptionalBool"
  "ean\022T\n&use_global_cheapest_insertion_pat"
  "h_lns\030\033 \001(\0162$.operations_research.Option"
  "alBoolean\022S\n%use_local_cheapest_insertio"
  "n_path_lns\030\034 \001(\0162$.operations_research.O"
  "ptionalBoolean\022_\n1use_global_cheapest_in"
  "sertion_expensive_chain_lns\030\035 \001(\0162$.oper"
  "ations_research.OptionalBoolean\022^\n0use_l"
  "ocal_cheapest_insertion_expensive_chain_"
  "lns\030\036 \001(\0162$.operations_research.Optional"
  "Boolean\"3\n\020SchedulingSolver\022\t\n\005UNSET\020\000\022\010"
  "\n\004GLOP\020\001\022\n\n\006CP_SAT\020\002\"\250\001\n\026RoutingModelPar"
  "ameters\022J\n\021solver_parameters\030\001 \001(\0132/.ope"
  "rations_research.ConstraintSolverParamet"
  "ers\022!\n\031reduce_vehicle_cost_model\030\002 \001(\010\022\037"
  "\n\027max_callback_cache_size\030\003 \001(\005BI\n#com.g"
  "oogle.ortools.constraintsolverP\001\252\002\037Googl"
  "e.OrTools.ConstraintSolverb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto_deps[4] = {
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_ortools_2fconstraint_5fsolver_2frouting_5fenums_2eproto,
  &::descriptor_table_ortools_2fconstraint_5fsolver_2fsolver_5fparameters_2eproto,
  &::descriptor_table_ortools_2futil_2foptional_5fboolean_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto_sccs[3] = {
  &scc_info_RoutingModelParameters_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto.base,
  &scc_info_RoutingSearchParameters_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto.base,
  &scc_info_RoutingSearchParameters_LocalSearchNeighborhoodOperators_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto = {
  false, false, descriptor_table_protodef_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto, "ortools/constraint_solver/routing_parameters.proto", 4194,
  &descriptor_table_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto_once, descriptor_table_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto_sccs, descriptor_table_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto_deps, 3, 4,
  schemas, file_default_instances, TableStruct_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto::offsets,
  file_level_metadata_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto, 3, file_level_enum_descriptors_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto, file_level_service_descriptors_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto)), true);
namespace operations_research {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RoutingSearchParameters_SchedulingSolver_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto);
  return file_level_enum_descriptors_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto[0];
}
bool RoutingSearchParameters_SchedulingSolver_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RoutingSearchParameters_SchedulingSolver RoutingSearchParameters::UNSET;
constexpr RoutingSearchParameters_SchedulingSolver RoutingSearchParameters::GLOP;
constexpr RoutingSearchParameters_SchedulingSolver RoutingSearchParameters::CP_SAT;
constexpr RoutingSearchParameters_SchedulingSolver RoutingSearchParameters::SchedulingSolver_MIN;
constexpr RoutingSearchParameters_SchedulingSolver RoutingSearchParameters::SchedulingSolver_MAX;
constexpr int RoutingSearchParameters::SchedulingSolver_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void RoutingSearchParameters_LocalSearchNeighborhoodOperators::InitAsDefaultInstance() {
}
class RoutingSearchParameters_LocalSearchNeighborhoodOperators::_Internal {
 public:
};

RoutingSearchParameters_LocalSearchNeighborhoodOperators::RoutingSearchParameters_LocalSearchNeighborhoodOperators(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators)
}
RoutingSearchParameters_LocalSearchNeighborhoodOperators::RoutingSearchParameters_LocalSearchNeighborhoodOperators(const RoutingSearchParameters_LocalSearchNeighborhoodOperators& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&use_relocate_, &from.use_relocate_,
    static_cast<size_t>(reinterpret_cast<char*>(&use_local_cheapest_insertion_expensive_chain_lns_) -
    reinterpret_cast<char*>(&use_relocate_)) + sizeof(use_local_cheapest_insertion_expensive_chain_lns_));
  // @@protoc_insertion_point(copy_constructor:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators)
}

void RoutingSearchParameters_LocalSearchNeighborhoodOperators::SharedCtor() {
  ::memset(&use_relocate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_local_cheapest_insertion_expensive_chain_lns_) -
      reinterpret_cast<char*>(&use_relocate_)) + sizeof(use_local_cheapest_insertion_expensive_chain_lns_));
}

RoutingSearchParameters_LocalSearchNeighborhoodOperators::~RoutingSearchParameters_LocalSearchNeighborhoodOperators() {
  // @@protoc_insertion_point(destructor:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RoutingSearchParameters_LocalSearchNeighborhoodOperators::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RoutingSearchParameters_LocalSearchNeighborhoodOperators::ArenaDtor(void* object) {
  RoutingSearchParameters_LocalSearchNeighborhoodOperators* _this = reinterpret_cast< RoutingSearchParameters_LocalSearchNeighborhoodOperators* >(object);
  (void)_this;
}
void RoutingSearchParameters_LocalSearchNeighborhoodOperators::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoutingSearchParameters_LocalSearchNeighborhoodOperators::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoutingSearchParameters_LocalSearchNeighborhoodOperators& RoutingSearchParameters_LocalSearchNeighborhoodOperators::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoutingSearchParameters_LocalSearchNeighborhoodOperators_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto.base);
  return *internal_default_instance();
}


void RoutingSearchParameters_LocalSearchNeighborhoodOperators::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&use_relocate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_local_cheapest_insertion_expensive_chain_lns_) -
      reinterpret_cast<char*>(&use_relocate_)) + sizeof(use_local_cheapest_insertion_expensive_chain_lns_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoutingSearchParameters_LocalSearchNeighborhoodOperators::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .operations_research.OptionalBoolean use_relocate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_use_relocate(static_cast<::operations_research::OptionalBoolean>(val));
        } else goto handle_unusual;
        continue;
      // .operations_research.OptionalBoolean use_relocate_pair = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_use_relocate_pair(static_cast<::operations_research::OptionalBoolean>(val));
        } else goto handle_unusual;
        continue;
      // .operations_research.OptionalBoolean use_relocate_neighbors = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_use_relocate_neighbors(static_cast<::operations_research::OptionalBoolean>(val));
        } else goto handle_unusual;
        continue;
      // .operations_research.OptionalBoolean use_exchange = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_use_exchange(static_cast<::operations_research::OptionalBoolean>(val));
        } else goto handle_unusual;
        continue;
      // .operations_research.OptionalBoolean use_cross = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_use_cross(static_cast<::operations_research::OptionalBoolean>(val));
        } else goto handle_unusual;
        continue;
      // .operations_research.OptionalBoolean use_cross_exchange = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_use_cross_exchange(static_cast<::operations_research::OptionalBoolean>(val));
        } else goto handle_unusual;
        continue;
      // .operations_research.OptionalBoolean use_two_opt = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_use_two_opt(static_cast<::operations_research::OptionalBoolean>(val));
        } else goto handle_unusual;
        continue;
      // .operations_research.OptionalBoolean use_or_opt = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_use_or_opt(static_cast<::operations_research::OptionalBoolean>(val));
        } else goto handle_unusual;
        continue;
      // .operations_research.OptionalBoolean use_lin_kernighan = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_use_lin_kernighan(static_cast<::operations_research::OptionalBoolean>(val));
        } else goto handle_unusual;
        continue;
      // .operations_research.OptionalBoolean use_tsp_opt = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_use_tsp_opt(static_cast<::operations_research::OptionalBoolean>(val));
        } else goto handle_unusual;
        continue;
      // .operations_research.OptionalBoolean use_make_active = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_use_make_active(static_cast<::operations_research::OptionalBoolean>(val));
        } else goto handle_unusual;
        continue;
      // .operations_research.OptionalBoolean use_make_inactive = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_use_make_inactive(static_cast<::operations_research::OptionalBoolean>(val));
        } else goto handle_unusual;
        continue;
      // .operations_research.OptionalBoolean use_make_chain_inactive = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_use_make_chain_inactive(static_cast<::operations_research::OptionalBoolean>(val));
        } else goto handle_unusual;
        continue;
      // .operations_research.OptionalBoolean use_swap_active = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_use_swap_active(static_cast<::operations_research::OptionalBoolean>(val));
        } else goto handle_unusual;
        continue;
      // .operations_research.OptionalBoolean use_extended_swap_active = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_use_extended_swap_active(static_cast<::operations_research::OptionalBoolean>(val));
        } else goto handle_unusual;
        continue;
      // .operations_research.OptionalBoolean use_path_lns = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_use_path_lns(static_cast<::operations_research::OptionalBoolean>(val));
        } else goto handle_unusual;
        continue;
      // .operations_research.OptionalBoolean use_full_path_lns = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_use_full_path_lns(static_cast<::operations_research::OptionalBoolean>(val));
        } else goto handle_unusual;
        continue;
      // .operations_research.OptionalBoolean use_tsp_lns = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_use_tsp_lns(static_cast<::operations_research::OptionalBoolean>(val));
        } else goto handle_unusual;
        continue;
      // .operations_research.OptionalBoolean use_inactive_lns = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_use_inactive_lns(static_cast<::operations_research::OptionalBoolean>(val));
        } else goto handle_unusual;
        continue;
      // .operations_research.OptionalBoolean use_node_pair_swap_active = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_use_node_pair_swap_active(static_cast<::operations_research::OptionalBoolean>(val));
        } else goto handle_unusual;
        continue;
      // .operations_research.OptionalBoolean use_relocate_and_make_active = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_use_relocate_and_make_active(static_cast<::operations_research::OptionalBoolean>(val));
        } else goto handle_unusual;
        continue;
      // .operations_research.OptionalBoolean use_exchange_pair = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_use_exchange_pair(static_cast<::operations_research::OptionalBoolean>(val));
        } else goto handle_unusual;
        continue;
      // .operations_research.OptionalBoolean use_relocate_expensive_chain = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_use_relocate_expensive_chain(static_cast<::operations_research::OptionalBoolean>(val));
        } else goto handle_unusual;
        continue;
      // .operations_research.OptionalBoolean use_light_relocate_pair = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_use_light_relocate_pair(static_cast<::operations_research::OptionalBoolean>(val));
        } else goto handle_unusual;
        continue;
      // .operations_research.OptionalBoolean use_relocate_subtrip = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_use_relocate_subtrip(static_cast<::operations_research::OptionalBoolean>(val));
        } else goto handle_unusual;
        continue;
      // .operations_research.OptionalBoolean use_exchange_subtrip = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_use_exchange_subtrip(static_cast<::operations_research::OptionalBoolean>(val));
        } else goto handle_unusual;
        continue;
      // .operations_research.OptionalBoolean use_global_cheapest_insertion_path_lns = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_use_global_cheapest_insertion_path_lns(static_cast<::operations_research::OptionalBoolean>(val));
        } else goto handle_unusual;
        continue;
      // .operations_research.OptionalBoolean use_local_cheapest_insertion_path_lns = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_use_local_cheapest_insertion_path_lns(static_cast<::operations_research::OptionalBoolean>(val));
        } else goto handle_unusual;
        continue;
      // .operations_research.OptionalBoolean use_global_cheapest_insertion_expensive_chain_lns = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_use_global_cheapest_insertion_expensive_chain_lns(static_cast<::operations_research::OptionalBoolean>(val));
        } else goto handle_unusual;
        continue;
      // .operations_research.OptionalBoolean use_local_cheapest_insertion_expensive_chain_lns = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_use_local_cheapest_insertion_expensive_chain_lns(static_cast<::operations_research::OptionalBoolean>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoutingSearchParameters_LocalSearchNeighborhoodOperators::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .operations_research.OptionalBoolean use_relocate = 1;
  if (this->use_relocate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_use_relocate(), target);
  }

  // .operations_research.OptionalBoolean use_relocate_pair = 2;
  if (this->use_relocate_pair() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_use_relocate_pair(), target);
  }

  // .operations_research.OptionalBoolean use_relocate_neighbors = 3;
  if (this->use_relocate_neighbors() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_use_relocate_neighbors(), target);
  }

  // .operations_research.OptionalBoolean use_exchange = 4;
  if (this->use_exchange() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_use_exchange(), target);
  }

  // .operations_research.OptionalBoolean use_cross = 5;
  if (this->use_cross() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_use_cross(), target);
  }

  // .operations_research.OptionalBoolean use_cross_exchange = 6;
  if (this->use_cross_exchange() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_use_cross_exchange(), target);
  }

  // .operations_research.OptionalBoolean use_two_opt = 7;
  if (this->use_two_opt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_use_two_opt(), target);
  }

  // .operations_research.OptionalBoolean use_or_opt = 8;
  if (this->use_or_opt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_use_or_opt(), target);
  }

  // .operations_research.OptionalBoolean use_lin_kernighan = 9;
  if (this->use_lin_kernighan() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_use_lin_kernighan(), target);
  }

  // .operations_research.OptionalBoolean use_tsp_opt = 10;
  if (this->use_tsp_opt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_use_tsp_opt(), target);
  }

  // .operations_research.OptionalBoolean use_make_active = 11;
  if (this->use_make_active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_use_make_active(), target);
  }

  // .operations_research.OptionalBoolean use_make_inactive = 12;
  if (this->use_make_inactive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->_internal_use_make_inactive(), target);
  }

  // .operations_research.OptionalBoolean use_make_chain_inactive = 13;
  if (this->use_make_chain_inactive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      13, this->_internal_use_make_chain_inactive(), target);
  }

  // .operations_research.OptionalBoolean use_swap_active = 14;
  if (this->use_swap_active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      14, this->_internal_use_swap_active(), target);
  }

  // .operations_research.OptionalBoolean use_extended_swap_active = 15;
  if (this->use_extended_swap_active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      15, this->_internal_use_extended_swap_active(), target);
  }

  // .operations_research.OptionalBoolean use_path_lns = 16;
  if (this->use_path_lns() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      16, this->_internal_use_path_lns(), target);
  }

  // .operations_research.OptionalBoolean use_full_path_lns = 17;
  if (this->use_full_path_lns() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      17, this->_internal_use_full_path_lns(), target);
  }

  // .operations_research.OptionalBoolean use_tsp_lns = 18;
  if (this->use_tsp_lns() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      18, this->_internal_use_tsp_lns(), target);
  }

  // .operations_research.OptionalBoolean use_inactive_lns = 19;
  if (this->use_inactive_lns() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      19, this->_internal_use_inactive_lns(), target);
  }

  // .operations_research.OptionalBoolean use_node_pair_swap_active = 20;
  if (this->use_node_pair_swap_active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      20, this->_internal_use_node_pair_swap_active(), target);
  }

  // .operations_research.OptionalBoolean use_relocate_and_make_active = 21;
  if (this->use_relocate_and_make_active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      21, this->_internal_use_relocate_and_make_active(), target);
  }

  // .operations_research.OptionalBoolean use_exchange_pair = 22;
  if (this->use_exchange_pair() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      22, this->_internal_use_exchange_pair(), target);
  }

  // .operations_research.OptionalBoolean use_relocate_expensive_chain = 23;
  if (this->use_relocate_expensive_chain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      23, this->_internal_use_relocate_expensive_chain(), target);
  }

  // .operations_research.OptionalBoolean use_light_relocate_pair = 24;
  if (this->use_light_relocate_pair() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      24, this->_internal_use_light_relocate_pair(), target);
  }

  // .operations_research.OptionalBoolean use_relocate_subtrip = 25;
  if (this->use_relocate_subtrip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      25, this->_internal_use_relocate_subtrip(), target);
  }

  // .operations_research.OptionalBoolean use_exchange_subtrip = 26;
  if (this->use_exchange_subtrip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      26, this->_internal_use_exchange_subtrip(), target);
  }

  // .operations_research.OptionalBoolean use_global_cheapest_insertion_path_lns = 27;
  if (this->use_global_cheapest_insertion_path_lns() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      27, this->_internal_use_global_cheapest_insertion_path_lns(), target);
  }

  // .operations_research.OptionalBoolean use_local_cheapest_insertion_path_lns = 28;
  if (this->use_local_cheapest_insertion_path_lns() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      28, this->_internal_use_local_cheapest_insertion_path_lns(), target);
  }

  // .operations_research.OptionalBoolean use_global_cheapest_insertion_expensive_chain_lns = 29;
  if (this->use_global_cheapest_insertion_expensive_chain_lns() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      29, this->_internal_use_global_cheapest_insertion_expensive_chain_lns(), target);
  }

  // .operations_research.OptionalBoolean use_local_cheapest_insertion_expensive_chain_lns = 30;
  if (this->use_local_cheapest_insertion_expensive_chain_lns() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      30, this->_internal_use_local_cheapest_insertion_expensive_chain_lns(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators)
  return target;
}

size_t RoutingSearchParameters_LocalSearchNeighborhoodOperators::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .operations_research.OptionalBoolean use_relocate = 1;
  if (this->use_relocate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_use_relocate());
  }

  // .operations_research.OptionalBoolean use_relocate_pair = 2;
  if (this->use_relocate_pair() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_use_relocate_pair());
  }

  // .operations_research.OptionalBoolean use_relocate_neighbors = 3;
  if (this->use_relocate_neighbors() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_use_relocate_neighbors());
  }

  // .operations_research.OptionalBoolean use_exchange = 4;
  if (this->use_exchange() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_use_exchange());
  }

  // .operations_research.OptionalBoolean use_cross = 5;
  if (this->use_cross() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_use_cross());
  }

  // .operations_research.OptionalBoolean use_cross_exchange = 6;
  if (this->use_cross_exchange() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_use_cross_exchange());
  }

  // .operations_research.OptionalBoolean use_two_opt = 7;
  if (this->use_two_opt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_use_two_opt());
  }

  // .operations_research.OptionalBoolean use_or_opt = 8;
  if (this->use_or_opt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_use_or_opt());
  }

  // .operations_research.OptionalBoolean use_lin_kernighan = 9;
  if (this->use_lin_kernighan() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_use_lin_kernighan());
  }

  // .operations_research.OptionalBoolean use_tsp_opt = 10;
  if (this->use_tsp_opt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_use_tsp_opt());
  }

  // .operations_research.OptionalBoolean use_make_active = 11;
  if (this->use_make_active() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_use_make_active());
  }

  // .operations_research.OptionalBoolean use_make_inactive = 12;
  if (this->use_make_inactive() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_use_make_inactive());
  }

  // .operations_research.OptionalBoolean use_make_chain_inactive = 13;
  if (this->use_make_chain_inactive() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_use_make_chain_inactive());
  }

  // .operations_research.OptionalBoolean use_swap_active = 14;
  if (this->use_swap_active() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_use_swap_active());
  }

  // .operations_research.OptionalBoolean use_extended_swap_active = 15;
  if (this->use_extended_swap_active() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_use_extended_swap_active());
  }

  // .operations_research.OptionalBoolean use_path_lns = 16;
  if (this->use_path_lns() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_use_path_lns());
  }

  // .operations_research.OptionalBoolean use_full_path_lns = 17;
  if (this->use_full_path_lns() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_use_full_path_lns());
  }

  // .operations_research.OptionalBoolean use_tsp_lns = 18;
  if (this->use_tsp_lns() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_use_tsp_lns());
  }

  // .operations_research.OptionalBoolean use_inactive_lns = 19;
  if (this->use_inactive_lns() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_use_inactive_lns());
  }

  // .operations_research.OptionalBoolean use_node_pair_swap_active = 20;
  if (this->use_node_pair_swap_active() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_use_node_pair_swap_active());
  }

  // .operations_research.OptionalBoolean use_relocate_and_make_active = 21;
  if (this->use_relocate_and_make_active() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_use_relocate_and_make_active());
  }

  // .operations_research.OptionalBoolean use_exchange_pair = 22;
  if (this->use_exchange_pair() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_use_exchange_pair());
  }

  // .operations_research.OptionalBoolean use_relocate_expensive_chain = 23;
  if (this->use_relocate_expensive_chain() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_use_relocate_expensive_chain());
  }

  // .operations_research.OptionalBoolean use_light_relocate_pair = 24;
  if (this->use_light_relocate_pair() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_use_light_relocate_pair());
  }

  // .operations_research.OptionalBoolean use_relocate_subtrip = 25;
  if (this->use_relocate_subtrip() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_use_relocate_subtrip());
  }

  // .operations_research.OptionalBoolean use_exchange_subtrip = 26;
  if (this->use_exchange_subtrip() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_use_exchange_subtrip());
  }

  // .operations_research.OptionalBoolean use_global_cheapest_insertion_path_lns = 27;
  if (this->use_global_cheapest_insertion_path_lns() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_use_global_cheapest_insertion_path_lns());
  }

  // .operations_research.OptionalBoolean use_local_cheapest_insertion_path_lns = 28;
  if (this->use_local_cheapest_insertion_path_lns() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_use_local_cheapest_insertion_path_lns());
  }

  // .operations_research.OptionalBoolean use_global_cheapest_insertion_expensive_chain_lns = 29;
  if (this->use_global_cheapest_insertion_expensive_chain_lns() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_use_global_cheapest_insertion_expensive_chain_lns());
  }

  // .operations_research.OptionalBoolean use_local_cheapest_insertion_expensive_chain_lns = 30;
  if (this->use_local_cheapest_insertion_expensive_chain_lns() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_use_local_cheapest_insertion_expensive_chain_lns());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoutingSearchParameters_LocalSearchNeighborhoodOperators::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators)
  GOOGLE_DCHECK_NE(&from, this);
  const RoutingSearchParameters_LocalSearchNeighborhoodOperators* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoutingSearchParameters_LocalSearchNeighborhoodOperators>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators)
    MergeFrom(*source);
  }
}

void RoutingSearchParameters_LocalSearchNeighborhoodOperators::MergeFrom(const RoutingSearchParameters_LocalSearchNeighborhoodOperators& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.use_relocate() != 0) {
    _internal_set_use_relocate(from._internal_use_relocate());
  }
  if (from.use_relocate_pair() != 0) {
    _internal_set_use_relocate_pair(from._internal_use_relocate_pair());
  }
  if (from.use_relocate_neighbors() != 0) {
    _internal_set_use_relocate_neighbors(from._internal_use_relocate_neighbors());
  }
  if (from.use_exchange() != 0) {
    _internal_set_use_exchange(from._internal_use_exchange());
  }
  if (from.use_cross() != 0) {
    _internal_set_use_cross(from._internal_use_cross());
  }
  if (from.use_cross_exchange() != 0) {
    _internal_set_use_cross_exchange(from._internal_use_cross_exchange());
  }
  if (from.use_two_opt() != 0) {
    _internal_set_use_two_opt(from._internal_use_two_opt());
  }
  if (from.use_or_opt() != 0) {
    _internal_set_use_or_opt(from._internal_use_or_opt());
  }
  if (from.use_lin_kernighan() != 0) {
    _internal_set_use_lin_kernighan(from._internal_use_lin_kernighan());
  }
  if (from.use_tsp_opt() != 0) {
    _internal_set_use_tsp_opt(from._internal_use_tsp_opt());
  }
  if (from.use_make_active() != 0) {
    _internal_set_use_make_active(from._internal_use_make_active());
  }
  if (from.use_make_inactive() != 0) {
    _internal_set_use_make_inactive(from._internal_use_make_inactive());
  }
  if (from.use_make_chain_inactive() != 0) {
    _internal_set_use_make_chain_inactive(from._internal_use_make_chain_inactive());
  }
  if (from.use_swap_active() != 0) {
    _internal_set_use_swap_active(from._internal_use_swap_active());
  }
  if (from.use_extended_swap_active() != 0) {
    _internal_set_use_extended_swap_active(from._internal_use_extended_swap_active());
  }
  if (from.use_path_lns() != 0) {
    _internal_set_use_path_lns(from._internal_use_path_lns());
  }
  if (from.use_full_path_lns() != 0) {
    _internal_set_use_full_path_lns(from._internal_use_full_path_lns());
  }
  if (from.use_tsp_lns() != 0) {
    _internal_set_use_tsp_lns(from._internal_use_tsp_lns());
  }
  if (from.use_inactive_lns() != 0) {
    _internal_set_use_inactive_lns(from._internal_use_inactive_lns());
  }
  if (from.use_node_pair_swap_active() != 0) {
    _internal_set_use_node_pair_swap_active(from._internal_use_node_pair_swap_active());
  }
  if (from.use_relocate_and_make_active() != 0) {
    _internal_set_use_relocate_and_make_active(from._internal_use_relocate_and_make_active());
  }
  if (from.use_exchange_pair() != 0) {
    _internal_set_use_exchange_pair(from._internal_use_exchange_pair());
  }
  if (from.use_relocate_expensive_chain() != 0) {
    _internal_set_use_relocate_expensive_chain(from._internal_use_relocate_expensive_chain());
  }
  if (from.use_light_relocate_pair() != 0) {
    _internal_set_use_light_relocate_pair(from._internal_use_light_relocate_pair());
  }
  if (from.use_relocate_subtrip() != 0) {
    _internal_set_use_relocate_subtrip(from._internal_use_relocate_subtrip());
  }
  if (from.use_exchange_subtrip() != 0) {
    _internal_set_use_exchange_subtrip(from._internal_use_exchange_subtrip());
  }
  if (from.use_global_cheapest_insertion_path_lns() != 0) {
    _internal_set_use_global_cheapest_insertion_path_lns(from._internal_use_global_cheapest_insertion_path_lns());
  }
  if (from.use_local_cheapest_insertion_path_lns() != 0) {
    _internal_set_use_local_cheapest_insertion_path_lns(from._internal_use_local_cheapest_insertion_path_lns());
  }
  if (from.use_global_cheapest_insertion_expensive_chain_lns() != 0) {
    _internal_set_use_global_cheapest_insertion_expensive_chain_lns(from._internal_use_global_cheapest_insertion_expensive_chain_lns());
  }
  if (from.use_local_cheapest_insertion_expensive_chain_lns() != 0) {
    _internal_set_use_local_cheapest_insertion_expensive_chain_lns(from._internal_use_local_cheapest_insertion_expensive_chain_lns());
  }
}

void RoutingSearchParameters_LocalSearchNeighborhoodOperators::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoutingSearchParameters_LocalSearchNeighborhoodOperators::CopyFrom(const RoutingSearchParameters_LocalSearchNeighborhoodOperators& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutingSearchParameters_LocalSearchNeighborhoodOperators::IsInitialized() const {
  return true;
}

void RoutingSearchParameters_LocalSearchNeighborhoodOperators::InternalSwap(RoutingSearchParameters_LocalSearchNeighborhoodOperators* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoutingSearchParameters_LocalSearchNeighborhoodOperators, use_local_cheapest_insertion_expensive_chain_lns_)
      + sizeof(RoutingSearchParameters_LocalSearchNeighborhoodOperators::use_local_cheapest_insertion_expensive_chain_lns_)
      - PROTOBUF_FIELD_OFFSET(RoutingSearchParameters_LocalSearchNeighborhoodOperators, use_relocate_)>(
          reinterpret_cast<char*>(&use_relocate_),
          reinterpret_cast<char*>(&other->use_relocate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoutingSearchParameters_LocalSearchNeighborhoodOperators::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoutingSearchParameters::InitAsDefaultInstance() {
  ::operations_research::_RoutingSearchParameters_default_instance_._instance.get_mutable()->local_search_operators_ = const_cast< ::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators*>(
      ::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators::internal_default_instance());
  ::operations_research::_RoutingSearchParameters_default_instance_._instance.get_mutable()->time_limit_ = const_cast< PROTOBUF_NAMESPACE_ID::Duration*>(
      PROTOBUF_NAMESPACE_ID::Duration::internal_default_instance());
  ::operations_research::_RoutingSearchParameters_default_instance_._instance.get_mutable()->lns_time_limit_ = const_cast< PROTOBUF_NAMESPACE_ID::Duration*>(
      PROTOBUF_NAMESPACE_ID::Duration::internal_default_instance());
}
class RoutingSearchParameters::_Internal {
 public:
  static const ::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators& local_search_operators(const RoutingSearchParameters* msg);
  static const PROTOBUF_NAMESPACE_ID::Duration& time_limit(const RoutingSearchParameters* msg);
  static const PROTOBUF_NAMESPACE_ID::Duration& lns_time_limit(const RoutingSearchParameters* msg);
};

const ::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators&
RoutingSearchParameters::_Internal::local_search_operators(const RoutingSearchParameters* msg) {
  return *msg->local_search_operators_;
}
const PROTOBUF_NAMESPACE_ID::Duration&
RoutingSearchParameters::_Internal::time_limit(const RoutingSearchParameters* msg) {
  return *msg->time_limit_;
}
const PROTOBUF_NAMESPACE_ID::Duration&
RoutingSearchParameters::_Internal::lns_time_limit(const RoutingSearchParameters* msg) {
  return *msg->lns_time_limit_;
}
void RoutingSearchParameters::clear_time_limit() {
  if (GetArena() == nullptr && time_limit_ != nullptr) {
    delete time_limit_;
  }
  time_limit_ = nullptr;
}
void RoutingSearchParameters::clear_lns_time_limit() {
  if (GetArena() == nullptr && lns_time_limit_ != nullptr) {
    delete lns_time_limit_;
  }
  lns_time_limit_ = nullptr;
}
RoutingSearchParameters::RoutingSearchParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:operations_research.RoutingSearchParameters)
}
RoutingSearchParameters::RoutingSearchParameters(const RoutingSearchParameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_local_search_operators()) {
    local_search_operators_ = new ::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators(*from.local_search_operators_);
  } else {
    local_search_operators_ = nullptr;
  }
  if (from._internal_has_time_limit()) {
    time_limit_ = new PROTOBUF_NAMESPACE_ID::Duration(*from.time_limit_);
  } else {
    time_limit_ = nullptr;
  }
  if (from._internal_has_lns_time_limit()) {
    lns_time_limit_ = new PROTOBUF_NAMESPACE_ID::Duration(*from.lns_time_limit_);
  } else {
    lns_time_limit_ = nullptr;
  }
  ::memcpy(&first_solution_strategy_, &from.first_solution_strategy_,
    static_cast<size_t>(reinterpret_cast<char*>(&continuous_scheduling_solver_) -
    reinterpret_cast<char*>(&first_solution_strategy_)) + sizeof(continuous_scheduling_solver_));
  // @@protoc_insertion_point(copy_constructor:operations_research.RoutingSearchParameters)
}

void RoutingSearchParameters::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoutingSearchParameters_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto.base);
  ::memset(&local_search_operators_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&continuous_scheduling_solver_) -
      reinterpret_cast<char*>(&local_search_operators_)) + sizeof(continuous_scheduling_solver_));
}

RoutingSearchParameters::~RoutingSearchParameters() {
  // @@protoc_insertion_point(destructor:operations_research.RoutingSearchParameters)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RoutingSearchParameters::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete local_search_operators_;
  if (this != internal_default_instance()) delete time_limit_;
  if (this != internal_default_instance()) delete lns_time_limit_;
}

void RoutingSearchParameters::ArenaDtor(void* object) {
  RoutingSearchParameters* _this = reinterpret_cast< RoutingSearchParameters* >(object);
  (void)_this;
}
void RoutingSearchParameters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoutingSearchParameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoutingSearchParameters& RoutingSearchParameters::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoutingSearchParameters_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto.base);
  return *internal_default_instance();
}


void RoutingSearchParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.RoutingSearchParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && local_search_operators_ != nullptr) {
    delete local_search_operators_;
  }
  local_search_operators_ = nullptr;
  if (GetArena() == nullptr && time_limit_ != nullptr) {
    delete time_limit_;
  }
  time_limit_ = nullptr;
  if (GetArena() == nullptr && lns_time_limit_ != nullptr) {
    delete lns_time_limit_;
  }
  lns_time_limit_ = nullptr;
  ::memset(&first_solution_strategy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&continuous_scheduling_solver_) -
      reinterpret_cast<char*>(&first_solution_strategy_)) + sizeof(continuous_scheduling_solver_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoutingSearchParameters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .operations_research.FirstSolutionStrategy.Value first_solution_strategy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_first_solution_strategy(static_cast<::operations_research::FirstSolutionStrategy_Value>(val));
        } else goto handle_unusual;
        continue;
      // bool use_unfiltered_first_solution_strategy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          use_unfiltered_first_solution_strategy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators local_search_operators = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_search_operators(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .operations_research.LocalSearchMetaheuristic.Value local_search_metaheuristic = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_local_search_metaheuristic(static_cast<::operations_research::LocalSearchMetaheuristic_Value>(val));
        } else goto handle_unusual;
        continue;
      // double guided_local_search_lambda_coefficient = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          guided_local_search_lambda_coefficient_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool use_depth_first_search = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          use_depth_first_search_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double optimization_step = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          optimization_step_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int64 solution_limit = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          solution_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Duration time_limit = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_limit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Duration lns_time_limit = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_lns_time_limit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool use_full_propagation = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          use_full_propagation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool log_search = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          log_search_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double savings_neighbors_ratio = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          savings_neighbors_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool savings_add_reverse_arcs = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          savings_add_reverse_arcs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double cheapest_insertion_farthest_seeds_ratio = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          cheapest_insertion_farthest_seeds_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 number_of_solutions_to_collect = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          number_of_solutions_to_collect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double savings_arc_coefficient = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          savings_arc_coefficient_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool savings_parallel_routes = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          savings_parallel_routes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 relocate_expensive_chain_num_arcs_to_consider = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          relocate_expensive_chain_num_arcs_to_consider_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double cheapest_insertion_first_solution_neighbors_ratio = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 169)) {
          cheapest_insertion_first_solution_neighbors_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double log_cost_scaling_factor = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 177)) {
          log_cost_scaling_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double savings_max_memory_usage_bytes = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 185)) {
          savings_max_memory_usage_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .operations_research.OptionalBoolean use_cp_sat = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_use_cp_sat(static_cast<::operations_research::OptionalBoolean>(val));
        } else goto handle_unusual;
        continue;
      // .operations_research.OptionalBoolean use_cp = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_use_cp(static_cast<::operations_research::OptionalBoolean>(val));
        } else goto handle_unusual;
        continue;
      // double log_cost_offset = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 233)) {
          log_cost_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool christofides_use_minimum_matching = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          christofides_use_minimum_matching_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double cheapest_insertion_ls_operator_neighbors_ratio = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 249)) {
          cheapest_insertion_ls_operator_neighbors_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 heuristic_expensive_chain_lns_num_arcs_to_consider = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          heuristic_expensive_chain_lns_num_arcs_to_consider_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .operations_research.RoutingSearchParameters.SchedulingSolver continuous_scheduling_solver = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_continuous_scheduling_solver(static_cast<::operations_research::RoutingSearchParameters_SchedulingSolver>(val));
        } else goto handle_unusual;
        continue;
      // .operations_research.RoutingSearchParameters.SchedulingSolver mixed_integer_scheduling_solver = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mixed_integer_scheduling_solver(static_cast<::operations_research::RoutingSearchParameters_SchedulingSolver>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoutingSearchParameters::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.RoutingSearchParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .operations_research.FirstSolutionStrategy.Value first_solution_strategy = 1;
  if (this->first_solution_strategy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_first_solution_strategy(), target);
  }

  // bool use_unfiltered_first_solution_strategy = 2;
  if (this->use_unfiltered_first_solution_strategy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_use_unfiltered_first_solution_strategy(), target);
  }

  // .operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators local_search_operators = 3;
  if (this->has_local_search_operators()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::local_search_operators(this), target, stream);
  }

  // .operations_research.LocalSearchMetaheuristic.Value local_search_metaheuristic = 4;
  if (this->local_search_metaheuristic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_local_search_metaheuristic(), target);
  }

  // double guided_local_search_lambda_coefficient = 5;
  if (!(this->guided_local_search_lambda_coefficient() <= 0 && this->guided_local_search_lambda_coefficient() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_guided_local_search_lambda_coefficient(), target);
  }

  // bool use_depth_first_search = 6;
  if (this->use_depth_first_search() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_use_depth_first_search(), target);
  }

  // double optimization_step = 7;
  if (!(this->optimization_step() <= 0 && this->optimization_step() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_optimization_step(), target);
  }

  // int64 solution_limit = 8;
  if (this->solution_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_solution_limit(), target);
  }

  // .google.protobuf.Duration time_limit = 9;
  if (this->has_time_limit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::time_limit(this), target, stream);
  }

  // .google.protobuf.Duration lns_time_limit = 10;
  if (this->has_lns_time_limit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::lns_time_limit(this), target, stream);
  }

  // bool use_full_propagation = 11;
  if (this->use_full_propagation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_use_full_propagation(), target);
  }

  // bool log_search = 13;
  if (this->log_search() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_log_search(), target);
  }

  // double savings_neighbors_ratio = 14;
  if (!(this->savings_neighbors_ratio() <= 0 && this->savings_neighbors_ratio() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_savings_neighbors_ratio(), target);
  }

  // bool savings_add_reverse_arcs = 15;
  if (this->savings_add_reverse_arcs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_savings_add_reverse_arcs(), target);
  }

  // double cheapest_insertion_farthest_seeds_ratio = 16;
  if (!(this->cheapest_insertion_farthest_seeds_ratio() <= 0 && this->cheapest_insertion_farthest_seeds_ratio() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_cheapest_insertion_farthest_seeds_ratio(), target);
  }

  // int32 number_of_solutions_to_collect = 17;
  if (this->number_of_solutions_to_collect() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_number_of_solutions_to_collect(), target);
  }

  // double savings_arc_coefficient = 18;
  if (!(this->savings_arc_coefficient() <= 0 && this->savings_arc_coefficient() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(18, this->_internal_savings_arc_coefficient(), target);
  }

  // bool savings_parallel_routes = 19;
  if (this->savings_parallel_routes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_savings_parallel_routes(), target);
  }

  // int32 relocate_expensive_chain_num_arcs_to_consider = 20;
  if (this->relocate_expensive_chain_num_arcs_to_consider() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_relocate_expensive_chain_num_arcs_to_consider(), target);
  }

  // double cheapest_insertion_first_solution_neighbors_ratio = 21;
  if (!(this->cheapest_insertion_first_solution_neighbors_ratio() <= 0 && this->cheapest_insertion_first_solution_neighbors_ratio() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(21, this->_internal_cheapest_insertion_first_solution_neighbors_ratio(), target);
  }

  // double log_cost_scaling_factor = 22;
  if (!(this->log_cost_scaling_factor() <= 0 && this->log_cost_scaling_factor() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(22, this->_internal_log_cost_scaling_factor(), target);
  }

  // double savings_max_memory_usage_bytes = 23;
  if (!(this->savings_max_memory_usage_bytes() <= 0 && this->savings_max_memory_usage_bytes() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(23, this->_internal_savings_max_memory_usage_bytes(), target);
  }

  // .operations_research.OptionalBoolean use_cp_sat = 27;
  if (this->use_cp_sat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      27, this->_internal_use_cp_sat(), target);
  }

  // .operations_research.OptionalBoolean use_cp = 28;
  if (this->use_cp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      28, this->_internal_use_cp(), target);
  }

  // double log_cost_offset = 29;
  if (!(this->log_cost_offset() <= 0 && this->log_cost_offset() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(29, this->_internal_log_cost_offset(), target);
  }

  // bool christofides_use_minimum_matching = 30;
  if (this->christofides_use_minimum_matching() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(30, this->_internal_christofides_use_minimum_matching(), target);
  }

  // double cheapest_insertion_ls_operator_neighbors_ratio = 31;
  if (!(this->cheapest_insertion_ls_operator_neighbors_ratio() <= 0 && this->cheapest_insertion_ls_operator_neighbors_ratio() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(31, this->_internal_cheapest_insertion_ls_operator_neighbors_ratio(), target);
  }

  // int32 heuristic_expensive_chain_lns_num_arcs_to_consider = 32;
  if (this->heuristic_expensive_chain_lns_num_arcs_to_consider() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(32, this->_internal_heuristic_expensive_chain_lns_num_arcs_to_consider(), target);
  }

  // .operations_research.RoutingSearchParameters.SchedulingSolver continuous_scheduling_solver = 33;
  if (this->continuous_scheduling_solver() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      33, this->_internal_continuous_scheduling_solver(), target);
  }

  // .operations_research.RoutingSearchParameters.SchedulingSolver mixed_integer_scheduling_solver = 34;
  if (this->mixed_integer_scheduling_solver() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      34, this->_internal_mixed_integer_scheduling_solver(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.RoutingSearchParameters)
  return target;
}

size_t RoutingSearchParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.RoutingSearchParameters)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators local_search_operators = 3;
  if (this->has_local_search_operators()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *local_search_operators_);
  }

  // .google.protobuf.Duration time_limit = 9;
  if (this->has_time_limit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_limit_);
  }

  // .google.protobuf.Duration lns_time_limit = 10;
  if (this->has_lns_time_limit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lns_time_limit_);
  }

  // .operations_research.FirstSolutionStrategy.Value first_solution_strategy = 1;
  if (this->first_solution_strategy() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_first_solution_strategy());
  }

  // .operations_research.LocalSearchMetaheuristic.Value local_search_metaheuristic = 4;
  if (this->local_search_metaheuristic() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_local_search_metaheuristic());
  }

  // double guided_local_search_lambda_coefficient = 5;
  if (!(this->guided_local_search_lambda_coefficient() <= 0 && this->guided_local_search_lambda_coefficient() >= 0)) {
    total_size += 1 + 8;
  }

  // double optimization_step = 7;
  if (!(this->optimization_step() <= 0 && this->optimization_step() >= 0)) {
    total_size += 1 + 8;
  }

  // int64 solution_limit = 8;
  if (this->solution_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_solution_limit());
  }

  // bool use_depth_first_search = 6;
  if (this->use_depth_first_search() != 0) {
    total_size += 1 + 1;
  }

  // bool use_full_propagation = 11;
  if (this->use_full_propagation() != 0) {
    total_size += 1 + 1;
  }

  // bool log_search = 13;
  if (this->log_search() != 0) {
    total_size += 1 + 1;
  }

  // bool use_unfiltered_first_solution_strategy = 2;
  if (this->use_unfiltered_first_solution_strategy() != 0) {
    total_size += 1 + 1;
  }

  // bool savings_add_reverse_arcs = 15;
  if (this->savings_add_reverse_arcs() != 0) {
    total_size += 1 + 1;
  }

  // bool savings_parallel_routes = 19;
  if (this->savings_parallel_routes() != 0) {
    total_size += 2 + 1;
  }

  // bool christofides_use_minimum_matching = 30;
  if (this->christofides_use_minimum_matching() != 0) {
    total_size += 2 + 1;
  }

  // double savings_neighbors_ratio = 14;
  if (!(this->savings_neighbors_ratio() <= 0 && this->savings_neighbors_ratio() >= 0)) {
    total_size += 1 + 8;
  }

  // double cheapest_insertion_farthest_seeds_ratio = 16;
  if (!(this->cheapest_insertion_farthest_seeds_ratio() <= 0 && this->cheapest_insertion_farthest_seeds_ratio() >= 0)) {
    total_size += 2 + 8;
  }

  // double savings_arc_coefficient = 18;
  if (!(this->savings_arc_coefficient() <= 0 && this->savings_arc_coefficient() >= 0)) {
    total_size += 2 + 8;
  }

  // int32 number_of_solutions_to_collect = 17;
  if (this->number_of_solutions_to_collect() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_number_of_solutions_to_collect());
  }

  // int32 relocate_expensive_chain_num_arcs_to_consider = 20;
  if (this->relocate_expensive_chain_num_arcs_to_consider() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_relocate_expensive_chain_num_arcs_to_consider());
  }

  // double cheapest_insertion_first_solution_neighbors_ratio = 21;
  if (!(this->cheapest_insertion_first_solution_neighbors_ratio() <= 0 && this->cheapest_insertion_first_solution_neighbors_ratio() >= 0)) {
    total_size += 2 + 8;
  }

  // double log_cost_scaling_factor = 22;
  if (!(this->log_cost_scaling_factor() <= 0 && this->log_cost_scaling_factor() >= 0)) {
    total_size += 2 + 8;
  }

  // double savings_max_memory_usage_bytes = 23;
  if (!(this->savings_max_memory_usage_bytes() <= 0 && this->savings_max_memory_usage_bytes() >= 0)) {
    total_size += 2 + 8;
  }

  // .operations_research.OptionalBoolean use_cp_sat = 27;
  if (this->use_cp_sat() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_use_cp_sat());
  }

  // .operations_research.OptionalBoolean use_cp = 28;
  if (this->use_cp() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_use_cp());
  }

  // double log_cost_offset = 29;
  if (!(this->log_cost_offset() <= 0 && this->log_cost_offset() >= 0)) {
    total_size += 2 + 8;
  }

  // double cheapest_insertion_ls_operator_neighbors_ratio = 31;
  if (!(this->cheapest_insertion_ls_operator_neighbors_ratio() <= 0 && this->cheapest_insertion_ls_operator_neighbors_ratio() >= 0)) {
    total_size += 2 + 8;
  }

  // .operations_research.RoutingSearchParameters.SchedulingSolver mixed_integer_scheduling_solver = 34;
  if (this->mixed_integer_scheduling_solver() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mixed_integer_scheduling_solver());
  }

  // int32 heuristic_expensive_chain_lns_num_arcs_to_consider = 32;
  if (this->heuristic_expensive_chain_lns_num_arcs_to_consider() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_heuristic_expensive_chain_lns_num_arcs_to_consider());
  }

  // .operations_research.RoutingSearchParameters.SchedulingSolver continuous_scheduling_solver = 33;
  if (this->continuous_scheduling_solver() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_continuous_scheduling_solver());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoutingSearchParameters::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:operations_research.RoutingSearchParameters)
  GOOGLE_DCHECK_NE(&from, this);
  const RoutingSearchParameters* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoutingSearchParameters>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:operations_research.RoutingSearchParameters)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:operations_research.RoutingSearchParameters)
    MergeFrom(*source);
  }
}

void RoutingSearchParameters::MergeFrom(const RoutingSearchParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:operations_research.RoutingSearchParameters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_local_search_operators()) {
    _internal_mutable_local_search_operators()->::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators::MergeFrom(from._internal_local_search_operators());
  }
  if (from.has_time_limit()) {
    _internal_mutable_time_limit()->PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_time_limit());
  }
  if (from.has_lns_time_limit()) {
    _internal_mutable_lns_time_limit()->PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_lns_time_limit());
  }
  if (from.first_solution_strategy() != 0) {
    _internal_set_first_solution_strategy(from._internal_first_solution_strategy());
  }
  if (from.local_search_metaheuristic() != 0) {
    _internal_set_local_search_metaheuristic(from._internal_local_search_metaheuristic());
  }
  if (!(from.guided_local_search_lambda_coefficient() <= 0 && from.guided_local_search_lambda_coefficient() >= 0)) {
    _internal_set_guided_local_search_lambda_coefficient(from._internal_guided_local_search_lambda_coefficient());
  }
  if (!(from.optimization_step() <= 0 && from.optimization_step() >= 0)) {
    _internal_set_optimization_step(from._internal_optimization_step());
  }
  if (from.solution_limit() != 0) {
    _internal_set_solution_limit(from._internal_solution_limit());
  }
  if (from.use_depth_first_search() != 0) {
    _internal_set_use_depth_first_search(from._internal_use_depth_first_search());
  }
  if (from.use_full_propagation() != 0) {
    _internal_set_use_full_propagation(from._internal_use_full_propagation());
  }
  if (from.log_search() != 0) {
    _internal_set_log_search(from._internal_log_search());
  }
  if (from.use_unfiltered_first_solution_strategy() != 0) {
    _internal_set_use_unfiltered_first_solution_strategy(from._internal_use_unfiltered_first_solution_strategy());
  }
  if (from.savings_add_reverse_arcs() != 0) {
    _internal_set_savings_add_reverse_arcs(from._internal_savings_add_reverse_arcs());
  }
  if (from.savings_parallel_routes() != 0) {
    _internal_set_savings_parallel_routes(from._internal_savings_parallel_routes());
  }
  if (from.christofides_use_minimum_matching() != 0) {
    _internal_set_christofides_use_minimum_matching(from._internal_christofides_use_minimum_matching());
  }
  if (!(from.savings_neighbors_ratio() <= 0 && from.savings_neighbors_ratio() >= 0)) {
    _internal_set_savings_neighbors_ratio(from._internal_savings_neighbors_ratio());
  }
  if (!(from.cheapest_insertion_farthest_seeds_ratio() <= 0 && from.cheapest_insertion_farthest_seeds_ratio() >= 0)) {
    _internal_set_cheapest_insertion_farthest_seeds_ratio(from._internal_cheapest_insertion_farthest_seeds_ratio());
  }
  if (!(from.savings_arc_coefficient() <= 0 && from.savings_arc_coefficient() >= 0)) {
    _internal_set_savings_arc_coefficient(from._internal_savings_arc_coefficient());
  }
  if (from.number_of_solutions_to_collect() != 0) {
    _internal_set_number_of_solutions_to_collect(from._internal_number_of_solutions_to_collect());
  }
  if (from.relocate_expensive_chain_num_arcs_to_consider() != 0) {
    _internal_set_relocate_expensive_chain_num_arcs_to_consider(from._internal_relocate_expensive_chain_num_arcs_to_consider());
  }
  if (!(from.cheapest_insertion_first_solution_neighbors_ratio() <= 0 && from.cheapest_insertion_first_solution_neighbors_ratio() >= 0)) {
    _internal_set_cheapest_insertion_first_solution_neighbors_ratio(from._internal_cheapest_insertion_first_solution_neighbors_ratio());
  }
  if (!(from.log_cost_scaling_factor() <= 0 && from.log_cost_scaling_factor() >= 0)) {
    _internal_set_log_cost_scaling_factor(from._internal_log_cost_scaling_factor());
  }
  if (!(from.savings_max_memory_usage_bytes() <= 0 && from.savings_max_memory_usage_bytes() >= 0)) {
    _internal_set_savings_max_memory_usage_bytes(from._internal_savings_max_memory_usage_bytes());
  }
  if (from.use_cp_sat() != 0) {
    _internal_set_use_cp_sat(from._internal_use_cp_sat());
  }
  if (from.use_cp() != 0) {
    _internal_set_use_cp(from._internal_use_cp());
  }
  if (!(from.log_cost_offset() <= 0 && from.log_cost_offset() >= 0)) {
    _internal_set_log_cost_offset(from._internal_log_cost_offset());
  }
  if (!(from.cheapest_insertion_ls_operator_neighbors_ratio() <= 0 && from.cheapest_insertion_ls_operator_neighbors_ratio() >= 0)) {
    _internal_set_cheapest_insertion_ls_operator_neighbors_ratio(from._internal_cheapest_insertion_ls_operator_neighbors_ratio());
  }
  if (from.mixed_integer_scheduling_solver() != 0) {
    _internal_set_mixed_integer_scheduling_solver(from._internal_mixed_integer_scheduling_solver());
  }
  if (from.heuristic_expensive_chain_lns_num_arcs_to_consider() != 0) {
    _internal_set_heuristic_expensive_chain_lns_num_arcs_to_consider(from._internal_heuristic_expensive_chain_lns_num_arcs_to_consider());
  }
  if (from.continuous_scheduling_solver() != 0) {
    _internal_set_continuous_scheduling_solver(from._internal_continuous_scheduling_solver());
  }
}

void RoutingSearchParameters::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:operations_research.RoutingSearchParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoutingSearchParameters::CopyFrom(const RoutingSearchParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.RoutingSearchParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutingSearchParameters::IsInitialized() const {
  return true;
}

void RoutingSearchParameters::InternalSwap(RoutingSearchParameters* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoutingSearchParameters, continuous_scheduling_solver_)
      + sizeof(RoutingSearchParameters::continuous_scheduling_solver_)
      - PROTOBUF_FIELD_OFFSET(RoutingSearchParameters, local_search_operators_)>(
          reinterpret_cast<char*>(&local_search_operators_),
          reinterpret_cast<char*>(&other->local_search_operators_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoutingSearchParameters::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoutingModelParameters::InitAsDefaultInstance() {
  ::operations_research::_RoutingModelParameters_default_instance_._instance.get_mutable()->solver_parameters_ = const_cast< ::operations_research::ConstraintSolverParameters*>(
      ::operations_research::ConstraintSolverParameters::internal_default_instance());
}
class RoutingModelParameters::_Internal {
 public:
  static const ::operations_research::ConstraintSolverParameters& solver_parameters(const RoutingModelParameters* msg);
};

const ::operations_research::ConstraintSolverParameters&
RoutingModelParameters::_Internal::solver_parameters(const RoutingModelParameters* msg) {
  return *msg->solver_parameters_;
}
void RoutingModelParameters::clear_solver_parameters() {
  if (GetArena() == nullptr && solver_parameters_ != nullptr) {
    delete solver_parameters_;
  }
  solver_parameters_ = nullptr;
}
RoutingModelParameters::RoutingModelParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:operations_research.RoutingModelParameters)
}
RoutingModelParameters::RoutingModelParameters(const RoutingModelParameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_solver_parameters()) {
    solver_parameters_ = new ::operations_research::ConstraintSolverParameters(*from.solver_parameters_);
  } else {
    solver_parameters_ = nullptr;
  }
  ::memcpy(&reduce_vehicle_cost_model_, &from.reduce_vehicle_cost_model_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_callback_cache_size_) -
    reinterpret_cast<char*>(&reduce_vehicle_cost_model_)) + sizeof(max_callback_cache_size_));
  // @@protoc_insertion_point(copy_constructor:operations_research.RoutingModelParameters)
}

void RoutingModelParameters::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoutingModelParameters_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto.base);
  ::memset(&solver_parameters_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_callback_cache_size_) -
      reinterpret_cast<char*>(&solver_parameters_)) + sizeof(max_callback_cache_size_));
}

RoutingModelParameters::~RoutingModelParameters() {
  // @@protoc_insertion_point(destructor:operations_research.RoutingModelParameters)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RoutingModelParameters::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete solver_parameters_;
}

void RoutingModelParameters::ArenaDtor(void* object) {
  RoutingModelParameters* _this = reinterpret_cast< RoutingModelParameters* >(object);
  (void)_this;
}
void RoutingModelParameters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoutingModelParameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoutingModelParameters& RoutingModelParameters::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoutingModelParameters_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto.base);
  return *internal_default_instance();
}


void RoutingModelParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.RoutingModelParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && solver_parameters_ != nullptr) {
    delete solver_parameters_;
  }
  solver_parameters_ = nullptr;
  ::memset(&reduce_vehicle_cost_model_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_callback_cache_size_) -
      reinterpret_cast<char*>(&reduce_vehicle_cost_model_)) + sizeof(max_callback_cache_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoutingModelParameters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .operations_research.ConstraintSolverParameters solver_parameters = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_solver_parameters(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool reduce_vehicle_cost_model = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          reduce_vehicle_cost_model_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_callback_cache_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          max_callback_cache_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoutingModelParameters::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.RoutingModelParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .operations_research.ConstraintSolverParameters solver_parameters = 1;
  if (this->has_solver_parameters()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::solver_parameters(this), target, stream);
  }

  // bool reduce_vehicle_cost_model = 2;
  if (this->reduce_vehicle_cost_model() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_reduce_vehicle_cost_model(), target);
  }

  // int32 max_callback_cache_size = 3;
  if (this->max_callback_cache_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_max_callback_cache_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.RoutingModelParameters)
  return target;
}

size_t RoutingModelParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.RoutingModelParameters)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .operations_research.ConstraintSolverParameters solver_parameters = 1;
  if (this->has_solver_parameters()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *solver_parameters_);
  }

  // bool reduce_vehicle_cost_model = 2;
  if (this->reduce_vehicle_cost_model() != 0) {
    total_size += 1 + 1;
  }

  // int32 max_callback_cache_size = 3;
  if (this->max_callback_cache_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_callback_cache_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoutingModelParameters::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:operations_research.RoutingModelParameters)
  GOOGLE_DCHECK_NE(&from, this);
  const RoutingModelParameters* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoutingModelParameters>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:operations_research.RoutingModelParameters)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:operations_research.RoutingModelParameters)
    MergeFrom(*source);
  }
}

void RoutingModelParameters::MergeFrom(const RoutingModelParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:operations_research.RoutingModelParameters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_solver_parameters()) {
    _internal_mutable_solver_parameters()->::operations_research::ConstraintSolverParameters::MergeFrom(from._internal_solver_parameters());
  }
  if (from.reduce_vehicle_cost_model() != 0) {
    _internal_set_reduce_vehicle_cost_model(from._internal_reduce_vehicle_cost_model());
  }
  if (from.max_callback_cache_size() != 0) {
    _internal_set_max_callback_cache_size(from._internal_max_callback_cache_size());
  }
}

void RoutingModelParameters::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:operations_research.RoutingModelParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoutingModelParameters::CopyFrom(const RoutingModelParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.RoutingModelParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutingModelParameters::IsInitialized() const {
  return true;
}

void RoutingModelParameters::InternalSwap(RoutingModelParameters* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoutingModelParameters, max_callback_cache_size_)
      + sizeof(RoutingModelParameters::max_callback_cache_size_)
      - PROTOBUF_FIELD_OFFSET(RoutingModelParameters, solver_parameters_)>(
          reinterpret_cast<char*>(&solver_parameters_),
          reinterpret_cast<char*>(&other->solver_parameters_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoutingModelParameters::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace operations_research
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators* Arena::CreateMaybeMessage< ::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::RoutingSearchParameters* Arena::CreateMaybeMessage< ::operations_research::RoutingSearchParameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::RoutingSearchParameters >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::RoutingModelParameters* Arena::CreateMaybeMessage< ::operations_research::RoutingModelParameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::RoutingModelParameters >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
