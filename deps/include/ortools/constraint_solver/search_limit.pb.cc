// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ortools/constraint_solver/search_limit.proto

#include "ortools/constraint_solver/search_limit.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace operations_research {
class RegularLimitParametersDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegularLimitParameters> _instance;
} _RegularLimitParameters_default_instance_;
}  // namespace operations_research
static void InitDefaultsscc_info_RegularLimitParameters_ortools_2fconstraint_5fsolver_2fsearch_5flimit_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::operations_research::_RegularLimitParameters_default_instance_;
    new (ptr) ::operations_research::RegularLimitParameters();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::operations_research::RegularLimitParameters::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegularLimitParameters_ortools_2fconstraint_5fsolver_2fsearch_5flimit_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RegularLimitParameters_ortools_2fconstraint_5fsolver_2fsearch_5flimit_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ortools_2fconstraint_5fsolver_2fsearch_5flimit_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ortools_2fconstraint_5fsolver_2fsearch_5flimit_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ortools_2fconstraint_5fsolver_2fsearch_5flimit_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ortools_2fconstraint_5fsolver_2fsearch_5flimit_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::RegularLimitParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::operations_research::RegularLimitParameters, time_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RegularLimitParameters, branches_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RegularLimitParameters, failures_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RegularLimitParameters, solutions_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RegularLimitParameters, smart_time_check_),
  PROTOBUF_FIELD_OFFSET(::operations_research::RegularLimitParameters, cumulative_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::operations_research::RegularLimitParameters)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::operations_research::_RegularLimitParameters_default_instance_),
};

const char descriptor_table_protodef_ortools_2fconstraint_5fsolver_2fsearch_5flimit_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n,ortools/constraint_solver/search_limit"
  ".proto\022\023operations_research\"\213\001\n\026RegularL"
  "imitParameters\022\014\n\004time\030\001 \001(\003\022\020\n\010branches"
  "\030\002 \001(\003\022\020\n\010failures\030\003 \001(\003\022\021\n\tsolutions\030\004 "
  "\001(\003\022\030\n\020smart_time_check\030\005 \001(\010\022\022\n\ncumulat"
  "ive\030\006 \001(\010B^\n#com.google.ortools.constrai"
  "ntsolverB\023SearchLimitProtobufP\001\252\002\037Google"
  ".OrTools.ConstraintSolverb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ortools_2fconstraint_5fsolver_2fsearch_5flimit_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ortools_2fconstraint_5fsolver_2fsearch_5flimit_2eproto_sccs[1] = {
  &scc_info_RegularLimitParameters_ortools_2fconstraint_5fsolver_2fsearch_5flimit_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ortools_2fconstraint_5fsolver_2fsearch_5flimit_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ortools_2fconstraint_5fsolver_2fsearch_5flimit_2eproto = {
  false, false, descriptor_table_protodef_ortools_2fconstraint_5fsolver_2fsearch_5flimit_2eproto, "ortools/constraint_solver/search_limit.proto", 313,
  &descriptor_table_ortools_2fconstraint_5fsolver_2fsearch_5flimit_2eproto_once, descriptor_table_ortools_2fconstraint_5fsolver_2fsearch_5flimit_2eproto_sccs, descriptor_table_ortools_2fconstraint_5fsolver_2fsearch_5flimit_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_ortools_2fconstraint_5fsolver_2fsearch_5flimit_2eproto::offsets,
  file_level_metadata_ortools_2fconstraint_5fsolver_2fsearch_5flimit_2eproto, 1, file_level_enum_descriptors_ortools_2fconstraint_5fsolver_2fsearch_5flimit_2eproto, file_level_service_descriptors_ortools_2fconstraint_5fsolver_2fsearch_5flimit_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ortools_2fconstraint_5fsolver_2fsearch_5flimit_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ortools_2fconstraint_5fsolver_2fsearch_5flimit_2eproto)), true);
namespace operations_research {

// ===================================================================

void RegularLimitParameters::InitAsDefaultInstance() {
}
class RegularLimitParameters::_Internal {
 public:
};

RegularLimitParameters::RegularLimitParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:operations_research.RegularLimitParameters)
}
RegularLimitParameters::RegularLimitParameters(const RegularLimitParameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&cumulative_) -
    reinterpret_cast<char*>(&time_)) + sizeof(cumulative_));
  // @@protoc_insertion_point(copy_constructor:operations_research.RegularLimitParameters)
}

void RegularLimitParameters::SharedCtor() {
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cumulative_) -
      reinterpret_cast<char*>(&time_)) + sizeof(cumulative_));
}

RegularLimitParameters::~RegularLimitParameters() {
  // @@protoc_insertion_point(destructor:operations_research.RegularLimitParameters)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RegularLimitParameters::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RegularLimitParameters::ArenaDtor(void* object) {
  RegularLimitParameters* _this = reinterpret_cast< RegularLimitParameters* >(object);
  (void)_this;
}
void RegularLimitParameters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegularLimitParameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegularLimitParameters& RegularLimitParameters::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegularLimitParameters_ortools_2fconstraint_5fsolver_2fsearch_5flimit_2eproto.base);
  return *internal_default_instance();
}


void RegularLimitParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.RegularLimitParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cumulative_) -
      reinterpret_cast<char*>(&time_)) + sizeof(cumulative_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegularLimitParameters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 branches = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          branches_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 failures = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          failures_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 solutions = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          solutions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool smart_time_check = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          smart_time_check_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool cumulative = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          cumulative_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegularLimitParameters::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.RegularLimitParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_time(), target);
  }

  // int64 branches = 2;
  if (this->branches() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_branches(), target);
  }

  // int64 failures = 3;
  if (this->failures() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_failures(), target);
  }

  // int64 solutions = 4;
  if (this->solutions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_solutions(), target);
  }

  // bool smart_time_check = 5;
  if (this->smart_time_check() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_smart_time_check(), target);
  }

  // bool cumulative = 6;
  if (this->cumulative() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_cumulative(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.RegularLimitParameters)
  return target;
}

size_t RegularLimitParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.RegularLimitParameters)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());
  }

  // int64 branches = 2;
  if (this->branches() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_branches());
  }

  // int64 failures = 3;
  if (this->failures() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_failures());
  }

  // int64 solutions = 4;
  if (this->solutions() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_solutions());
  }

  // bool smart_time_check = 5;
  if (this->smart_time_check() != 0) {
    total_size += 1 + 1;
  }

  // bool cumulative = 6;
  if (this->cumulative() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegularLimitParameters::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:operations_research.RegularLimitParameters)
  GOOGLE_DCHECK_NE(&from, this);
  const RegularLimitParameters* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegularLimitParameters>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:operations_research.RegularLimitParameters)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:operations_research.RegularLimitParameters)
    MergeFrom(*source);
  }
}

void RegularLimitParameters::MergeFrom(const RegularLimitParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:operations_research.RegularLimitParameters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.branches() != 0) {
    _internal_set_branches(from._internal_branches());
  }
  if (from.failures() != 0) {
    _internal_set_failures(from._internal_failures());
  }
  if (from.solutions() != 0) {
    _internal_set_solutions(from._internal_solutions());
  }
  if (from.smart_time_check() != 0) {
    _internal_set_smart_time_check(from._internal_smart_time_check());
  }
  if (from.cumulative() != 0) {
    _internal_set_cumulative(from._internal_cumulative());
  }
}

void RegularLimitParameters::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:operations_research.RegularLimitParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegularLimitParameters::CopyFrom(const RegularLimitParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.RegularLimitParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegularLimitParameters::IsInitialized() const {
  return true;
}

void RegularLimitParameters::InternalSwap(RegularLimitParameters* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegularLimitParameters, cumulative_)
      + sizeof(RegularLimitParameters::cumulative_)
      - PROTOBUF_FIELD_OFFSET(RegularLimitParameters, time_)>(
          reinterpret_cast<char*>(&time_),
          reinterpret_cast<char*>(&other->time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RegularLimitParameters::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace operations_research
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::operations_research::RegularLimitParameters* Arena::CreateMaybeMessage< ::operations_research::RegularLimitParameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::RegularLimitParameters >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
