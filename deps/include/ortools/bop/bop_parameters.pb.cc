// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ortools/bop/bop_parameters.proto

#include "ortools/bop/bop_parameters.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ortools_2fbop_2fbop_5fparameters_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BopOptimizerMethod_ortools_2fbop_2fbop_5fparameters_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ortools_2fbop_2fbop_5fparameters_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BopSolverOptimizerSet_ortools_2fbop_2fbop_5fparameters_2eproto;
namespace operations_research {
namespace bop {
class BopOptimizerMethodDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BopOptimizerMethod> _instance;
} _BopOptimizerMethod_default_instance_;
class BopSolverOptimizerSetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BopSolverOptimizerSet> _instance;
} _BopSolverOptimizerSet_default_instance_;
class BopParametersDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BopParameters> _instance;
} _BopParameters_default_instance_;
}  // namespace bop
}  // namespace operations_research
static void InitDefaultsscc_info_BopOptimizerMethod_ortools_2fbop_2fbop_5fparameters_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::operations_research::bop::_BopOptimizerMethod_default_instance_;
    new (ptr) ::operations_research::bop::BopOptimizerMethod();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::operations_research::bop::BopOptimizerMethod::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BopOptimizerMethod_ortools_2fbop_2fbop_5fparameters_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BopOptimizerMethod_ortools_2fbop_2fbop_5fparameters_2eproto}, {}};

static void InitDefaultsscc_info_BopParameters_ortools_2fbop_2fbop_5fparameters_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::operations_research::bop::BopParameters::_i_give_permission_to_break_this_code_default_default_solver_optimizer_sets_.DefaultConstruct();
  *::operations_research::bop::BopParameters::_i_give_permission_to_break_this_code_default_default_solver_optimizer_sets_.get_mutable() = std::string("methods:{type:LOCAL_SEARCH }                       methods:{type:RANDOM_FIRST_SOLUTION }              methods:{type:LINEAR_RELAXATION }                  methods:{type:LP_FIRST_SOLUTION }                  methods:{type:OBJECTIVE_FIRST_SOLUTION }           methods:{type:USER_GUIDED_FIRST_SOLUTION }         methods:{type:RANDOM_CONSTRAINT_LNS_GUIDED_BY_LP } methods:{type:RANDOM_VARIABLE_LNS_GUIDED_BY_LP }   methods:{type:RELATION_GRAPH_LNS }                 methods:{type:RELATION_GRAPH_LNS_GUIDED_BY_LP }    methods:{type:RANDOM_CONSTRAINT_LNS }              methods:{type:RANDOM_VARIABLE_LNS }                methods:{type:SAT_CORE_BASED }                     methods:{type:COMPLETE_LNS }                       ", 714);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::operations_research::bop::BopParameters::_i_give_permission_to_break_this_code_default_default_solver_optimizer_sets_.get_mutable());
  {
    void* ptr = &::operations_research::bop::_BopParameters_default_instance_;
    new (ptr) ::operations_research::bop::BopParameters();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::operations_research::bop::BopParameters::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BopParameters_ortools_2fbop_2fbop_5fparameters_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BopParameters_ortools_2fbop_2fbop_5fparameters_2eproto}, {
      &scc_info_BopSolverOptimizerSet_ortools_2fbop_2fbop_5fparameters_2eproto.base,}};

static void InitDefaultsscc_info_BopSolverOptimizerSet_ortools_2fbop_2fbop_5fparameters_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::operations_research::bop::_BopSolverOptimizerSet_default_instance_;
    new (ptr) ::operations_research::bop::BopSolverOptimizerSet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::operations_research::bop::BopSolverOptimizerSet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BopSolverOptimizerSet_ortools_2fbop_2fbop_5fparameters_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BopSolverOptimizerSet_ortools_2fbop_2fbop_5fparameters_2eproto}, {
      &scc_info_BopOptimizerMethod_ortools_2fbop_2fbop_5fparameters_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ortools_2fbop_2fbop_5fparameters_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_ortools_2fbop_2fbop_5fparameters_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ortools_2fbop_2fbop_5fparameters_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ortools_2fbop_2fbop_5fparameters_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::operations_research::bop::BopOptimizerMethod, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::bop::BopOptimizerMethod, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::operations_research::bop::BopOptimizerMethod, type_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operations_research::bop::BopSolverOptimizerSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::operations_research::bop::BopSolverOptimizerSet, methods_),
  PROTOBUF_FIELD_OFFSET(::operations_research::bop::BopParameters, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::operations_research::bop::BopParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::operations_research::bop::BopParameters, max_time_in_seconds_),
  PROTOBUF_FIELD_OFFSET(::operations_research::bop::BopParameters, max_deterministic_time_),
  PROTOBUF_FIELD_OFFSET(::operations_research::bop::BopParameters, lp_max_deterministic_time_),
  PROTOBUF_FIELD_OFFSET(::operations_research::bop::BopParameters, max_number_of_consecutive_failing_optimizer_calls_),
  PROTOBUF_FIELD_OFFSET(::operations_research::bop::BopParameters, relative_gap_limit_),
  PROTOBUF_FIELD_OFFSET(::operations_research::bop::BopParameters, max_num_decisions_in_ls_),
  PROTOBUF_FIELD_OFFSET(::operations_research::bop::BopParameters, max_num_broken_constraints_in_ls_),
  PROTOBUF_FIELD_OFFSET(::operations_research::bop::BopParameters, log_search_progress_),
  PROTOBUF_FIELD_OFFSET(::operations_research::bop::BopParameters, compute_estimated_impact_),
  PROTOBUF_FIELD_OFFSET(::operations_research::bop::BopParameters, prune_search_tree_),
  PROTOBUF_FIELD_OFFSET(::operations_research::bop::BopParameters, sort_constraints_by_num_terms_),
  PROTOBUF_FIELD_OFFSET(::operations_research::bop::BopParameters, use_random_lns_),
  PROTOBUF_FIELD_OFFSET(::operations_research::bop::BopParameters, random_seed_),
  PROTOBUF_FIELD_OFFSET(::operations_research::bop::BopParameters, num_relaxed_vars_),
  PROTOBUF_FIELD_OFFSET(::operations_research::bop::BopParameters, max_number_of_conflicts_in_random_lns_),
  PROTOBUF_FIELD_OFFSET(::operations_research::bop::BopParameters, num_random_lns_tries_),
  PROTOBUF_FIELD_OFFSET(::operations_research::bop::BopParameters, max_number_of_backtracks_in_ls_),
  PROTOBUF_FIELD_OFFSET(::operations_research::bop::BopParameters, use_lp_lns_),
  PROTOBUF_FIELD_OFFSET(::operations_research::bop::BopParameters, use_sat_to_choose_lns_neighbourhood_),
  PROTOBUF_FIELD_OFFSET(::operations_research::bop::BopParameters, max_number_of_conflicts_for_quick_check_),
  PROTOBUF_FIELD_OFFSET(::operations_research::bop::BopParameters, use_symmetry_),
  PROTOBUF_FIELD_OFFSET(::operations_research::bop::BopParameters, exploit_symmetry_in_sat_first_solution_),
  PROTOBUF_FIELD_OFFSET(::operations_research::bop::BopParameters, max_number_of_conflicts_in_random_solution_generation_),
  PROTOBUF_FIELD_OFFSET(::operations_research::bop::BopParameters, max_number_of_explored_assignments_per_try_in_ls_),
  PROTOBUF_FIELD_OFFSET(::operations_research::bop::BopParameters, use_transposition_table_in_ls_),
  PROTOBUF_FIELD_OFFSET(::operations_research::bop::BopParameters, use_potential_one_flip_repairs_in_ls_),
  PROTOBUF_FIELD_OFFSET(::operations_research::bop::BopParameters, use_learned_binary_clauses_in_lp_),
  PROTOBUF_FIELD_OFFSET(::operations_research::bop::BopParameters, number_of_solvers_),
  PROTOBUF_FIELD_OFFSET(::operations_research::bop::BopParameters, synchronization_type_),
  PROTOBUF_FIELD_OFFSET(::operations_research::bop::BopParameters, solver_optimizer_sets_),
  PROTOBUF_FIELD_OFFSET(::operations_research::bop::BopParameters, default_solver_optimizer_sets_),
  PROTOBUF_FIELD_OFFSET(::operations_research::bop::BopParameters, use_lp_strong_branching_),
  PROTOBUF_FIELD_OFFSET(::operations_research::bop::BopParameters, decomposer_num_variables_threshold_),
  PROTOBUF_FIELD_OFFSET(::operations_research::bop::BopParameters, num_bop_solvers_used_by_decomposition_),
  PROTOBUF_FIELD_OFFSET(::operations_research::bop::BopParameters, decomposed_problem_min_time_in_seconds_),
  PROTOBUF_FIELD_OFFSET(::operations_research::bop::BopParameters, guided_sat_conflicts_chunk_),
  PROTOBUF_FIELD_OFFSET(::operations_research::bop::BopParameters, max_lp_solve_for_feasibility_problems_),
  12,
  29,
  35,
  6,
  30,
  13,
  34,
  1,
  17,
  2,
  3,
  18,
  14,
  15,
  16,
  21,
  22,
  19,
  20,
  23,
  4,
  7,
  24,
  25,
  26,
  8,
  27,
  28,
  5,
  ~0u,
  0,
  9,
  31,
  32,
  10,
  33,
  11,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::operations_research::bop::BopOptimizerMethod)},
  { 7, -1, sizeof(::operations_research::bop::BopSolverOptimizerSet)},
  { 13, 55, sizeof(::operations_research::bop::BopParameters)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::operations_research::bop::_BopOptimizerMethod_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::operations_research::bop::_BopSolverOptimizerSet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::operations_research::bop::_BopParameters_default_instance_),
};

const char descriptor_table_protodef_ortools_2fbop_2fbop_5fparameters_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n ortools/bop/bop_parameters.proto\022\027oper"
  "ations_research.bop\"\204\004\n\022BopOptimizerMeth"
  "od\022G\n\004type\030\001 \001(\01629.operations_research.b"
  "op.BopOptimizerMethod.OptimizerType\"\244\003\n\r"
  "OptimizerType\022\022\n\016SAT_CORE_BASED\020\000\022\025\n\021SAT"
  "_LINEAR_SEARCH\020\017\022\025\n\021LINEAR_RELAXATION\020\001\022"
  "\020\n\014LOCAL_SEARCH\020\002\022\031\n\025RANDOM_FIRST_SOLUTI"
  "ON\020\003\022\031\n\025RANDOM_CONSTRAINT_LNS\020\004\022\027\n\023RANDO"
  "M_VARIABLE_LNS\020\005\022\020\n\014COMPLETE_LNS\020\007\022\025\n\021LP"
  "_FIRST_SOLUTION\020\010\022\034\n\030OBJECTIVE_FIRST_SOL"
  "UTION\020\t\022\036\n\032USER_GUIDED_FIRST_SOLUTION\020\016\022"
  "&\n\"RANDOM_CONSTRAINT_LNS_GUIDED_BY_LP\020\013\022"
  "$\n RANDOM_VARIABLE_LNS_GUIDED_BY_LP\020\014\022\026\n"
  "\022RELATION_GRAPH_LNS\020\020\022#\n\037RELATION_GRAPH_"
  "LNS_GUIDED_BY_LP\020\021\"U\n\025BopSolverOptimizer"
  "Set\022<\n\007methods\030\001 \003(\0132+.operations_resear"
  "ch.bop.BopOptimizerMethod\"\356\023\n\rBopParamet"
  "ers\022 \n\023max_time_in_seconds\030\001 \001(\001:\003inf\022#\n"
  "\026max_deterministic_time\030\033 \001(\001:\003inf\022$\n\031lp"
  "_max_deterministic_time\030% \001(\001:\0011\0229\n1max_"
  "number_of_consecutive_failing_optimizer_"
  "calls\030# \001(\005\022\"\n\022relative_gap_limit\030\034 \001(\001:"
  "\0060.0001\022\"\n\027max_num_decisions_in_ls\030\002 \001(\005"
  ":\0014\0224\n max_num_broken_constraints_in_ls\030"
  "& \001(\005:\n2147483647\022\"\n\023log_search_progress"
  "\030\016 \001(\010:\005false\022&\n\030compute_estimated_impac"
  "t\030\003 \001(\010:\004true\022 \n\021prune_search_tree\030\004 \001(\010"
  ":\005false\022,\n\035sort_constraints_by_num_terms"
  "\030\005 \001(\010:\005false\022\034\n\016use_random_lns\030\006 \001(\010:\004t"
  "rue\022\026\n\013random_seed\030\007 \001(\005:\0018\022\034\n\020num_relax"
  "ed_vars\030\010 \001(\005:\00210\0223\n%max_number_of_confl"
  "icts_in_random_lns\030\t \001(\005:\0042500\022\037\n\024num_ra"
  "ndom_lns_tries\030\n \001(\005:\0011\0221\n\036max_number_of"
  "_backtracks_in_ls\030\013 \001(\003:\t100000000\022\030\n\nus"
  "e_lp_lns\030\014 \001(\010:\004true\0221\n#use_sat_to_choos"
  "e_lns_neighbourhood\030\017 \001(\010:\004true\0223\n\'max_n"
  "umber_of_conflicts_for_quick_check\030\020 \001(\005"
  ":\00210\022\033\n\014use_symmetry\030\021 \001(\010:\005false\0225\n&exp"
  "loit_symmetry_in_sat_first_solution\030( \001("
  "\010:\005false\022B\n5max_number_of_conflicts_in_r"
  "andom_solution_generation\030\024 \001(\005:\003500\022\?\n0"
  "max_number_of_explored_assignments_per_t"
  "ry_in_ls\030\025 \001(\003:\00510000\022+\n\035use_transpositi"
  "on_table_in_ls\030\026 \001(\010:\004true\0223\n$use_potent"
  "ial_one_flip_repairs_in_ls\030\' \001(\010:\005false\022"
  ".\n use_learned_binary_clauses_in_lp\030\027 \001("
  "\010:\004true\022\034\n\021number_of_solvers\030\030 \001(\005:\0011\022r\n"
  "\024synchronization_type\030\031 \001(\0162@.operations"
  "_research.bop.BopParameters.ThreadSynchr"
  "onizationType:\022NO_SYNCHRONIZATION\022M\n\025sol"
  "ver_optimizer_sets\030\032 \003(\0132..operations_re"
  "search.bop.BopSolverOptimizerSet\022\362\005\n\035def"
  "ault_solver_optimizer_sets\030! \001(\t:\312\005metho"
  "ds:{type:LOCAL_SEARCH }                 "
  "      methods:{type:RANDOM_FIRST_SOLUTIO"
  "N }              methods:{type:LINEAR_RE"
  "LAXATION }                  methods:{typ"
  "e:LP_FIRST_SOLUTION }                  m"
  "ethods:{type:OBJECTIVE_FIRST_SOLUTION } "
  "          methods:{type:USER_GUIDED_FIRS"
  "T_SOLUTION }         methods:{type:RANDO"
  "M_CONSTRAINT_LNS_GUIDED_BY_LP } methods:"
  "{type:RANDOM_VARIABLE_LNS_GUIDED_BY_LP }"
  "   methods:{type:RELATION_GRAPH_LNS }   "
  "              methods:{type:RELATION_GRA"
  "PH_LNS_GUIDED_BY_LP }    methods:{type:R"
  "ANDOM_CONSTRAINT_LNS }              meth"
  "ods:{type:RANDOM_VARIABLE_LNS }         "
  "       methods:{type:SAT_CORE_BASED }   "
  "                  methods:{type:COMPLETE"
  "_LNS }                       \022&\n\027use_lp_"
  "strong_branching\030\035 \001(\010:\005false\022.\n\"decompo"
  "ser_num_variables_threshold\030\036 \001(\005:\00250\0220\n"
  "%num_bop_solvers_used_by_decomposition\030\037"
  " \001(\005:\0011\0221\n&decomposed_problem_min_time_i"
  "n_seconds\030$ \001(\001:\0010\022(\n\032guided_sat_conflic"
  "ts_chunk\030\" \001(\005:\0041000\0220\n%max_lp_solve_for"
  "_feasibility_problems\030) \001(\005:\0010\"b\n\031Thread"
  "SynchronizationType\022\026\n\022NO_SYNCHRONIZATIO"
  "N\020\000\022\023\n\017SYNCHRONIZE_ALL\020\001\022\030\n\024SYNCHRONIZE_"
  "ON_RIGHT\020\002"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ortools_2fbop_2fbop_5fparameters_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ortools_2fbop_2fbop_5fparameters_2eproto_sccs[3] = {
  &scc_info_BopOptimizerMethod_ortools_2fbop_2fbop_5fparameters_2eproto.base,
  &scc_info_BopParameters_ortools_2fbop_2fbop_5fparameters_2eproto.base,
  &scc_info_BopSolverOptimizerSet_ortools_2fbop_2fbop_5fparameters_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ortools_2fbop_2fbop_5fparameters_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ortools_2fbop_2fbop_5fparameters_2eproto = {
  false, false, descriptor_table_protodef_ortools_2fbop_2fbop_5fparameters_2eproto, "ortools/bop/bop_parameters.proto", 3210,
  &descriptor_table_ortools_2fbop_2fbop_5fparameters_2eproto_once, descriptor_table_ortools_2fbop_2fbop_5fparameters_2eproto_sccs, descriptor_table_ortools_2fbop_2fbop_5fparameters_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_ortools_2fbop_2fbop_5fparameters_2eproto::offsets,
  file_level_metadata_ortools_2fbop_2fbop_5fparameters_2eproto, 3, file_level_enum_descriptors_ortools_2fbop_2fbop_5fparameters_2eproto, file_level_service_descriptors_ortools_2fbop_2fbop_5fparameters_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ortools_2fbop_2fbop_5fparameters_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ortools_2fbop_2fbop_5fparameters_2eproto)), true);
namespace operations_research {
namespace bop {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BopOptimizerMethod_OptimizerType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ortools_2fbop_2fbop_5fparameters_2eproto);
  return file_level_enum_descriptors_ortools_2fbop_2fbop_5fparameters_2eproto[0];
}
bool BopOptimizerMethod_OptimizerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 7:
    case 8:
    case 9:
    case 11:
    case 12:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr BopOptimizerMethod_OptimizerType BopOptimizerMethod::SAT_CORE_BASED;
constexpr BopOptimizerMethod_OptimizerType BopOptimizerMethod::SAT_LINEAR_SEARCH;
constexpr BopOptimizerMethod_OptimizerType BopOptimizerMethod::LINEAR_RELAXATION;
constexpr BopOptimizerMethod_OptimizerType BopOptimizerMethod::LOCAL_SEARCH;
constexpr BopOptimizerMethod_OptimizerType BopOptimizerMethod::RANDOM_FIRST_SOLUTION;
constexpr BopOptimizerMethod_OptimizerType BopOptimizerMethod::RANDOM_CONSTRAINT_LNS;
constexpr BopOptimizerMethod_OptimizerType BopOptimizerMethod::RANDOM_VARIABLE_LNS;
constexpr BopOptimizerMethod_OptimizerType BopOptimizerMethod::COMPLETE_LNS;
constexpr BopOptimizerMethod_OptimizerType BopOptimizerMethod::LP_FIRST_SOLUTION;
constexpr BopOptimizerMethod_OptimizerType BopOptimizerMethod::OBJECTIVE_FIRST_SOLUTION;
constexpr BopOptimizerMethod_OptimizerType BopOptimizerMethod::USER_GUIDED_FIRST_SOLUTION;
constexpr BopOptimizerMethod_OptimizerType BopOptimizerMethod::RANDOM_CONSTRAINT_LNS_GUIDED_BY_LP;
constexpr BopOptimizerMethod_OptimizerType BopOptimizerMethod::RANDOM_VARIABLE_LNS_GUIDED_BY_LP;
constexpr BopOptimizerMethod_OptimizerType BopOptimizerMethod::RELATION_GRAPH_LNS;
constexpr BopOptimizerMethod_OptimizerType BopOptimizerMethod::RELATION_GRAPH_LNS_GUIDED_BY_LP;
constexpr BopOptimizerMethod_OptimizerType BopOptimizerMethod::OptimizerType_MIN;
constexpr BopOptimizerMethod_OptimizerType BopOptimizerMethod::OptimizerType_MAX;
constexpr int BopOptimizerMethod::OptimizerType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BopParameters_ThreadSynchronizationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ortools_2fbop_2fbop_5fparameters_2eproto);
  return file_level_enum_descriptors_ortools_2fbop_2fbop_5fparameters_2eproto[1];
}
bool BopParameters_ThreadSynchronizationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr BopParameters_ThreadSynchronizationType BopParameters::NO_SYNCHRONIZATION;
constexpr BopParameters_ThreadSynchronizationType BopParameters::SYNCHRONIZE_ALL;
constexpr BopParameters_ThreadSynchronizationType BopParameters::SYNCHRONIZE_ON_RIGHT;
constexpr BopParameters_ThreadSynchronizationType BopParameters::ThreadSynchronizationType_MIN;
constexpr BopParameters_ThreadSynchronizationType BopParameters::ThreadSynchronizationType_MAX;
constexpr int BopParameters::ThreadSynchronizationType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void BopOptimizerMethod::InitAsDefaultInstance() {
}
class BopOptimizerMethod::_Internal {
 public:
  using HasBits = decltype(std::declval<BopOptimizerMethod>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

BopOptimizerMethod::BopOptimizerMethod(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:operations_research.bop.BopOptimizerMethod)
}
BopOptimizerMethod::BopOptimizerMethod(const BopOptimizerMethod& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:operations_research.bop.BopOptimizerMethod)
}

void BopOptimizerMethod::SharedCtor() {
  type_ = 0;
}

BopOptimizerMethod::~BopOptimizerMethod() {
  // @@protoc_insertion_point(destructor:operations_research.bop.BopOptimizerMethod)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BopOptimizerMethod::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BopOptimizerMethod::ArenaDtor(void* object) {
  BopOptimizerMethod* _this = reinterpret_cast< BopOptimizerMethod* >(object);
  (void)_this;
}
void BopOptimizerMethod::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BopOptimizerMethod::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BopOptimizerMethod& BopOptimizerMethod::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BopOptimizerMethod_ortools_2fbop_2fbop_5fparameters_2eproto.base);
  return *internal_default_instance();
}


void BopOptimizerMethod::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.bop.BopOptimizerMethod)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BopOptimizerMethod::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .operations_research.bop.BopOptimizerMethod.OptimizerType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::operations_research::bop::BopOptimizerMethod_OptimizerType_IsValid(val))) {
            _internal_set_type(static_cast<::operations_research::bop::BopOptimizerMethod_OptimizerType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BopOptimizerMethod::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.bop.BopOptimizerMethod)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .operations_research.bop.BopOptimizerMethod.OptimizerType type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.bop.BopOptimizerMethod)
  return target;
}

size_t BopOptimizerMethod::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.bop.BopOptimizerMethod)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .operations_research.bop.BopOptimizerMethod.OptimizerType type = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BopOptimizerMethod::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:operations_research.bop.BopOptimizerMethod)
  GOOGLE_DCHECK_NE(&from, this);
  const BopOptimizerMethod* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BopOptimizerMethod>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:operations_research.bop.BopOptimizerMethod)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:operations_research.bop.BopOptimizerMethod)
    MergeFrom(*source);
  }
}

void BopOptimizerMethod::MergeFrom(const BopOptimizerMethod& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:operations_research.bop.BopOptimizerMethod)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_type()) {
    _internal_set_type(from._internal_type());
  }
}

void BopOptimizerMethod::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:operations_research.bop.BopOptimizerMethod)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BopOptimizerMethod::CopyFrom(const BopOptimizerMethod& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.bop.BopOptimizerMethod)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BopOptimizerMethod::IsInitialized() const {
  return true;
}

void BopOptimizerMethod::InternalSwap(BopOptimizerMethod* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BopOptimizerMethod::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BopSolverOptimizerSet::InitAsDefaultInstance() {
}
class BopSolverOptimizerSet::_Internal {
 public:
};

BopSolverOptimizerSet::BopSolverOptimizerSet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  methods_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:operations_research.bop.BopSolverOptimizerSet)
}
BopSolverOptimizerSet::BopSolverOptimizerSet(const BopSolverOptimizerSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      methods_(from.methods_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:operations_research.bop.BopSolverOptimizerSet)
}

void BopSolverOptimizerSet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BopSolverOptimizerSet_ortools_2fbop_2fbop_5fparameters_2eproto.base);
}

BopSolverOptimizerSet::~BopSolverOptimizerSet() {
  // @@protoc_insertion_point(destructor:operations_research.bop.BopSolverOptimizerSet)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BopSolverOptimizerSet::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BopSolverOptimizerSet::ArenaDtor(void* object) {
  BopSolverOptimizerSet* _this = reinterpret_cast< BopSolverOptimizerSet* >(object);
  (void)_this;
}
void BopSolverOptimizerSet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BopSolverOptimizerSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BopSolverOptimizerSet& BopSolverOptimizerSet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BopSolverOptimizerSet_ortools_2fbop_2fbop_5fparameters_2eproto.base);
  return *internal_default_instance();
}


void BopSolverOptimizerSet::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.bop.BopSolverOptimizerSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  methods_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BopSolverOptimizerSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .operations_research.bop.BopOptimizerMethod methods = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_methods(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BopSolverOptimizerSet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.bop.BopSolverOptimizerSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .operations_research.bop.BopOptimizerMethod methods = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_methods_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_methods(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.bop.BopSolverOptimizerSet)
  return target;
}

size_t BopSolverOptimizerSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.bop.BopSolverOptimizerSet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .operations_research.bop.BopOptimizerMethod methods = 1;
  total_size += 1UL * this->_internal_methods_size();
  for (const auto& msg : this->methods_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BopSolverOptimizerSet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:operations_research.bop.BopSolverOptimizerSet)
  GOOGLE_DCHECK_NE(&from, this);
  const BopSolverOptimizerSet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BopSolverOptimizerSet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:operations_research.bop.BopSolverOptimizerSet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:operations_research.bop.BopSolverOptimizerSet)
    MergeFrom(*source);
  }
}

void BopSolverOptimizerSet::MergeFrom(const BopSolverOptimizerSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:operations_research.bop.BopSolverOptimizerSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  methods_.MergeFrom(from.methods_);
}

void BopSolverOptimizerSet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:operations_research.bop.BopSolverOptimizerSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BopSolverOptimizerSet::CopyFrom(const BopSolverOptimizerSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.bop.BopSolverOptimizerSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BopSolverOptimizerSet::IsInitialized() const {
  return true;
}

void BopSolverOptimizerSet::InternalSwap(BopSolverOptimizerSet* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  methods_.InternalSwap(&other->methods_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BopSolverOptimizerSet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BopParameters::InitAsDefaultInstance() {
}
class BopParameters::_Internal {
 public:
  using HasBits = decltype(std::declval<BopParameters>()._has_bits_);
  static void set_has_max_time_in_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_max_deterministic_time(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_lp_max_deterministic_time(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_max_number_of_consecutive_failing_optimizer_calls(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_relative_gap_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_max_num_decisions_in_ls(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_max_num_broken_constraints_in_ls(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_log_search_progress(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_compute_estimated_impact(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_prune_search_tree(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sort_constraints_by_num_terms(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_use_random_lns(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_random_seed(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_num_relaxed_vars(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_max_number_of_conflicts_in_random_lns(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_num_random_lns_tries(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_max_number_of_backtracks_in_ls(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_use_lp_lns(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_use_sat_to_choose_lns_neighbourhood(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_max_number_of_conflicts_for_quick_check(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_use_symmetry(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_exploit_symmetry_in_sat_first_solution(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_max_number_of_conflicts_in_random_solution_generation(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_max_number_of_explored_assignments_per_try_in_ls(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_use_transposition_table_in_ls(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_use_potential_one_flip_repairs_in_ls(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_use_learned_binary_clauses_in_lp(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_number_of_solvers(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_synchronization_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_default_solver_optimizer_sets(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_use_lp_strong_branching(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_decomposer_num_variables_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_num_bop_solvers_used_by_decomposition(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_decomposed_problem_min_time_in_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_guided_sat_conflicts_chunk(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_max_lp_solve_for_feasibility_problems(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> BopParameters::_i_give_permission_to_break_this_code_default_default_solver_optimizer_sets_;
BopParameters::BopParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  solver_optimizer_sets_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:operations_research.bop.BopParameters)
}
BopParameters::BopParameters(const BopParameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      solver_optimizer_sets_(from.solver_optimizer_sets_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  default_solver_optimizer_sets_.UnsafeSetDefault(&::operations_research::bop::BopParameters::_i_give_permission_to_break_this_code_default_default_solver_optimizer_sets_.get());
  if (from._internal_has_default_solver_optimizer_sets()) {
    default_solver_optimizer_sets_.Set(&::operations_research::bop::BopParameters::_i_give_permission_to_break_this_code_default_default_solver_optimizer_sets_.get(), from._internal_default_solver_optimizer_sets(),
      GetArena());
  }
  ::memcpy(&log_search_progress_, &from.log_search_progress_,
    static_cast<size_t>(reinterpret_cast<char*>(&lp_max_deterministic_time_) -
    reinterpret_cast<char*>(&log_search_progress_)) + sizeof(lp_max_deterministic_time_));
  // @@protoc_insertion_point(copy_constructor:operations_research.bop.BopParameters)
}

void BopParameters::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BopParameters_ortools_2fbop_2fbop_5fparameters_2eproto.base);
  default_solver_optimizer_sets_.UnsafeSetDefault(&::operations_research::bop::BopParameters::_i_give_permission_to_break_this_code_default_default_solver_optimizer_sets_.get());
  ::memset(&log_search_progress_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_lp_solve_for_feasibility_problems_) -
      reinterpret_cast<char*>(&log_search_progress_)) + sizeof(max_lp_solve_for_feasibility_problems_));
  max_time_in_seconds_ = std::numeric_limits<double>::infinity();
  max_num_decisions_in_ls_ = 4;
  random_seed_ = 8;
  num_relaxed_vars_ = 10;
  max_number_of_conflicts_in_random_lns_ = 2500;
  compute_estimated_impact_ = true;
  use_random_lns_ = true;
  use_lp_lns_ = true;
  use_sat_to_choose_lns_neighbourhood_ = true;
  num_random_lns_tries_ = 1;
  max_number_of_backtracks_in_ls_ = PROTOBUF_LONGLONG(100000000);
  max_number_of_conflicts_for_quick_check_ = 10;
  max_number_of_conflicts_in_random_solution_generation_ = 500;
  max_number_of_explored_assignments_per_try_in_ls_ = PROTOBUF_LONGLONG(10000);
  use_transposition_table_in_ls_ = true;
  use_learned_binary_clauses_in_lp_ = true;
  number_of_solvers_ = 1;
  max_deterministic_time_ = std::numeric_limits<double>::infinity();
  relative_gap_limit_ = 0.0001;
  decomposer_num_variables_threshold_ = 50;
  num_bop_solvers_used_by_decomposition_ = 1;
  guided_sat_conflicts_chunk_ = 1000;
  max_num_broken_constraints_in_ls_ = 2147483647;
  lp_max_deterministic_time_ = 1;
}

BopParameters::~BopParameters() {
  // @@protoc_insertion_point(destructor:operations_research.bop.BopParameters)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BopParameters::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  default_solver_optimizer_sets_.DestroyNoArena(&::operations_research::bop::BopParameters::_i_give_permission_to_break_this_code_default_default_solver_optimizer_sets_.get());
}

void BopParameters::ArenaDtor(void* object) {
  BopParameters* _this = reinterpret_cast< BopParameters* >(object);
  (void)_this;
}
void BopParameters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BopParameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BopParameters& BopParameters::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BopParameters_ortools_2fbop_2fbop_5fparameters_2eproto.base);
  return *internal_default_instance();
}


void BopParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.bop.BopParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  solver_optimizer_sets_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    default_solver_optimizer_sets_.ClearToDefault(&::operations_research::bop::BopParameters::_i_give_permission_to_break_this_code_default_default_solver_optimizer_sets_.get(), GetArena());
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&log_search_progress_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&exploit_symmetry_in_sat_first_solution_) -
        reinterpret_cast<char*>(&log_search_progress_)) + sizeof(exploit_symmetry_in_sat_first_solution_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&use_potential_one_flip_repairs_in_ls_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_lp_solve_for_feasibility_problems_) -
        reinterpret_cast<char*>(&use_potential_one_flip_repairs_in_ls_)) + sizeof(max_lp_solve_for_feasibility_problems_));
    max_time_in_seconds_ = std::numeric_limits<double>::infinity();
    max_num_decisions_in_ls_ = 4;
    random_seed_ = 8;
    num_relaxed_vars_ = 10;
  }
  if (cached_has_bits & 0x00ff0000u) {
    max_number_of_conflicts_in_random_lns_ = 2500;
    compute_estimated_impact_ = true;
    use_random_lns_ = true;
    use_lp_lns_ = true;
    use_sat_to_choose_lns_neighbourhood_ = true;
    num_random_lns_tries_ = 1;
    max_number_of_backtracks_in_ls_ = PROTOBUF_LONGLONG(100000000);
    max_number_of_conflicts_for_quick_check_ = 10;
  }
  if (cached_has_bits & 0xff000000u) {
    max_number_of_conflicts_in_random_solution_generation_ = 500;
    max_number_of_explored_assignments_per_try_in_ls_ = PROTOBUF_LONGLONG(10000);
    use_transposition_table_in_ls_ = true;
    use_learned_binary_clauses_in_lp_ = true;
    number_of_solvers_ = 1;
    max_deterministic_time_ = std::numeric_limits<double>::infinity();
    relative_gap_limit_ = 0.0001;
    decomposer_num_variables_threshold_ = 50;
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x0000000fu) {
    num_bop_solvers_used_by_decomposition_ = 1;
    guided_sat_conflicts_chunk_ = 1000;
    max_num_broken_constraints_in_ls_ = 2147483647;
    lp_max_deterministic_time_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BopParameters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double max_time_in_seconds = 1 [default = inf];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_max_time_in_seconds(&_has_bits_);
          max_time_in_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 max_num_decisions_in_ls = 2 [default = 4];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_max_num_decisions_in_ls(&_has_bits_);
          max_num_decisions_in_ls_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool compute_estimated_impact = 3 [default = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_compute_estimated_impact(&_has_bits_);
          compute_estimated_impact_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool prune_search_tree = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_prune_search_tree(&_has_bits_);
          prune_search_tree_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool sort_constraints_by_num_terms = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_sort_constraints_by_num_terms(&_has_bits_);
          sort_constraints_by_num_terms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_random_lns = 6 [default = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_use_random_lns(&_has_bits_);
          use_random_lns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 random_seed = 7 [default = 8];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_random_seed(&_has_bits_);
          random_seed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_relaxed_vars = 8 [default = 10];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_num_relaxed_vars(&_has_bits_);
          num_relaxed_vars_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_number_of_conflicts_in_random_lns = 9 [default = 2500];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_max_number_of_conflicts_in_random_lns(&_has_bits_);
          max_number_of_conflicts_in_random_lns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_random_lns_tries = 10 [default = 1];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_num_random_lns_tries(&_has_bits_);
          num_random_lns_tries_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 max_number_of_backtracks_in_ls = 11 [default = 100000000];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_max_number_of_backtracks_in_ls(&_has_bits_);
          max_number_of_backtracks_in_ls_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_lp_lns = 12 [default = true];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_use_lp_lns(&_has_bits_);
          use_lp_lns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool log_search_progress = 14 [default = false];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_log_search_progress(&_has_bits_);
          log_search_progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_sat_to_choose_lns_neighbourhood = 15 [default = true];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_use_sat_to_choose_lns_neighbourhood(&_has_bits_);
          use_sat_to_choose_lns_neighbourhood_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_number_of_conflicts_for_quick_check = 16 [default = 10];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_max_number_of_conflicts_for_quick_check(&_has_bits_);
          max_number_of_conflicts_for_quick_check_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_symmetry = 17 [default = false];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_use_symmetry(&_has_bits_);
          use_symmetry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_number_of_conflicts_in_random_solution_generation = 20 [default = 500];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_max_number_of_conflicts_in_random_solution_generation(&_has_bits_);
          max_number_of_conflicts_in_random_solution_generation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 max_number_of_explored_assignments_per_try_in_ls = 21 [default = 10000];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_max_number_of_explored_assignments_per_try_in_ls(&_has_bits_);
          max_number_of_explored_assignments_per_try_in_ls_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_transposition_table_in_ls = 22 [default = true];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_use_transposition_table_in_ls(&_has_bits_);
          use_transposition_table_in_ls_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_learned_binary_clauses_in_lp = 23 [default = true];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_use_learned_binary_clauses_in_lp(&_has_bits_);
          use_learned_binary_clauses_in_lp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 number_of_solvers = 24 [default = 1];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_number_of_solvers(&_has_bits_);
          number_of_solvers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .operations_research.bop.BopParameters.ThreadSynchronizationType synchronization_type = 25 [default = NO_SYNCHRONIZATION];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::operations_research::bop::BopParameters_ThreadSynchronizationType_IsValid(val))) {
            _internal_set_synchronization_type(static_cast<::operations_research::bop::BopParameters_ThreadSynchronizationType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(25, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .operations_research.bop.BopSolverOptimizerSet solver_optimizer_sets = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_solver_optimizer_sets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<210>(ptr));
        } else goto handle_unusual;
        continue;
      // optional double max_deterministic_time = 27 [default = inf];
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 217)) {
          _Internal::set_has_max_deterministic_time(&_has_bits_);
          max_deterministic_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double relative_gap_limit = 28 [default = 0.0001];
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 225)) {
          _Internal::set_has_relative_gap_limit(&_has_bits_);
          relative_gap_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool use_lp_strong_branching = 29 [default = false];
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_use_lp_strong_branching(&_has_bits_);
          use_lp_strong_branching_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 decomposer_num_variables_threshold = 30 [default = 50];
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_decomposer_num_variables_threshold(&_has_bits_);
          decomposer_num_variables_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_bop_solvers_used_by_decomposition = 31 [default = 1];
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_num_bop_solvers_used_by_decomposition(&_has_bits_);
          num_bop_solvers_used_by_decomposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string default_solver_optimizer_sets = 33 [default = "methods:{type:LOCAL_SEARCH }                       methods:{type:RANDOM_FIRST_SOLUTION }              methods:{type:LINEAR_RELAXATION }                  methods:{type:LP_FIRST_SOLUTION }                  methods:{type:OBJECTIVE_FIRST_SOLUTION }           methods:{type:USER_GUIDED_FIRST_SOLUTION }         methods:{type:RANDOM_CONSTRAINT_LNS_GUIDED_BY_LP } methods:{type:RANDOM_VARIABLE_LNS_GUIDED_BY_LP }   methods:{type:RELATION_GRAPH_LNS }                 methods:{type:RELATION_GRAPH_LNS_GUIDED_BY_LP }    methods:{type:RANDOM_CONSTRAINT_LNS }              methods:{type:RANDOM_VARIABLE_LNS }                methods:{type:SAT_CORE_BASED }                     methods:{type:COMPLETE_LNS }                       "];
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_default_solver_optimizer_sets();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "operations_research.bop.BopParameters.default_solver_optimizer_sets");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 guided_sat_conflicts_chunk = 34 [default = 1000];
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_guided_sat_conflicts_chunk(&_has_bits_);
          guided_sat_conflicts_chunk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_number_of_consecutive_failing_optimizer_calls = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_max_number_of_consecutive_failing_optimizer_calls(&_has_bits_);
          max_number_of_consecutive_failing_optimizer_calls_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double decomposed_problem_min_time_in_seconds = 36 [default = 0];
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_decomposed_problem_min_time_in_seconds(&_has_bits_);
          decomposed_problem_min_time_in_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double lp_max_deterministic_time = 37 [default = 1];
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_lp_max_deterministic_time(&_has_bits_);
          lp_max_deterministic_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 max_num_broken_constraints_in_ls = 38 [default = 2147483647];
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_max_num_broken_constraints_in_ls(&_has_bits_);
          max_num_broken_constraints_in_ls_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_potential_one_flip_repairs_in_ls = 39 [default = false];
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_use_potential_one_flip_repairs_in_ls(&_has_bits_);
          use_potential_one_flip_repairs_in_ls_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool exploit_symmetry_in_sat_first_solution = 40 [default = false];
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_exploit_symmetry_in_sat_first_solution(&_has_bits_);
          exploit_symmetry_in_sat_first_solution_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_lp_solve_for_feasibility_problems = 41 [default = 0];
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_max_lp_solve_for_feasibility_problems(&_has_bits_);
          max_lp_solve_for_feasibility_problems_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BopParameters::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.bop.BopParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double max_time_in_seconds = 1 [default = inf];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_max_time_in_seconds(), target);
  }

  // optional int32 max_num_decisions_in_ls = 2 [default = 4];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_max_num_decisions_in_ls(), target);
  }

  // optional bool compute_estimated_impact = 3 [default = true];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_compute_estimated_impact(), target);
  }

  // optional bool prune_search_tree = 4 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_prune_search_tree(), target);
  }

  // optional bool sort_constraints_by_num_terms = 5 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_sort_constraints_by_num_terms(), target);
  }

  // optional bool use_random_lns = 6 [default = true];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_use_random_lns(), target);
  }

  // optional int32 random_seed = 7 [default = 8];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_random_seed(), target);
  }

  // optional int32 num_relaxed_vars = 8 [default = 10];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_num_relaxed_vars(), target);
  }

  // optional int32 max_number_of_conflicts_in_random_lns = 9 [default = 2500];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_max_number_of_conflicts_in_random_lns(), target);
  }

  // optional int32 num_random_lns_tries = 10 [default = 1];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_num_random_lns_tries(), target);
  }

  // optional int64 max_number_of_backtracks_in_ls = 11 [default = 100000000];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_max_number_of_backtracks_in_ls(), target);
  }

  // optional bool use_lp_lns = 12 [default = true];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_use_lp_lns(), target);
  }

  // optional bool log_search_progress = 14 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_log_search_progress(), target);
  }

  // optional bool use_sat_to_choose_lns_neighbourhood = 15 [default = true];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_use_sat_to_choose_lns_neighbourhood(), target);
  }

  // optional int32 max_number_of_conflicts_for_quick_check = 16 [default = 10];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_max_number_of_conflicts_for_quick_check(), target);
  }

  // optional bool use_symmetry = 17 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_use_symmetry(), target);
  }

  // optional int32 max_number_of_conflicts_in_random_solution_generation = 20 [default = 500];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_max_number_of_conflicts_in_random_solution_generation(), target);
  }

  // optional int64 max_number_of_explored_assignments_per_try_in_ls = 21 [default = 10000];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(21, this->_internal_max_number_of_explored_assignments_per_try_in_ls(), target);
  }

  // optional bool use_transposition_table_in_ls = 22 [default = true];
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->_internal_use_transposition_table_in_ls(), target);
  }

  // optional bool use_learned_binary_clauses_in_lp = 23 [default = true];
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->_internal_use_learned_binary_clauses_in_lp(), target);
  }

  // optional int32 number_of_solvers = 24 [default = 1];
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(24, this->_internal_number_of_solvers(), target);
  }

  // optional .operations_research.bop.BopParameters.ThreadSynchronizationType synchronization_type = 25 [default = NO_SYNCHRONIZATION];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      25, this->_internal_synchronization_type(), target);
  }

  // repeated .operations_research.bop.BopSolverOptimizerSet solver_optimizer_sets = 26;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_solver_optimizer_sets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, this->_internal_solver_optimizer_sets(i), target, stream);
  }

  // optional double max_deterministic_time = 27 [default = inf];
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(27, this->_internal_max_deterministic_time(), target);
  }

  // optional double relative_gap_limit = 28 [default = 0.0001];
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(28, this->_internal_relative_gap_limit(), target);
  }

  // optional bool use_lp_strong_branching = 29 [default = false];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(29, this->_internal_use_lp_strong_branching(), target);
  }

  // optional int32 decomposer_num_variables_threshold = 30 [default = 50];
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(30, this->_internal_decomposer_num_variables_threshold(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 num_bop_solvers_used_by_decomposition = 31 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(31, this->_internal_num_bop_solvers_used_by_decomposition(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string default_solver_optimizer_sets = 33 [default = "methods:{type:LOCAL_SEARCH }                       methods:{type:RANDOM_FIRST_SOLUTION }              methods:{type:LINEAR_RELAXATION }                  methods:{type:LP_FIRST_SOLUTION }                  methods:{type:OBJECTIVE_FIRST_SOLUTION }           methods:{type:USER_GUIDED_FIRST_SOLUTION }         methods:{type:RANDOM_CONSTRAINT_LNS_GUIDED_BY_LP } methods:{type:RANDOM_VARIABLE_LNS_GUIDED_BY_LP }   methods:{type:RELATION_GRAPH_LNS }                 methods:{type:RELATION_GRAPH_LNS_GUIDED_BY_LP }    methods:{type:RANDOM_CONSTRAINT_LNS }              methods:{type:RANDOM_VARIABLE_LNS }                methods:{type:SAT_CORE_BASED }                     methods:{type:COMPLETE_LNS }                       "];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_default_solver_optimizer_sets().data(), static_cast<int>(this->_internal_default_solver_optimizer_sets().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "operations_research.bop.BopParameters.default_solver_optimizer_sets");
    target = stream->WriteStringMaybeAliased(
        33, this->_internal_default_solver_optimizer_sets(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 guided_sat_conflicts_chunk = 34 [default = 1000];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(34, this->_internal_guided_sat_conflicts_chunk(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 max_number_of_consecutive_failing_optimizer_calls = 35;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(35, this->_internal_max_number_of_consecutive_failing_optimizer_calls(), target);
  }

  // optional double decomposed_problem_min_time_in_seconds = 36 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(36, this->_internal_decomposed_problem_min_time_in_seconds(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional double lp_max_deterministic_time = 37 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(37, this->_internal_lp_max_deterministic_time(), target);
  }

  // optional int32 max_num_broken_constraints_in_ls = 38 [default = 2147483647];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(38, this->_internal_max_num_broken_constraints_in_ls(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool use_potential_one_flip_repairs_in_ls = 39 [default = false];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(39, this->_internal_use_potential_one_flip_repairs_in_ls(), target);
  }

  // optional bool exploit_symmetry_in_sat_first_solution = 40 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(40, this->_internal_exploit_symmetry_in_sat_first_solution(), target);
  }

  // optional int32 max_lp_solve_for_feasibility_problems = 41 [default = 0];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(41, this->_internal_max_lp_solve_for_feasibility_problems(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.bop.BopParameters)
  return target;
}

size_t BopParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.bop.BopParameters)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .operations_research.bop.BopSolverOptimizerSet solver_optimizer_sets = 26;
  total_size += 2UL * this->_internal_solver_optimizer_sets_size();
  for (const auto& msg : this->solver_optimizer_sets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string default_solver_optimizer_sets = 33 [default = "methods:{type:LOCAL_SEARCH }                       methods:{type:RANDOM_FIRST_SOLUTION }              methods:{type:LINEAR_RELAXATION }                  methods:{type:LP_FIRST_SOLUTION }                  methods:{type:OBJECTIVE_FIRST_SOLUTION }           methods:{type:USER_GUIDED_FIRST_SOLUTION }         methods:{type:RANDOM_CONSTRAINT_LNS_GUIDED_BY_LP } methods:{type:RANDOM_VARIABLE_LNS_GUIDED_BY_LP }   methods:{type:RELATION_GRAPH_LNS }                 methods:{type:RELATION_GRAPH_LNS_GUIDED_BY_LP }    methods:{type:RANDOM_CONSTRAINT_LNS }              methods:{type:RANDOM_VARIABLE_LNS }                methods:{type:SAT_CORE_BASED }                     methods:{type:COMPLETE_LNS }                       "];
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_default_solver_optimizer_sets());
    }

    // optional bool log_search_progress = 14 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool prune_search_tree = 4 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool sort_constraints_by_num_terms = 5 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool use_symmetry = 17 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 1;
    }

    // optional .operations_research.bop.BopParameters.ThreadSynchronizationType synchronization_type = 25 [default = NO_SYNCHRONIZATION];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_synchronization_type());
    }

    // optional int32 max_number_of_consecutive_failing_optimizer_calls = 35;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_max_number_of_consecutive_failing_optimizer_calls());
    }

    // optional bool exploit_symmetry_in_sat_first_solution = 40 [default = false];
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool use_potential_one_flip_repairs_in_ls = 39 [default = false];
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional bool use_lp_strong_branching = 29 [default = false];
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

    // optional double decomposed_problem_min_time_in_seconds = 36 [default = 0];
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 8;
    }

    // optional int32 max_lp_solve_for_feasibility_problems = 41 [default = 0];
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_max_lp_solve_for_feasibility_problems());
    }

    // optional double max_time_in_seconds = 1 [default = inf];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional int32 max_num_decisions_in_ls = 2 [default = 4];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_max_num_decisions_in_ls());
    }

    // optional int32 random_seed = 7 [default = 8];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_random_seed());
    }

    // optional int32 num_relaxed_vars = 8 [default = 10];
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_num_relaxed_vars());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional int32 max_number_of_conflicts_in_random_lns = 9 [default = 2500];
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_max_number_of_conflicts_in_random_lns());
    }

    // optional bool compute_estimated_impact = 3 [default = true];
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 1;
    }

    // optional bool use_random_lns = 6 [default = true];
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 + 1;
    }

    // optional bool use_lp_lns = 12 [default = true];
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 + 1;
    }

    // optional bool use_sat_to_choose_lns_neighbourhood = 15 [default = true];
    if (cached_has_bits & 0x00100000u) {
      total_size += 1 + 1;
    }

    // optional int32 num_random_lns_tries = 10 [default = 1];
    if (cached_has_bits & 0x00200000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_num_random_lns_tries());
    }

    // optional int64 max_number_of_backtracks_in_ls = 11 [default = 100000000];
    if (cached_has_bits & 0x00400000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_max_number_of_backtracks_in_ls());
    }

    // optional int32 max_number_of_conflicts_for_quick_check = 16 [default = 10];
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_max_number_of_conflicts_for_quick_check());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional int32 max_number_of_conflicts_in_random_solution_generation = 20 [default = 500];
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_max_number_of_conflicts_in_random_solution_generation());
    }

    // optional int64 max_number_of_explored_assignments_per_try_in_ls = 21 [default = 10000];
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_max_number_of_explored_assignments_per_try_in_ls());
    }

    // optional bool use_transposition_table_in_ls = 22 [default = true];
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 1;
    }

    // optional bool use_learned_binary_clauses_in_lp = 23 [default = true];
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 1;
    }

    // optional int32 number_of_solvers = 24 [default = 1];
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_number_of_solvers());
    }

    // optional double max_deterministic_time = 27 [default = inf];
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 8;
    }

    // optional double relative_gap_limit = 28 [default = 0.0001];
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 8;
    }

    // optional int32 decomposer_num_variables_threshold = 30 [default = 50];
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_decomposer_num_variables_threshold());
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 num_bop_solvers_used_by_decomposition = 31 [default = 1];
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_num_bop_solvers_used_by_decomposition());
    }

    // optional int32 guided_sat_conflicts_chunk = 34 [default = 1000];
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_guided_sat_conflicts_chunk());
    }

    // optional int32 max_num_broken_constraints_in_ls = 38 [default = 2147483647];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_max_num_broken_constraints_in_ls());
    }

    // optional double lp_max_deterministic_time = 37 [default = 1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BopParameters::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:operations_research.bop.BopParameters)
  GOOGLE_DCHECK_NE(&from, this);
  const BopParameters* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BopParameters>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:operations_research.bop.BopParameters)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:operations_research.bop.BopParameters)
    MergeFrom(*source);
  }
}

void BopParameters::MergeFrom(const BopParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:operations_research.bop.BopParameters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  solver_optimizer_sets_.MergeFrom(from.solver_optimizer_sets_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_default_solver_optimizer_sets(from._internal_default_solver_optimizer_sets());
    }
    if (cached_has_bits & 0x00000002u) {
      log_search_progress_ = from.log_search_progress_;
    }
    if (cached_has_bits & 0x00000004u) {
      prune_search_tree_ = from.prune_search_tree_;
    }
    if (cached_has_bits & 0x00000008u) {
      sort_constraints_by_num_terms_ = from.sort_constraints_by_num_terms_;
    }
    if (cached_has_bits & 0x00000010u) {
      use_symmetry_ = from.use_symmetry_;
    }
    if (cached_has_bits & 0x00000020u) {
      synchronization_type_ = from.synchronization_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      max_number_of_consecutive_failing_optimizer_calls_ = from.max_number_of_consecutive_failing_optimizer_calls_;
    }
    if (cached_has_bits & 0x00000080u) {
      exploit_symmetry_in_sat_first_solution_ = from.exploit_symmetry_in_sat_first_solution_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      use_potential_one_flip_repairs_in_ls_ = from.use_potential_one_flip_repairs_in_ls_;
    }
    if (cached_has_bits & 0x00000200u) {
      use_lp_strong_branching_ = from.use_lp_strong_branching_;
    }
    if (cached_has_bits & 0x00000400u) {
      decomposed_problem_min_time_in_seconds_ = from.decomposed_problem_min_time_in_seconds_;
    }
    if (cached_has_bits & 0x00000800u) {
      max_lp_solve_for_feasibility_problems_ = from.max_lp_solve_for_feasibility_problems_;
    }
    if (cached_has_bits & 0x00001000u) {
      max_time_in_seconds_ = from.max_time_in_seconds_;
    }
    if (cached_has_bits & 0x00002000u) {
      max_num_decisions_in_ls_ = from.max_num_decisions_in_ls_;
    }
    if (cached_has_bits & 0x00004000u) {
      random_seed_ = from.random_seed_;
    }
    if (cached_has_bits & 0x00008000u) {
      num_relaxed_vars_ = from.num_relaxed_vars_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      max_number_of_conflicts_in_random_lns_ = from.max_number_of_conflicts_in_random_lns_;
    }
    if (cached_has_bits & 0x00020000u) {
      compute_estimated_impact_ = from.compute_estimated_impact_;
    }
    if (cached_has_bits & 0x00040000u) {
      use_random_lns_ = from.use_random_lns_;
    }
    if (cached_has_bits & 0x00080000u) {
      use_lp_lns_ = from.use_lp_lns_;
    }
    if (cached_has_bits & 0x00100000u) {
      use_sat_to_choose_lns_neighbourhood_ = from.use_sat_to_choose_lns_neighbourhood_;
    }
    if (cached_has_bits & 0x00200000u) {
      num_random_lns_tries_ = from.num_random_lns_tries_;
    }
    if (cached_has_bits & 0x00400000u) {
      max_number_of_backtracks_in_ls_ = from.max_number_of_backtracks_in_ls_;
    }
    if (cached_has_bits & 0x00800000u) {
      max_number_of_conflicts_for_quick_check_ = from.max_number_of_conflicts_for_quick_check_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      max_number_of_conflicts_in_random_solution_generation_ = from.max_number_of_conflicts_in_random_solution_generation_;
    }
    if (cached_has_bits & 0x02000000u) {
      max_number_of_explored_assignments_per_try_in_ls_ = from.max_number_of_explored_assignments_per_try_in_ls_;
    }
    if (cached_has_bits & 0x04000000u) {
      use_transposition_table_in_ls_ = from.use_transposition_table_in_ls_;
    }
    if (cached_has_bits & 0x08000000u) {
      use_learned_binary_clauses_in_lp_ = from.use_learned_binary_clauses_in_lp_;
    }
    if (cached_has_bits & 0x10000000u) {
      number_of_solvers_ = from.number_of_solvers_;
    }
    if (cached_has_bits & 0x20000000u) {
      max_deterministic_time_ = from.max_deterministic_time_;
    }
    if (cached_has_bits & 0x40000000u) {
      relative_gap_limit_ = from.relative_gap_limit_;
    }
    if (cached_has_bits & 0x80000000u) {
      decomposer_num_variables_threshold_ = from.decomposer_num_variables_threshold_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      num_bop_solvers_used_by_decomposition_ = from.num_bop_solvers_used_by_decomposition_;
    }
    if (cached_has_bits & 0x00000002u) {
      guided_sat_conflicts_chunk_ = from.guided_sat_conflicts_chunk_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_num_broken_constraints_in_ls_ = from.max_num_broken_constraints_in_ls_;
    }
    if (cached_has_bits & 0x00000008u) {
      lp_max_deterministic_time_ = from.lp_max_deterministic_time_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void BopParameters::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:operations_research.bop.BopParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BopParameters::CopyFrom(const BopParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.bop.BopParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BopParameters::IsInitialized() const {
  return true;
}

void BopParameters::InternalSwap(BopParameters* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  solver_optimizer_sets_.InternalSwap(&other->solver_optimizer_sets_);
  default_solver_optimizer_sets_.Swap(&other->default_solver_optimizer_sets_, &::operations_research::bop::BopParameters::_i_give_permission_to_break_this_code_default_default_solver_optimizer_sets_.get(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BopParameters, max_lp_solve_for_feasibility_problems_)
      + sizeof(BopParameters::max_lp_solve_for_feasibility_problems_)
      - PROTOBUF_FIELD_OFFSET(BopParameters, log_search_progress_)>(
          reinterpret_cast<char*>(&log_search_progress_),
          reinterpret_cast<char*>(&other->log_search_progress_));
  swap(max_time_in_seconds_, other->max_time_in_seconds_);
  swap(max_num_decisions_in_ls_, other->max_num_decisions_in_ls_);
  swap(random_seed_, other->random_seed_);
  swap(num_relaxed_vars_, other->num_relaxed_vars_);
  swap(max_number_of_conflicts_in_random_lns_, other->max_number_of_conflicts_in_random_lns_);
  swap(compute_estimated_impact_, other->compute_estimated_impact_);
  swap(use_random_lns_, other->use_random_lns_);
  swap(use_lp_lns_, other->use_lp_lns_);
  swap(use_sat_to_choose_lns_neighbourhood_, other->use_sat_to_choose_lns_neighbourhood_);
  swap(num_random_lns_tries_, other->num_random_lns_tries_);
  swap(max_number_of_backtracks_in_ls_, other->max_number_of_backtracks_in_ls_);
  swap(max_number_of_conflicts_for_quick_check_, other->max_number_of_conflicts_for_quick_check_);
  swap(max_number_of_conflicts_in_random_solution_generation_, other->max_number_of_conflicts_in_random_solution_generation_);
  swap(max_number_of_explored_assignments_per_try_in_ls_, other->max_number_of_explored_assignments_per_try_in_ls_);
  swap(use_transposition_table_in_ls_, other->use_transposition_table_in_ls_);
  swap(use_learned_binary_clauses_in_lp_, other->use_learned_binary_clauses_in_lp_);
  swap(number_of_solvers_, other->number_of_solvers_);
  swap(max_deterministic_time_, other->max_deterministic_time_);
  swap(relative_gap_limit_, other->relative_gap_limit_);
  swap(decomposer_num_variables_threshold_, other->decomposer_num_variables_threshold_);
  swap(num_bop_solvers_used_by_decomposition_, other->num_bop_solvers_used_by_decomposition_);
  swap(guided_sat_conflicts_chunk_, other->guided_sat_conflicts_chunk_);
  swap(max_num_broken_constraints_in_ls_, other->max_num_broken_constraints_in_ls_);
  swap(lp_max_deterministic_time_, other->lp_max_deterministic_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BopParameters::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace bop
}  // namespace operations_research
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::operations_research::bop::BopOptimizerMethod* Arena::CreateMaybeMessage< ::operations_research::bop::BopOptimizerMethod >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::bop::BopOptimizerMethod >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::bop::BopSolverOptimizerSet* Arena::CreateMaybeMessage< ::operations_research::bop::BopSolverOptimizerSet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::bop::BopSolverOptimizerSet >(arena);
}
template<> PROTOBUF_NOINLINE ::operations_research::bop::BopParameters* Arena::CreateMaybeMessage< ::operations_research::bop::BopParameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operations_research::bop::BopParameters >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
